/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ramda = __webpack_require__(1);

	var _ramda2 = _interopRequireDefault(_ramda);

	var _most = __webpack_require__(2);

	var _most2 = _interopRequireDefault(_most);

	var _crackedPepper = __webpack_require__(74);

	var _crackedPepper2 = _interopRequireDefault(_crackedPepper);

	var _three = __webpack_require__(75);

	var THREE = _interopRequireWildcard(_three);

	var _sphere = __webpack_require__(76);

	var _sphere2 = _interopRequireDefault(_sphere);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var SPHERE_STATE = 'EYE'; // EYE
	var switchTime = 0;
	var moveInterval = 2000;

	var swapEyeState = function swapEyeState() {
	  SPHERE_STATE = SPHERE_STATE === 'EYE' ? 'DISPERSE' : 'EYE';
	  switchTime = Date.now();
	};

	var genSphereRow = function genSphereRow(theta, numZ) {
	  return _ramda2.default.unfold(function (n) {
	    return n > numZ ? false : [(0, _sphere2.default)(theta, n / numZ), n + 1];
	  }, 0);
	};

	var genSpheres = function genSpheres(numY, numZ) {
	  return _ramda2.default.unfold(function (n) {
	    return n > numY ? false : [genSphereRow(n / numY, numZ), n + 1];
	  }, 0);
	};

	var helpVec = new THREE.Vector3();
	var updateSphere = function updateSphere(sphere) {
	  //   const minus = SPHERE_STATE === 'EYE' ? 1430 : 0;
	  //   if ( Date.now() - switchTime <= moveInterval - minus ) {
	  //     const { x, y, z } = sphere.position;
	  //     const targetPos = SPHERE_STATE === 'EYE' ? sphere.eyePos : sphere.randPos;
	  //
	  // //    sphere.material.color = new THREE.color
	  //
	  //     sphere.position.set(
	  //       ( ( targetPos.x - x ) * ( Date.now() - switchTime ) / moveInterval ) + x,
	  //       ( ( targetPos.y - y ) * ( Date.now() - switchTime ) / moveInterval ) + y,
	  //       ( ( targetPos.z - z ) * ( Date.now() - switchTime ) / moveInterval ) + z,
	  //     );
	  //   }
	};

	window.onload = function () {
	  // Camera Setup
	  var scene = new THREE.Scene();
	  var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);

	  var renderer = new THREE.WebGLRenderer({ antialias: true });
	  renderer.setPixelRatio(window.devicePixelRatio);
	  renderer.setSize(window.innerWidth, window.innerHeight);
	  renderer.setClearColor(0x000000, 1);
	  document.body.appendChild(renderer.domElement);
	  var effect = new _crackedPepper2.default(renderer);

	  effect.setSize(window.innerWidth, window.innerHeight);
	  effect.viewDistance = 100;

	  var ambientLight = new THREE.AmbientLight(0x000000);
	  scene.add(ambientLight);

	  var lights = [];
	  lights[0] = new THREE.AmbientLight(0xffffff);
	  // lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );
	  // lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );

	  // lights[ 0 ].position.set( 0, 200, 0 );
	  // lights[ 1 ].position.set( 100, 200, 100 );
	  // lights[ 2 ].position.set( - 100, - 200, - 100 );

	  scene.add(lights[0]);
	  // scene.add( lights[ 1 ] );
	  // scene.add( lights[ 2 ] );

	  var eyeSpheres = _ramda2.default.flatten(genSpheres(6, 6));
	  eyeSpheres.forEach(function (sphere) {
	    return scene.add(sphere);
	  });

	  var xRot = 0;
	  var yRot = 0;

	  swapEyeState();

	  var render = function render() {

	    window.setTimeout(render, 100);

	    eyeSpheres.forEach(updateSphere);

	    if (SPHERE_STATE === 'DISPERSE') {
	      xRot += 0.1;
	      yRot += 0.1;
	    }

	    scene.rotation.x = xRot;
	    scene.rotation.y = yRot;

	    effect.render(scene);
	  };

	  window.addEventListener('resize', function () {

	    camera.aspect = window.innerWidth / window.innerHeight;
	    camera.updateProjectionMatrix();

	    renderer.setSize(window.innerWidth, window.innerHeight);
	  }, false);

	  render();

	  document.querySelector('canvas').addEventListener('click', swapEyeState);
	  document.querySelector('canvas').addEventListener('mousemove', function (_ref) {
	    var movementX = _ref.movementX;
	    var movementY = _ref.movementY;

	    if (SPHERE_STATE === 'EYE') {
	      xRot += movementX / window.innerWidth * 4;
	      yRot -= movementY / window.innerHeight * 4;
	    }
	  });
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	//  Ramda v0.22.1
	//  https://github.com/ramda/ramda
	//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers
	//  Ramda may be freely distributed under the MIT license.

	;(function() {

	  'use strict';

	  /**
	     * A special placeholder value used to specify "gaps" within curried functions,
	     * allowing partial application of any combination of arguments, regardless of
	     * their positions.
	     *
	     * If `g` is a curried ternary function and `_` is `R.__`, the following are
	     * equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2, _)(1, 3)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @constant
	     * @memberOf R
	     * @since v0.6.0
	     * @category Function
	     * @example
	     *
	     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
	     *      greet('Alice'); //=> 'Hello, Alice!'
	     */
	    var __ = { '@@functional/placeholder': true };

	    /* eslint-disable no-unused-vars */
	    var _arity = function _arity(n, fn) {
	        /* eslint-disable no-unused-vars */
	        switch (n) {
	        case 0:
	            return function () {
	                return fn.apply(this, arguments);
	            };
	        case 1:
	            return function (a0) {
	                return fn.apply(this, arguments);
	            };
	        case 2:
	            return function (a0, a1) {
	                return fn.apply(this, arguments);
	            };
	        case 3:
	            return function (a0, a1, a2) {
	                return fn.apply(this, arguments);
	            };
	        case 4:
	            return function (a0, a1, a2, a3) {
	                return fn.apply(this, arguments);
	            };
	        case 5:
	            return function (a0, a1, a2, a3, a4) {
	                return fn.apply(this, arguments);
	            };
	        case 6:
	            return function (a0, a1, a2, a3, a4, a5) {
	                return fn.apply(this, arguments);
	            };
	        case 7:
	            return function (a0, a1, a2, a3, a4, a5, a6) {
	                return fn.apply(this, arguments);
	            };
	        case 8:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	                return fn.apply(this, arguments);
	            };
	        case 9:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	                return fn.apply(this, arguments);
	            };
	        case 10:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                return fn.apply(this, arguments);
	            };
	        default:
	            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
	        }
	    };

	    var _arrayFromIterator = function _arrayFromIterator(iter) {
	        var list = [];
	        var next;
	        while (!(next = iter.next()).done) {
	            list.push(next.value);
	        }
	        return list;
	    };

	    var _arrayOf = function _arrayOf() {
	        return Array.prototype.slice.call(arguments);
	    };

	    var _cloneRegExp = function _cloneRegExp(pattern) {
	        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
	    };

	    var _complement = function _complement(f) {
	        return function () {
	            return !f.apply(this, arguments);
	        };
	    };

	    /**
	     * Private `concat` function to merge two array-like objects.
	     *
	     * @private
	     * @param {Array|Arguments} [set1=[]] An array-like object.
	     * @param {Array|Arguments} [set2=[]] An array-like object.
	     * @return {Array} A new, merged array.
	     * @example
	     *
	     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	     */
	    var _concat = function _concat(set1, set2) {
	        set1 = set1 || [];
	        set2 = set2 || [];
	        var idx;
	        var len1 = set1.length;
	        var len2 = set2.length;
	        var result = [];
	        idx = 0;
	        while (idx < len1) {
	            result[result.length] = set1[idx];
	            idx += 1;
	        }
	        idx = 0;
	        while (idx < len2) {
	            result[result.length] = set2[idx];
	            idx += 1;
	        }
	        return result;
	    };

	    var _containsWith = function _containsWith(pred, x, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            if (pred(x, list[idx])) {
	                return true;
	            }
	            idx += 1;
	        }
	        return false;
	    };

	    var _filter = function _filter(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [];
	        while (idx < len) {
	            if (fn(list[idx])) {
	                result[result.length] = list[idx];
	            }
	            idx += 1;
	        }
	        return result;
	    };

	    var _forceReduced = function _forceReduced(x) {
	        return {
	            '@@transducer/value': x,
	            '@@transducer/reduced': true
	        };
	    };

	    // String(x => x) evaluates to "x => x", so the pattern may not match.
	    var _functionName = function _functionName(f) {
	        // String(x => x) evaluates to "x => x", so the pattern may not match.
	        var match = String(f).match(/^function (\w*)/);
	        return match == null ? '' : match[1];
	    };

	    var _has = function _has(prop, obj) {
	        return Object.prototype.hasOwnProperty.call(obj, prop);
	    };

	    var _identity = function _identity(x) {
	        return x;
	    };

	    var _isArguments = function () {
	        var toString = Object.prototype.toString;
	        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
	            return toString.call(x) === '[object Arguments]';
	        } : function _isArguments(x) {
	            return _has('callee', x);
	        };
	    }();

	    /**
	     * Tests whether or not an object is an array.
	     *
	     * @private
	     * @param {*} val The object to test.
	     * @return {Boolean} `true` if `val` is an array, `false` otherwise.
	     * @example
	     *
	     *      _isArray([]); //=> true
	     *      _isArray(null); //=> false
	     *      _isArray({}); //=> false
	     */
	    var _isArray = Array.isArray || function _isArray(val) {
	        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
	    };

	    var _isFunction = function _isFunction(x) {
	        return Object.prototype.toString.call(x) === '[object Function]';
	    };

	    /**
	     * Determine if the passed argument is an integer.
	     *
	     * @private
	     * @param {*} n
	     * @category Type
	     * @return {Boolean}
	     */
	    var _isInteger = Number.isInteger || function _isInteger(n) {
	        return n << 0 === n;
	    };

	    var _isNumber = function _isNumber(x) {
	        return Object.prototype.toString.call(x) === '[object Number]';
	    };

	    var _isObject = function _isObject(x) {
	        return Object.prototype.toString.call(x) === '[object Object]';
	    };

	    var _isPlaceholder = function _isPlaceholder(a) {
	        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
	    };

	    var _isRegExp = function _isRegExp(x) {
	        return Object.prototype.toString.call(x) === '[object RegExp]';
	    };

	    var _isString = function _isString(x) {
	        return Object.prototype.toString.call(x) === '[object String]';
	    };

	    var _isTransformer = function _isTransformer(obj) {
	        return typeof obj['@@transducer/step'] === 'function';
	    };

	    var _map = function _map(fn, functor) {
	        var idx = 0;
	        var len = functor.length;
	        var result = Array(len);
	        while (idx < len) {
	            result[idx] = fn(functor[idx]);
	            idx += 1;
	        }
	        return result;
	    };

	    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	    var _objectAssign = function _objectAssign(target) {
	        if (target == null) {
	            throw new TypeError('Cannot convert undefined or null to object');
	        }
	        var output = Object(target);
	        var idx = 1;
	        var length = arguments.length;
	        while (idx < length) {
	            var source = arguments[idx];
	            if (source != null) {
	                for (var nextKey in source) {
	                    if (_has(nextKey, source)) {
	                        output[nextKey] = source[nextKey];
	                    }
	                }
	            }
	            idx += 1;
	        }
	        return output;
	    };

	    var _of = function _of(x) {
	        return [x];
	    };

	    var _pipe = function _pipe(f, g) {
	        return function () {
	            return g.call(this, f.apply(this, arguments));
	        };
	    };

	    var _pipeP = function _pipeP(f, g) {
	        return function () {
	            var ctx = this;
	            return f.apply(ctx, arguments).then(function (x) {
	                return g.call(ctx, x);
	            });
	        };
	    };

	    // \b matches word boundary; [\b] matches backspace
	    var _quote = function _quote(s) {
	        var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b')    // \b matches word boundary; [\b] matches backspace
	    .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');
	        return '"' + escaped.replace(/"/g, '\\"') + '"';
	    };

	    var _reduced = function _reduced(x) {
	        return x && x['@@transducer/reduced'] ? x : {
	            '@@transducer/value': x,
	            '@@transducer/reduced': true
	        };
	    };

	    /**
	     * An optimized, private array `slice` implementation.
	     *
	     * @private
	     * @param {Arguments|Array} args The array or arguments object to consider.
	     * @param {Number} [from=0] The array index to slice from, inclusive.
	     * @param {Number} [to=args.length] The array index to slice to, exclusive.
	     * @return {Array} A new, sliced array.
	     * @example
	     *
	     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]
	     *
	     *      var firstThreeArgs = function(a, b, c, d) {
	     *        return _slice(arguments, 0, 3);
	     *      };
	     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]
	     */
	    var _slice = function _slice(args, from, to) {
	        switch (arguments.length) {
	        case 1:
	            return _slice(args, 0, args.length);
	        case 2:
	            return _slice(args, from, args.length);
	        default:
	            var list = [];
	            var idx = 0;
	            var len = Math.max(0, Math.min(args.length, to) - from);
	            while (idx < len) {
	                list[idx] = args[from + idx];
	                idx += 1;
	            }
	            return list;
	        }
	    };

	    /**
	     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
	     */
	    var _toISOString = function () {
	        var pad = function pad(n) {
	            return (n < 10 ? '0' : '') + n;
	        };
	        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
	            return d.toISOString();
	        } : function _toISOString(d) {
	            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
	        };
	    }();

	    var _xfBase = {
	        init: function () {
	            return this.xf['@@transducer/init']();
	        },
	        result: function (result) {
	            return this.xf['@@transducer/result'](result);
	        }
	    };

	    var _xwrap = function () {
	        function XWrap(fn) {
	            this.f = fn;
	        }
	        XWrap.prototype['@@transducer/init'] = function () {
	            throw new Error('init not implemented on XWrap');
	        };
	        XWrap.prototype['@@transducer/result'] = function (acc) {
	            return acc;
	        };
	        XWrap.prototype['@@transducer/step'] = function (acc, x) {
	            return this.f(acc, x);
	        };
	        return function _xwrap(fn) {
	            return new XWrap(fn);
	        };
	    }();

	    var _aperture = function _aperture(n, list) {
	        var idx = 0;
	        var limit = list.length - (n - 1);
	        var acc = new Array(limit >= 0 ? limit : 0);
	        while (idx < limit) {
	            acc[idx] = _slice(list, idx, idx + n);
	            idx += 1;
	        }
	        return acc;
	    };

	    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;

	    /**
	     * Similar to hasMethod, this checks whether a function has a [methodname]
	     * function. If it isn't an array it will execute that function otherwise it
	     * will default to the ramda implementation.
	     *
	     * @private
	     * @param {Function} fn ramda implemtation
	     * @param {String} methodname property to check for a custom implementation
	     * @return {Object} Whatever the return value of the method is.
	     */
	    var _checkForMethod = function _checkForMethod(methodname, fn) {
	        return function () {
	            var length = arguments.length;
	            if (length === 0) {
	                return fn();
	            }
	            var obj = arguments[length - 1];
	            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));
	        };
	    };

	    /**
	     * Optimized internal one-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry1 = function _curry1(fn) {
	        return function f1(a) {
	            if (arguments.length === 0 || _isPlaceholder(a)) {
	                return f1;
	            } else {
	                return fn.apply(this, arguments);
	            }
	        };
	    };

	    /**
	     * Optimized internal two-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry2 = function _curry2(fn) {
	        return function f2(a, b) {
	            switch (arguments.length) {
	            case 0:
	                return f2;
	            case 1:
	                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
	                    return fn(a, _b);
	                });
	            default:
	                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
	                    return fn(_a, b);
	                }) : _isPlaceholder(b) ? _curry1(function (_b) {
	                    return fn(a, _b);
	                }) : fn(a, b);
	            }
	        };
	    };

	    /**
	     * Optimized internal three-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry3 = function _curry3(fn) {
	        return function f3(a, b, c) {
	            switch (arguments.length) {
	            case 0:
	                return f3;
	            case 1:
	                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
	                    return fn(a, _b, _c);
	                });
	            case 2:
	                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
	                    return fn(_a, b, _c);
	                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
	                    return fn(a, _b, _c);
	                }) : _curry1(function (_c) {
	                    return fn(a, b, _c);
	                });
	            default:
	                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
	                    return fn(_a, _b, c);
	                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
	                    return fn(_a, b, _c);
	                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
	                    return fn(a, _b, _c);
	                }) : _isPlaceholder(a) ? _curry1(function (_a) {
	                    return fn(_a, b, c);
	                }) : _isPlaceholder(b) ? _curry1(function (_b) {
	                    return fn(a, _b, c);
	                }) : _isPlaceholder(c) ? _curry1(function (_c) {
	                    return fn(a, b, _c);
	                }) : fn(a, b, c);
	            }
	        };
	    };

	    /**
	     * Internal curryN function.
	     *
	     * @private
	     * @category Function
	     * @param {Number} length The arity of the curried function.
	     * @param {Array} received An array of arguments received thus far.
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curryN = function _curryN(length, received, fn) {
	        return function () {
	            var combined = [];
	            var argsIdx = 0;
	            var left = length;
	            var combinedIdx = 0;
	            while (combinedIdx < received.length || argsIdx < arguments.length) {
	                var result;
	                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
	                    result = received[combinedIdx];
	                } else {
	                    result = arguments[argsIdx];
	                    argsIdx += 1;
	                }
	                combined[combinedIdx] = result;
	                if (!_isPlaceholder(result)) {
	                    left -= 1;
	                }
	                combinedIdx += 1;
	            }
	            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
	        };
	    };

	    /**
	     * Returns a function that dispatches with different strategies based on the
	     * object in list position (last argument). If it is an array, executes [fn].
	     * Otherwise, if it has a function with [methodname], it will execute that
	     * function (functor case). Otherwise, if it is a transformer, uses transducer
	     * [xf] to return a new transformer (transducer case). Otherwise, it will
	     * default to executing [fn].
	     *
	     * @private
	     * @param {String} methodname property to check for a custom implementation
	     * @param {Function} xf transducer to initialize if object is transformer
	     * @param {Function} fn default ramda implementation
	     * @return {Function} A function that dispatches on object in list position
	     */
	    var _dispatchable = function _dispatchable(methodname, xf, fn) {
	        return function () {
	            var length = arguments.length;
	            if (length === 0) {
	                return fn();
	            }
	            var obj = arguments[length - 1];
	            if (!_isArray(obj)) {
	                var args = _slice(arguments, 0, length - 1);
	                if (typeof obj[methodname] === 'function') {
	                    return obj[methodname].apply(obj, args);
	                }
	                if (_isTransformer(obj)) {
	                    var transducer = xf.apply(null, args);
	                    return transducer(obj);
	                }
	            }
	            return fn.apply(this, arguments);
	        };
	    };

	    var _dropLastWhile = function dropLastWhile(pred, list) {
	        var idx = list.length - 1;
	        while (idx >= 0 && pred(list[idx])) {
	            idx -= 1;
	        }
	        return _slice(list, 0, idx + 1);
	    };

	    var _xall = function () {
	        function XAll(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.all = true;
	        }
	        XAll.prototype['@@transducer/init'] = _xfBase.init;
	        XAll.prototype['@@transducer/result'] = function (result) {
	            if (this.all) {
	                result = this.xf['@@transducer/step'](result, true);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XAll.prototype['@@transducer/step'] = function (result, input) {
	            if (!this.f(input)) {
	                this.all = false;
	                result = _reduced(this.xf['@@transducer/step'](result, false));
	            }
	            return result;
	        };
	        return _curry2(function _xall(f, xf) {
	            return new XAll(f, xf);
	        });
	    }();

	    var _xany = function () {
	        function XAny(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.any = false;
	        }
	        XAny.prototype['@@transducer/init'] = _xfBase.init;
	        XAny.prototype['@@transducer/result'] = function (result) {
	            if (!this.any) {
	                result = this.xf['@@transducer/step'](result, false);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XAny.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f(input)) {
	                this.any = true;
	                result = _reduced(this.xf['@@transducer/step'](result, true));
	            }
	            return result;
	        };
	        return _curry2(function _xany(f, xf) {
	            return new XAny(f, xf);
	        });
	    }();

	    var _xaperture = function () {
	        function XAperture(n, xf) {
	            this.xf = xf;
	            this.pos = 0;
	            this.full = false;
	            this.acc = new Array(n);
	        }
	        XAperture.prototype['@@transducer/init'] = _xfBase.init;
	        XAperture.prototype['@@transducer/result'] = function (result) {
	            this.acc = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XAperture.prototype['@@transducer/step'] = function (result, input) {
	            this.store(input);
	            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
	        };
	        XAperture.prototype.store = function (input) {
	            this.acc[this.pos] = input;
	            this.pos += 1;
	            if (this.pos === this.acc.length) {
	                this.pos = 0;
	                this.full = true;
	            }
	        };
	        XAperture.prototype.getCopy = function () {
	            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));
	        };
	        return _curry2(function _xaperture(n, xf) {
	            return new XAperture(n, xf);
	        });
	    }();

	    var _xdrop = function () {
	        function XDrop(n, xf) {
	            this.xf = xf;
	            this.n = n;
	        }
	        XDrop.prototype['@@transducer/init'] = _xfBase.init;
	        XDrop.prototype['@@transducer/result'] = _xfBase.result;
	        XDrop.prototype['@@transducer/step'] = function (result, input) {
	            if (this.n > 0) {
	                this.n -= 1;
	                return result;
	            }
	            return this.xf['@@transducer/step'](result, input);
	        };
	        return _curry2(function _xdrop(n, xf) {
	            return new XDrop(n, xf);
	        });
	    }();

	    var _xdropLast = function () {
	        function XDropLast(n, xf) {
	            this.xf = xf;
	            this.pos = 0;
	            this.full = false;
	            this.acc = new Array(n);
	        }
	        XDropLast.prototype['@@transducer/init'] = _xfBase.init;
	        XDropLast.prototype['@@transducer/result'] = function (result) {
	            this.acc = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XDropLast.prototype['@@transducer/step'] = function (result, input) {
	            if (this.full) {
	                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
	            }
	            this.store(input);
	            return result;
	        };
	        XDropLast.prototype.store = function (input) {
	            this.acc[this.pos] = input;
	            this.pos += 1;
	            if (this.pos === this.acc.length) {
	                this.pos = 0;
	                this.full = true;
	            }
	        };
	        return _curry2(function _xdropLast(n, xf) {
	            return new XDropLast(n, xf);
	        });
	    }();

	    var _xdropRepeatsWith = function () {
	        function XDropRepeatsWith(pred, xf) {
	            this.xf = xf;
	            this.pred = pred;
	            this.lastValue = undefined;
	            this.seenFirstValue = false;
	        }
	        XDropRepeatsWith.prototype['@@transducer/init'] = function () {
	            return this.xf['@@transducer/init']();
	        };
	        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {
	            return this.xf['@@transducer/result'](result);
	        };
	        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
	            var sameAsLast = false;
	            if (!this.seenFirstValue) {
	                this.seenFirstValue = true;
	            } else if (this.pred(this.lastValue, input)) {
	                sameAsLast = true;
	            }
	            this.lastValue = input;
	            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
	        };
	        return _curry2(function _xdropRepeatsWith(pred, xf) {
	            return new XDropRepeatsWith(pred, xf);
	        });
	    }();

	    var _xdropWhile = function () {
	        function XDropWhile(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;
	        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;
	        XDropWhile.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f) {
	                if (this.f(input)) {
	                    return result;
	                }
	                this.f = null;
	            }
	            return this.xf['@@transducer/step'](result, input);
	        };
	        return _curry2(function _xdropWhile(f, xf) {
	            return new XDropWhile(f, xf);
	        });
	    }();

	    var _xfilter = function () {
	        function XFilter(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XFilter.prototype['@@transducer/init'] = _xfBase.init;
	        XFilter.prototype['@@transducer/result'] = _xfBase.result;
	        XFilter.prototype['@@transducer/step'] = function (result, input) {
	            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
	        };
	        return _curry2(function _xfilter(f, xf) {
	            return new XFilter(f, xf);
	        });
	    }();

	    var _xfind = function () {
	        function XFind(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.found = false;
	        }
	        XFind.prototype['@@transducer/init'] = _xfBase.init;
	        XFind.prototype['@@transducer/result'] = function (result) {
	            if (!this.found) {
	                result = this.xf['@@transducer/step'](result, void 0);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XFind.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f(input)) {
	                this.found = true;
	                result = _reduced(this.xf['@@transducer/step'](result, input));
	            }
	            return result;
	        };
	        return _curry2(function _xfind(f, xf) {
	            return new XFind(f, xf);
	        });
	    }();

	    var _xfindIndex = function () {
	        function XFindIndex(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.idx = -1;
	            this.found = false;
	        }
	        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;
	        XFindIndex.prototype['@@transducer/result'] = function (result) {
	            if (!this.found) {
	                result = this.xf['@@transducer/step'](result, -1);
	            }
	            return this.xf['@@transducer/result'](result);
	        };
	        XFindIndex.prototype['@@transducer/step'] = function (result, input) {
	            this.idx += 1;
	            if (this.f(input)) {
	                this.found = true;
	                result = _reduced(this.xf['@@transducer/step'](result, this.idx));
	            }
	            return result;
	        };
	        return _curry2(function _xfindIndex(f, xf) {
	            return new XFindIndex(f, xf);
	        });
	    }();

	    var _xfindLast = function () {
	        function XFindLast(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XFindLast.prototype['@@transducer/init'] = _xfBase.init;
	        XFindLast.prototype['@@transducer/result'] = function (result) {
	            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
	        };
	        XFindLast.prototype['@@transducer/step'] = function (result, input) {
	            if (this.f(input)) {
	                this.last = input;
	            }
	            return result;
	        };
	        return _curry2(function _xfindLast(f, xf) {
	            return new XFindLast(f, xf);
	        });
	    }();

	    var _xfindLastIndex = function () {
	        function XFindLastIndex(f, xf) {
	            this.xf = xf;
	            this.f = f;
	            this.idx = -1;
	            this.lastIdx = -1;
	        }
	        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;
	        XFindLastIndex.prototype['@@transducer/result'] = function (result) {
	            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
	        };
	        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
	            this.idx += 1;
	            if (this.f(input)) {
	                this.lastIdx = this.idx;
	            }
	            return result;
	        };
	        return _curry2(function _xfindLastIndex(f, xf) {
	            return new XFindLastIndex(f, xf);
	        });
	    }();

	    var _xmap = function () {
	        function XMap(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XMap.prototype['@@transducer/init'] = _xfBase.init;
	        XMap.prototype['@@transducer/result'] = _xfBase.result;
	        XMap.prototype['@@transducer/step'] = function (result, input) {
	            return this.xf['@@transducer/step'](result, this.f(input));
	        };
	        return _curry2(function _xmap(f, xf) {
	            return new XMap(f, xf);
	        });
	    }();

	    var _xreduceBy = function () {
	        function XReduceBy(valueFn, valueAcc, keyFn, xf) {
	            this.valueFn = valueFn;
	            this.valueAcc = valueAcc;
	            this.keyFn = keyFn;
	            this.xf = xf;
	            this.inputs = {};
	        }
	        XReduceBy.prototype['@@transducer/init'] = _xfBase.init;
	        XReduceBy.prototype['@@transducer/result'] = function (result) {
	            var key;
	            for (key in this.inputs) {
	                if (_has(key, this.inputs)) {
	                    result = this.xf['@@transducer/step'](result, this.inputs[key]);
	                    if (result['@@transducer/reduced']) {
	                        result = result['@@transducer/value'];
	                        break;
	                    }
	                }
	            }
	            this.inputs = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XReduceBy.prototype['@@transducer/step'] = function (result, input) {
	            var key = this.keyFn(input);
	            this.inputs[key] = this.inputs[key] || [
	                key,
	                this.valueAcc
	            ];
	            this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
	            return result;
	        };
	        return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
	            return new XReduceBy(valueFn, valueAcc, keyFn, xf);
	        });
	    }();

	    var _xtake = function () {
	        function XTake(n, xf) {
	            this.xf = xf;
	            this.n = n;
	            this.i = 0;
	        }
	        XTake.prototype['@@transducer/init'] = _xfBase.init;
	        XTake.prototype['@@transducer/result'] = _xfBase.result;
	        XTake.prototype['@@transducer/step'] = function (result, input) {
	            this.i += 1;
	            var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
	            return this.i >= this.n ? _reduced(ret) : ret;
	        };
	        return _curry2(function _xtake(n, xf) {
	            return new XTake(n, xf);
	        });
	    }();

	    var _xtakeWhile = function () {
	        function XTakeWhile(f, xf) {
	            this.xf = xf;
	            this.f = f;
	        }
	        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;
	        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;
	        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
	            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);
	        };
	        return _curry2(function _xtakeWhile(f, xf) {
	            return new XTakeWhile(f, xf);
	        });
	    }();

	    /**
	     * Adds two values.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Number}
	     * @see R.subtract
	     * @example
	     *
	     *      R.add(2, 3);       //=>  5
	     *      R.add(7)(10);      //=> 17
	     */
	    var add = _curry2(function add(a, b) {
	        return Number(a) + Number(b);
	    });

	    /**
	     * Applies a function to the value at the given index of an array, returning a
	     * new copy of the array with the element at the given index replaced with the
	     * result of the function application.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig (a -> a) -> Number -> [a] -> [a]
	     * @param {Function} fn The function to apply.
	     * @param {Number} idx The index.
	     * @param {Array|Arguments} list An array-like object whose value
	     *        at the supplied index will be replaced.
	     * @return {Array} A copy of the supplied array-like object with
	     *         the element at index `idx` replaced with the value
	     *         returned by applying `fn` to the existing element.
	     * @see R.update
	     * @example
	     *
	     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]
	     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]
	     */
	    var adjust = _curry3(function adjust(fn, idx, list) {
	        if (idx >= list.length || idx < -list.length) {
	            return list;
	        }
	        var start = idx < 0 ? list.length : 0;
	        var _idx = start + idx;
	        var _list = _concat(list);
	        _list[_idx] = fn(list[_idx]);
	        return _list;
	    });

	    /**
	     * Returns `true` if all elements of the list match the predicate, `false` if
	     * there are any that don't.
	     *
	     * Dispatches to the `all` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
	     *         otherwise.
	     * @see R.any, R.none, R.transduce
	     * @example
	     *
	     *      var lessThan2 = R.flip(R.lt)(2);
	     *      var lessThan3 = R.flip(R.lt)(3);
	     *      R.all(lessThan2)([1, 2]); //=> false
	     *      R.all(lessThan3)([1, 2]); //=> true
	     */
	    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {
	        var idx = 0;
	        while (idx < list.length) {
	            if (!fn(list[idx])) {
	                return false;
	            }
	            idx += 1;
	        }
	        return true;
	    }));

	    /**
	     * Returns a function that always returns the given value. Note that for
	     * non-primitives the value returned is a reference to the original value.
	     *
	     * This function is known as `const`, `constant`, or `K` (for K combinator) in
	     * other languages and libraries.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig a -> (* -> a)
	     * @param {*} val The value to wrap in a function
	     * @return {Function} A Function :: * -> val.
	     * @example
	     *
	     *      var t = R.always('Tee');
	     *      t(); //=> 'Tee'
	     */
	    var always = _curry1(function always(val) {
	        return function () {
	            return val;
	        };
	    });

	    /**
	     * Returns `true` if both arguments are `true`; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig * -> * -> *
	     * @param {Boolean} a A boolean value
	     * @param {Boolean} b A boolean value
	     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise
	     * @see R.both
	     * @example
	     *
	     *      R.and(true, true); //=> true
	     *      R.and(true, false); //=> false
	     *      R.and(false, true); //=> false
	     *      R.and(false, false); //=> false
	     */
	    var and = _curry2(function and(a, b) {
	        return a && b;
	    });

	    /**
	     * Returns `true` if at least one of elements of the list match the predicate,
	     * `false` otherwise.
	     *
	     * Dispatches to the `any` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
	     *         otherwise.
	     * @see R.all, R.none, R.transduce
	     * @example
	     *
	     *      var lessThan0 = R.flip(R.lt)(0);
	     *      var lessThan2 = R.flip(R.lt)(2);
	     *      R.any(lessThan0)([1, 2]); //=> false
	     *      R.any(lessThan2)([1, 2]); //=> true
	     */
	    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {
	        var idx = 0;
	        while (idx < list.length) {
	            if (fn(list[idx])) {
	                return true;
	            }
	            idx += 1;
	        }
	        return false;
	    }));

	    /**
	     * Returns a new list, composed of n-tuples of consecutive elements If `n` is
	     * greater than the length of the list, an empty list is returned.
	     *
	     * Dispatches to the `aperture` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig Number -> [a] -> [[a]]
	     * @param {Number} n The size of the tuples to create
	     * @param {Array} list The list to split into `n`-tuples
	     * @return {Array} The new list.
	     * @see R.transduce
	     * @example
	     *
	     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
	     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
	     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
	     */
	    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));

	    /**
	     * Returns a new list containing the contents of the given list, followed by
	     * the given element.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} el The element to add to the end of the new list.
	     * @param {Array} list The list whose contents will be added to the beginning of the output
	     *        list.
	     * @return {Array} A new list containing the contents of the old list followed by `el`.
	     * @see R.prepend
	     * @example
	     *
	     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
	     *      R.append('tests', []); //=> ['tests']
	     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
	     */
	    var append = _curry2(function append(el, list) {
	        return _concat(list, [el]);
	    });

	    /**
	     * Applies function `fn` to the argument list `args`. This is useful for
	     * creating a fixed-arity function from a variadic function. `fn` should be a
	     * bound function if context is significant.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Function
	     * @sig (*... -> a) -> [*] -> a
	     * @param {Function} fn
	     * @param {Array} args
	     * @return {*}
	     * @see R.call, R.unapply
	     * @example
	     *
	     *      var nums = [1, 2, 3, -99, 42, 6, 7];
	     *      R.apply(Math.max, nums); //=> 42
	     */
	    var apply = _curry2(function apply(fn, args) {
	        return fn.apply(this, args);
	    });

	    /**
	     * Makes a shallow clone of an object, setting or overriding the specified
	     * property with the given value. Note that this copies and flattens prototype
	     * properties onto the new object as well. All non-primitive properties are
	     * copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @sig String -> a -> {k: v} -> {k: v}
	     * @param {String} prop the property name to set
	     * @param {*} val the new value
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original except for the specified property.
	     * @see R.dissoc
	     * @example
	     *
	     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
	     */
	    var assoc = _curry3(function assoc(prop, val, obj) {
	        var result = {};
	        for (var p in obj) {
	            result[p] = obj[p];
	        }
	        result[prop] = val;
	        return result;
	    });

	    /**
	     * Makes a shallow clone of an object, setting or overriding the nodes required
	     * to create the given path, and placing the specific value at the tail end of
	     * that path. Note that this copies and flattens prototype properties onto the
	     * new object as well. All non-primitive properties are copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @sig [String] -> a -> {k: v} -> {k: v}
	     * @param {Array} path the path to set
	     * @param {*} val the new value
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original except along the specified path.
	     * @see R.dissocPath
	     * @example
	     *
	     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
	     */
	    var assocPath = _curry3(function assocPath(path, val, obj) {
	        switch (path.length) {
	        case 0:
	            return val;
	        case 1:
	            return assoc(path[0], val, obj);
	        default:
	            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);
	        }
	    });

	    /**
	     * Creates a function that is bound to a context.
	     * Note: `R.bind` does not provide the additional argument-binding capabilities of
	     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category Function
	     * @category Object
	     * @sig (* -> *) -> {*} -> (* -> *)
	     * @param {Function} fn The function to bind to context
	     * @param {Object} thisObj The context to bind `fn` to
	     * @return {Function} A function that will execute in the context of `thisObj`.
	     * @see R.partial
	     * @example
	     *
	     *      var log = R.bind(console.log, console);
	     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
	     *      // logs {a: 2}
	     */
	    var bind = _curry2(function bind(fn, thisObj) {
	        return _arity(fn.length, function () {
	            return fn.apply(thisObj, arguments);
	        });
	    });

	    /**
	     * Restricts a number to be within a range.
	     *
	     * Also works for other ordered types such as Strings and Dates.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Relation
	     * @sig Ord a => a -> a -> a -> a
	     * @param {Number} minimum number
	     * @param {Number} maximum number
	     * @param {Number} value to be clamped
	     * @return {Number} Returns the clamped value
	     * @example
	     *
	     *      R.clamp(1, 10, -1) // => 1
	     *      R.clamp(1, 10, 11) // => 10
	     *      R.clamp(1, 10, 4)  // => 4
	     */
	    var clamp = _curry3(function clamp(min, max, value) {
	        if (min > max) {
	            throw new Error('min must not be greater than max in clamp(min, max, value)');
	        }
	        return value < min ? min : value > max ? max : value;
	    });

	    /**
	     * Makes a comparator function out of a function that reports whether the first
	     * element is less than the second.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a, b -> Boolean) -> (a, b -> Number)
	     * @param {Function} pred A predicate function of arity two.
	     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.
	     * @example
	     *
	     *      var cmp = R.comparator((a, b) => a.age < b.age);
	     *      var people = [
	     *        // ...
	     *      ];
	     *      R.sort(cmp, people);
	     */
	    var comparator = _curry1(function comparator(pred) {
	        return function (a, b) {
	            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
	        };
	    });

	    /**
	     * Returns a curried equivalent of the provided function, with the specified
	     * arity. The curried function has two unusual capabilities. First, its
	     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
	     * following are equivalent:
	     *
	     *   - `g(1)(2)(3)`
	     *   - `g(1)(2, 3)`
	     *   - `g(1, 2)(3)`
	     *   - `g(1, 2, 3)`
	     *
	     * Secondly, the special placeholder value `R.__` may be used to specify
	     * "gaps", allowing partial application of any combination of arguments,
	     * regardless of their positions. If `g` is as above and `_` is `R.__`, the
	     * following are equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @func
	     * @memberOf R
	     * @since v0.5.0
	     * @category Function
	     * @sig Number -> (* -> a) -> (* -> a)
	     * @param {Number} length The arity for the returned function.
	     * @param {Function} fn The function to curry.
	     * @return {Function} A new, curried function.
	     * @see R.curry
	     * @example
	     *
	     *      var sumArgs = (...args) => R.sum(args);
	     *
	     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
	     *      var f = curriedAddFourNumbers(1, 2);
	     *      var g = f(3);
	     *      g(4); //=> 10
	     */
	    var curryN = _curry2(function curryN(length, fn) {
	        if (length === 1) {
	            return _curry1(fn);
	        }
	        return _arity(length, _curryN(length, [], fn));
	    });

	    /**
	     * Decrements its argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @see R.inc
	     * @example
	     *
	     *      R.dec(42); //=> 41
	     */
	    var dec = add(-1);

	    /**
	     * Returns the second argument if it is not `null`, `undefined` or `NaN`
	     * otherwise the first argument is returned.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Logic
	     * @sig a -> b -> a | b
	     * @param {a} val The default value.
	     * @param {b} val The value to return if it is not null or undefined
	     * @return {*} The the second value or the default value
	     * @example
	     *
	     *      var defaultTo42 = R.defaultTo(42);
	     *
	     *      defaultTo42(null);  //=> 42
	     *      defaultTo42(undefined);  //=> 42
	     *      defaultTo42('Ramda');  //=> 'Ramda'
	     *      defaultTo42(parseInt('string')); //=> 42
	     */
	    var defaultTo = _curry2(function defaultTo(d, v) {
	        return v == null || v !== v ? d : v;
	    });

	    /**
	     * Finds the set (i.e. no duplicates) of all elements in the first list not
	     * contained in the second list. Duplication is determined according to the
	     * value returned by applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` that are not in `list2`.
	     * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
	     * @example
	     *
	     *      var cmp = (x, y) => x.a === y.a;
	     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
	     *      var l2 = [{a: 3}, {a: 4}];
	     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
	     */
	    var differenceWith = _curry3(function differenceWith(pred, first, second) {
	        var out = [];
	        var idx = 0;
	        var firstLen = first.length;
	        while (idx < firstLen) {
	            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {
	                out.push(first[idx]);
	            }
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a new object that does not contain a `prop` property.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Object
	     * @sig String -> {k: v} -> {k: v}
	     * @param {String} prop the name of the property to dissociate
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original but without the specified property
	     * @see R.assoc
	     * @example
	     *
	     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
	     */
	    var dissoc = _curry2(function dissoc(prop, obj) {
	        var result = {};
	        for (var p in obj) {
	            if (p !== prop) {
	                result[p] = obj[p];
	            }
	        }
	        return result;
	    });

	    /**
	     * Makes a shallow clone of an object, omitting the property at the given path.
	     * Note that this copies and flattens prototype properties onto the new object
	     * as well. All non-primitive properties are copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.11.0
	     * @category Object
	     * @sig [String] -> {k: v} -> {k: v}
	     * @param {Array} path the path to set
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object without the property at path
	     * @see R.assocPath
	     * @example
	     *
	     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
	     */
	    var dissocPath = _curry2(function dissocPath(path, obj) {
	        switch (path.length) {
	        case 0:
	            return obj;
	        case 1:
	            return dissoc(path[0], obj);
	        default:
	            var head = path[0];
	            var tail = _slice(path, 1);
	            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);
	        }
	    });

	    /**
	     * Divides two numbers. Equivalent to `a / b`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a / b`.
	     * @see R.multiply
	     * @example
	     *
	     *      R.divide(71, 100); //=> 0.71
	     *
	     *      var half = R.divide(R.__, 2);
	     *      half(42); //=> 21
	     *
	     *      var reciprocal = R.divide(1);
	     *      reciprocal(4);   //=> 0.25
	     */
	    var divide = _curry2(function divide(a, b) {
	        return a / b;
	    });

	    /**
	     * Returns a new list excluding the leading elements of a given list which
	     * satisfy the supplied predicate function. It passes each value to the supplied
	     * predicate function, skipping elements while the predicate function returns
	     * `true`. The predicate function is applied to one argument: *(value)*.
	     *
	     * Dispatches to the `dropWhile` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.takeWhile, R.transduce, R.addIndex
	     * @example
	     *
	     *      var lteTwo = x => x <= 2;
	     *
	     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
	     */
	    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len && pred(list[idx])) {
	            idx += 1;
	        }
	        return _slice(list, idx);
	    }));

	    /**
	     * Returns the empty value of its argument's type. Ramda defines the empty
	     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
	     * types are supported if they define `<Type>.empty` and/or
	     * `<Type>.prototype.empty`.
	     *
	     * Dispatches to the `empty` method of the first argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Function
	     * @sig a -> a
	     * @param {*} x
	     * @return {*}
	     * @example
	     *
	     *      R.empty(Just(42));      //=> Nothing()
	     *      R.empty([1, 2, 3]);     //=> []
	     *      R.empty('unicorns');    //=> ''
	     *      R.empty({x: 1, y: 2});  //=> {}
	     */
	    // else
	    var empty = _curry1(function empty(x) {
	        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
	            return arguments;
	        }() : // else
	        void 0;
	    });

	    /**
	     * Creates a new object by recursively evolving a shallow copy of `object`,
	     * according to the `transformation` functions. All non-primitive properties
	     * are copied by reference.
	     *
	     * A `transformation` function will not be invoked if its corresponding key
	     * does not exist in the evolved object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig {k: (v -> v)} -> {k: v} -> {k: v}
	     * @param {Object} transformations The object specifying transformation functions to apply
	     *        to the object.
	     * @param {Object} object The object to be transformed.
	     * @return {Object} The transformed object.
	     * @example
	     *
	     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
	     *      var transformations = {
	     *        firstName: R.trim,
	     *        lastName: R.trim, // Will not get invoked.
	     *        data: {elapsed: R.add(1), remaining: R.add(-1)}
	     *      };
	     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
	     */
	    var evolve = _curry2(function evolve(transformations, object) {
	        var result = {};
	        var transformation, key, type;
	        for (key in object) {
	            transformation = transformations[key];
	            type = typeof transformation;
	            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];
	        }
	        return result;
	    });

	    /**
	     * Returns the first element of the list which matches the predicate, or
	     * `undefined` if no element matches.
	     *
	     * Dispatches to the `find` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> a | undefined
	     * @param {Function} fn The predicate function used to determine if the element is the
	     *        desired one.
	     * @param {Array} list The array to consider.
	     * @return {Object} The element found, or `undefined`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
	     *      R.find(R.propEq('a', 4))(xs); //=> undefined
	     */
	    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            if (fn(list[idx])) {
	                return list[idx];
	            }
	            idx += 1;
	        }
	    }));

	    /**
	     * Returns the index of the first element of the list which matches the
	     * predicate, or `-1` if no element matches.
	     *
	     * Dispatches to the `findIndex` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Number
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Number} The index of the element found, or `-1`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
	     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
	     */
	    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            if (fn(list[idx])) {
	                return idx;
	            }
	            idx += 1;
	        }
	        return -1;
	    }));

	    /**
	     * Returns the last element of the list which matches the predicate, or
	     * `undefined` if no element matches.
	     *
	     * Dispatches to the `findLast` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> a | undefined
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Object} The element found, or `undefined`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
	     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
	     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
	     */
	    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {
	        var idx = list.length - 1;
	        while (idx >= 0) {
	            if (fn(list[idx])) {
	                return list[idx];
	            }
	            idx -= 1;
	        }
	    }));

	    /**
	     * Returns the index of the last element of the list which matches the
	     * predicate, or `-1` if no element matches.
	     *
	     * Dispatches to the `findLastIndex` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Number
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Number} The index of the element found, or `-1`.
	     * @see R.transduce
	     * @example
	     *
	     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
	     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
	     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
	     */
	    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {
	        var idx = list.length - 1;
	        while (idx >= 0) {
	            if (fn(list[idx])) {
	                return idx;
	            }
	            idx -= 1;
	        }
	        return -1;
	    }));

	    /**
	     * Iterate over an input `list`, calling a provided function `fn` for each
	     * element in the list.
	     *
	     * `fn` receives one argument: *(value)*.
	     *
	     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
	     * arrays), unlike the native `Array.prototype.forEach` method. For more
	     * details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
	     *
	     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
	     * the original array. In some libraries this function is named `each`.
	     *
	     * Dispatches to the `forEach` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig (a -> *) -> [a] -> [a]
	     * @param {Function} fn The function to invoke. Receives one argument, `value`.
	     * @param {Array} list The list to iterate over.
	     * @return {Array} The original list.
	     * @see R.addIndex
	     * @example
	     *
	     *      var printXPlusFive = x => console.log(x + 5);
	     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
	     *      // logs 6
	     *      // logs 7
	     *      // logs 8
	     */
	    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {
	        var len = list.length;
	        var idx = 0;
	        while (idx < len) {
	            fn(list[idx]);
	            idx += 1;
	        }
	        return list;
	    }));

	    /**
	     * Creates a new object from a list key-value pairs. If a key appears in
	     * multiple pairs, the rightmost pair is included in the object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig [[k,v]] -> {k: v}
	     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
	     * @return {Object} The object made by pairing up `keys` and `values`.
	     * @see R.toPairs, R.pair
	     * @example
	     *
	     *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
	     */
	    var fromPairs = _curry1(function fromPairs(pairs) {
	        var result = {};
	        var idx = 0;
	        while (idx < pairs.length) {
	            result[pairs[idx][0]] = pairs[idx][1];
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Takes a list and returns a list of lists where each sublist's elements are
	     * all "equal" according to the provided equality function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.21.0
	     * @category List
	     * @sig ((a, a) → Boolean) → [a] → [[a]]
	     * @param {Function} fn Function for determining whether two given (adjacent)
	     *        elements should be in the same group
	     * @param {Array} list The array to group. Also accepts a string, which will be
	     *        treated as a list of characters.
	     * @return {List} A list that contains sublists of equal elements,
	     *         whose concatenations are equal to the original list.
	     * @example
	     *
	     * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
	     * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
	     *
	     * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
	     * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
	     *
	     * R.groupWith(R.eqBy(isVowel), 'aestiou')
	     * //=> ['ae', 'st', 'iou']
	     */
	    var groupWith = _curry2(function (fn, list) {
	        var res = [];
	        var idx = 0;
	        var len = list.length;
	        while (idx < len) {
	            var nextidx = idx + 1;
	            while (nextidx < len && fn(list[idx], list[nextidx])) {
	                nextidx += 1;
	            }
	            res.push(list.slice(idx, nextidx));
	            idx = nextidx;
	        }
	        return res;
	    });

	    /**
	     * Returns `true` if the first argument is greater than the second; `false`
	     * otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @see R.lt
	     * @example
	     *
	     *      R.gt(2, 1); //=> true
	     *      R.gt(2, 2); //=> false
	     *      R.gt(2, 3); //=> false
	     *      R.gt('a', 'z'); //=> false
	     *      R.gt('z', 'a'); //=> true
	     */
	    var gt = _curry2(function gt(a, b) {
	        return a > b;
	    });

	    /**
	     * Returns `true` if the first argument is greater than or equal to the second;
	     * `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean}
	     * @see R.lte
	     * @example
	     *
	     *      R.gte(2, 1); //=> true
	     *      R.gte(2, 2); //=> true
	     *      R.gte(2, 3); //=> false
	     *      R.gte('a', 'z'); //=> false
	     *      R.gte('z', 'a'); //=> true
	     */
	    var gte = _curry2(function gte(a, b) {
	        return a >= b;
	    });

	    /**
	     * Returns whether or not an object has an own property with the specified name
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Object
	     * @sig s -> {s: x} -> Boolean
	     * @param {String} prop The name of the property to check for.
	     * @param {Object} obj The object to query.
	     * @return {Boolean} Whether the property exists.
	     * @example
	     *
	     *      var hasName = R.has('name');
	     *      hasName({name: 'alice'});   //=> true
	     *      hasName({name: 'bob'});     //=> true
	     *      hasName({});                //=> false
	     *
	     *      var point = {x: 0, y: 0};
	     *      var pointHas = R.has(R.__, point);
	     *      pointHas('x');  //=> true
	     *      pointHas('y');  //=> true
	     *      pointHas('z');  //=> false
	     */
	    var has = _curry2(_has);

	    /**
	     * Returns whether or not an object or its prototype chain has a property with
	     * the specified name
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Object
	     * @sig s -> {s: x} -> Boolean
	     * @param {String} prop The name of the property to check for.
	     * @param {Object} obj The object to query.
	     * @return {Boolean} Whether the property exists.
	     * @example
	     *
	     *      function Rectangle(width, height) {
	     *        this.width = width;
	     *        this.height = height;
	     *      }
	     *      Rectangle.prototype.area = function() {
	     *        return this.width * this.height;
	     *      };
	     *
	     *      var square = new Rectangle(2, 2);
	     *      R.hasIn('width', square);  //=> true
	     *      R.hasIn('area', square);  //=> true
	     */
	    var hasIn = _curry2(function hasIn(prop, obj) {
	        return prop in obj;
	    });

	    /**
	     * Returns true if its arguments are identical, false otherwise. Values are
	     * identical if they reference the same memory. `NaN` is identical to `NaN`;
	     * `0` and `-0` are not identical.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category Relation
	     * @sig a -> a -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @example
	     *
	     *      var o = {};
	     *      R.identical(o, o); //=> true
	     *      R.identical(1, 1); //=> true
	     *      R.identical(1, '1'); //=> false
	     *      R.identical([], []); //=> false
	     *      R.identical(0, -0); //=> false
	     *      R.identical(NaN, NaN); //=> true
	     */
	    // SameValue algorithm
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Step 6.a: NaN == NaN
	    var identical = _curry2(function identical(a, b) {
	        // SameValue algorithm
	        if (a === b) {
	            // Steps 1-5, 7-10
	            // Steps 6.b-6.e: +0 != -0
	            return a !== 0 || 1 / a === 1 / b;
	        } else {
	            // Step 6.a: NaN == NaN
	            return a !== a && b !== b;
	        }
	    });

	    /**
	     * A function that does nothing but return the parameter supplied to it. Good
	     * as a default or placeholder function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig a -> a
	     * @param {*} x The value to return.
	     * @return {*} The input value, `x`.
	     * @example
	     *
	     *      R.identity(1); //=> 1
	     *
	     *      var obj = {};
	     *      R.identity(obj) === obj; //=> true
	     */
	    var identity = _curry1(_identity);

	    /**
	     * Creates a function that will process either the `onTrue` or the `onFalse`
	     * function depending upon the result of the `condition` predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
	     * @param {Function} condition A predicate function
	     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
	     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
	     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
	     *                    function depending upon the result of the `condition` predicate.
	     * @see R.unless, R.when
	     * @example
	     *
	     *      var incCount = R.ifElse(
	     *        R.has('count'),
	     *        R.over(R.lensProp('count'), R.inc),
	     *        R.assoc('count', 1)
	     *      );
	     *      incCount({});           //=> { count: 1 }
	     *      incCount({ count: 1 }); //=> { count: 2 }
	     */
	    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {
	        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
	            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
	        });
	    });

	    /**
	     * Increments its argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @see R.dec
	     * @example
	     *
	     *      R.inc(42); //=> 43
	     */
	    var inc = add(1);

	    /**
	     * Inserts the supplied element into the list, at index `index`. _Note that
	     * this is not destructive_: it returns a copy of the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.2
	     * @category List
	     * @sig Number -> a -> [a] -> [a]
	     * @param {Number} index The position to insert the element
	     * @param {*} elt The element to insert into the Array
	     * @param {Array} list The list to insert into
	     * @return {Array} A new Array with `elt` inserted at `index`.
	     * @example
	     *
	     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
	     */
	    var insert = _curry3(function insert(idx, elt, list) {
	        idx = idx < list.length && idx >= 0 ? idx : list.length;
	        var result = _slice(list);
	        result.splice(idx, 0, elt);
	        return result;
	    });

	    /**
	     * Inserts the sub-list into the list, at index `index`. _Note that this is not
	     * destructive_: it returns a copy of the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category List
	     * @sig Number -> [a] -> [a] -> [a]
	     * @param {Number} index The position to insert the sub-list
	     * @param {Array} elts The sub-list to insert into the Array
	     * @param {Array} list The list to insert the sub-list into
	     * @return {Array} A new Array with `elts` inserted starting at `index`.
	     * @example
	     *
	     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
	     */
	    var insertAll = _curry3(function insertAll(idx, elts, list) {
	        idx = idx < list.length && idx >= 0 ? idx : list.length;
	        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));
	    });

	    /**
	     * Creates a new list with the separator interposed between elements.
	     *
	     * Dispatches to the `intersperse` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} separator The element to add to the list.
	     * @param {Array} list The list to be interposed.
	     * @return {Array} The new list.
	     * @example
	     *
	     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']
	     */
	    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {
	        var out = [];
	        var idx = 0;
	        var length = list.length;
	        while (idx < length) {
	            if (idx === length - 1) {
	                out.push(list[idx]);
	            } else {
	                out.push(list[idx], separator);
	            }
	            idx += 1;
	        }
	        return out;
	    }));

	    /**
	     * See if an object (`val`) is an instance of the supplied constructor. This
	     * function will check up the inheritance chain, if any.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Type
	     * @sig (* -> {*}) -> a -> Boolean
	     * @param {Object} ctor A constructor
	     * @param {*} val The value to test
	     * @return {Boolean}
	     * @example
	     *
	     *      R.is(Object, {}); //=> true
	     *      R.is(Number, 1); //=> true
	     *      R.is(Object, 1); //=> false
	     *      R.is(String, 's'); //=> true
	     *      R.is(String, new String('')); //=> true
	     *      R.is(Object, new String('')); //=> true
	     *      R.is(Object, 's'); //=> false
	     *      R.is(Number, {}); //=> false
	     */
	    var is = _curry2(function is(Ctor, val) {
	        return val != null && val.constructor === Ctor || val instanceof Ctor;
	    });

	    /**
	     * Tests whether or not an object is similar to an array.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.5.0
	     * @category Type
	     * @category List
	     * @sig * -> Boolean
	     * @param {*} x The object to test.
	     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
	     * @example
	     *
	     *      R.isArrayLike([]); //=> true
	     *      R.isArrayLike(true); //=> false
	     *      R.isArrayLike({}); //=> false
	     *      R.isArrayLike({length: 10}); //=> false
	     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
	     */
	    var isArrayLike = _curry1(function isArrayLike(x) {
	        if (_isArray(x)) {
	            return true;
	        }
	        if (!x) {
	            return false;
	        }
	        if (typeof x !== 'object') {
	            return false;
	        }
	        if (_isString(x)) {
	            return false;
	        }
	        if (x.nodeType === 1) {
	            return !!x.length;
	        }
	        if (x.length === 0) {
	            return true;
	        }
	        if (x.length > 0) {
	            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
	        }
	        return false;
	    });

	    /**
	     * Checks if the input value is `null` or `undefined`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Type
	     * @sig * -> Boolean
	     * @param {*} x The value to test.
	     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
	     * @example
	     *
	     *      R.isNil(null); //=> true
	     *      R.isNil(undefined); //=> true
	     *      R.isNil(0); //=> false
	     *      R.isNil([]); //=> false
	     */
	    var isNil = _curry1(function isNil(x) {
	        return x == null;
	    });

	    /**
	     * Returns a list containing the names of all the enumerable own properties of
	     * the supplied object.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {k: v} -> [k]
	     * @param {Object} obj The object to extract properties from
	     * @return {Array} An array of the object's own properties.
	     * @example
	     *
	     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
	     */
	    // cover IE < 9 keys issues
	    // Safari bug
	    var keys = function () {
	        // cover IE < 9 keys issues
	        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
	        var nonEnumerableProps = [
	            'constructor',
	            'valueOf',
	            'isPrototypeOf',
	            'toString',
	            'propertyIsEnumerable',
	            'hasOwnProperty',
	            'toLocaleString'
	        ];
	        // Safari bug
	        var hasArgsEnumBug = function () {
	            'use strict';
	            return arguments.propertyIsEnumerable('length');
	        }();
	        var contains = function contains(list, item) {
	            var idx = 0;
	            while (idx < list.length) {
	                if (list[idx] === item) {
	                    return true;
	                }
	                idx += 1;
	            }
	            return false;
	        };
	        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {
	            return Object(obj) !== obj ? [] : Object.keys(obj);
	        }) : _curry1(function keys(obj) {
	            if (Object(obj) !== obj) {
	                return [];
	            }
	            var prop, nIdx;
	            var ks = [];
	            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
	            for (prop in obj) {
	                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
	                    ks[ks.length] = prop;
	                }
	            }
	            if (hasEnumBug) {
	                nIdx = nonEnumerableProps.length - 1;
	                while (nIdx >= 0) {
	                    prop = nonEnumerableProps[nIdx];
	                    if (_has(prop, obj) && !contains(ks, prop)) {
	                        ks[ks.length] = prop;
	                    }
	                    nIdx -= 1;
	                }
	            }
	            return ks;
	        });
	    }();

	    /**
	     * Returns a list containing the names of all the properties of the supplied
	     * object, including prototype properties.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Object
	     * @sig {k: v} -> [k]
	     * @param {Object} obj The object to extract properties from
	     * @return {Array} An array of the object's own and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.keysIn(f); //=> ['x', 'y']
	     */
	    var keysIn = _curry1(function keysIn(obj) {
	        var prop;
	        var ks = [];
	        for (prop in obj) {
	            ks[ks.length] = prop;
	        }
	        return ks;
	    });

	    /**
	     * Returns the number of elements in the array by returning `list.length`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig [a] -> Number
	     * @param {Array} list The array to inspect.
	     * @return {Number} The length of the array.
	     * @example
	     *
	     *      R.length([]); //=> 0
	     *      R.length([1, 2, 3]); //=> 3
	     */
	    var length = _curry1(function length(list) {
	        return list != null && _isNumber(list.length) ? list.length : NaN;
	    });

	    /**
	     * Returns `true` if the first argument is less than the second; `false`
	     * otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @see R.gt
	     * @example
	     *
	     *      R.lt(2, 1); //=> false
	     *      R.lt(2, 2); //=> false
	     *      R.lt(2, 3); //=> true
	     *      R.lt('a', 'z'); //=> true
	     *      R.lt('z', 'a'); //=> false
	     */
	    var lt = _curry2(function lt(a, b) {
	        return a < b;
	    });

	    /**
	     * Returns `true` if the first argument is less than or equal to the second;
	     * `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean}
	     * @see R.gte
	     * @example
	     *
	     *      R.lte(2, 1); //=> false
	     *      R.lte(2, 2); //=> true
	     *      R.lte(2, 3); //=> true
	     *      R.lte('a', 'z'); //=> true
	     *      R.lte('z', 'a'); //=> false
	     */
	    var lte = _curry2(function lte(a, b) {
	        return a <= b;
	    });

	    /**
	     * The mapAccum function behaves like a combination of map and reduce; it
	     * applies a function to each element of a list, passing an accumulating
	     * parameter from left to right, and returning a final value of this
	     * accumulator together with the new list.
	     *
	     * The iterator function receives two arguments, *acc* and *value*, and should
	     * return a tuple *[acc, value]*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.addIndex
	     * @example
	     *
	     *      var digits = ['1', '2', '3', '4'];
	     *      var appender = (a, b) => [a + b, a + b];
	     *
	     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
	     */
	    var mapAccum = _curry3(function mapAccum(fn, acc, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [];
	        var tuple = [acc];
	        while (idx < len) {
	            tuple = fn(tuple[0], list[idx]);
	            result[idx] = tuple[1];
	            idx += 1;
	        }
	        return [
	            tuple[0],
	            result
	        ];
	    });

	    /**
	     * The mapAccumRight function behaves like a combination of map and reduce; it
	     * applies a function to each element of a list, passing an accumulating
	     * parameter from right to left, and returning a final value of this
	     * accumulator together with the new list.
	     *
	     * Similar to `mapAccum`, except moves through the input list from the right to
	     * the left.
	     *
	     * The iterator function receives two arguments, *acc* and *value*, and should
	     * return a tuple *[acc, value]*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.addIndex
	     * @example
	     *
	     *      var digits = ['1', '2', '3', '4'];
	     *      var append = (a, b) => [a + b, a + b];
	     *
	     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]
	     */
	    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {
	        var idx = list.length - 1;
	        var result = [];
	        var tuple = [acc];
	        while (idx >= 0) {
	            tuple = fn(tuple[0], list[idx]);
	            result[idx] = tuple[1];
	            idx -= 1;
	        }
	        return [
	            tuple[0],
	            result
	        ];
	    });

	    /**
	     * Tests a regular expression against a String. Note that this function will
	     * return an empty array when there are no matches. This differs from
	     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
	     * which returns `null` when there are no matches.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category String
	     * @sig RegExp -> String -> [String | Undefined]
	     * @param {RegExp} rx A regular expression.
	     * @param {String} str The string to match against
	     * @return {Array} The list of matches or empty array.
	     * @see R.test
	     * @example
	     *
	     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
	     *      R.match(/a/, 'b'); //=> []
	     *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
	     */
	    var match = _curry2(function match(rx, str) {
	        return str.match(rx) || [];
	    });

	    /**
	     * mathMod behaves like the modulo operator should mathematically, unlike the
	     * `%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,
	     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN
	     * when the modulus is zero or negative.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} m The dividend.
	     * @param {Number} p the modulus.
	     * @return {Number} The result of `b mod a`.
	     * @example
	     *
	     *      R.mathMod(-17, 5);  //=> 3
	     *      R.mathMod(17, 5);   //=> 2
	     *      R.mathMod(17, -5);  //=> NaN
	     *      R.mathMod(17, 0);   //=> NaN
	     *      R.mathMod(17.2, 5); //=> NaN
	     *      R.mathMod(17, 5.3); //=> NaN
	     *
	     *      var clock = R.mathMod(R.__, 12);
	     *      clock(15); //=> 3
	     *      clock(24); //=> 0
	     *
	     *      var seventeenMod = R.mathMod(17);
	     *      seventeenMod(3);  //=> 2
	     *      seventeenMod(4);  //=> 1
	     *      seventeenMod(10); //=> 7
	     */
	    var mathMod = _curry2(function mathMod(m, p) {
	        if (!_isInteger(m)) {
	            return NaN;
	        }
	        if (!_isInteger(p) || p < 1) {
	            return NaN;
	        }
	        return (m % p + p) % p;
	    });

	    /**
	     * Returns the larger of its two arguments.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> a
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.maxBy, R.min
	     * @example
	     *
	     *      R.max(789, 123); //=> 789
	     *      R.max('a', 'b'); //=> 'b'
	     */
	    var max = _curry2(function max(a, b) {
	        return b > a ? b : a;
	    });

	    /**
	     * Takes a function and two values, and returns whichever value produces the
	     * larger result when passed to the provided function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Relation
	     * @sig Ord b => (a -> b) -> a -> a -> a
	     * @param {Function} f
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.max, R.minBy
	     * @example
	     *
	     *      //  square :: Number -> Number
	     *      var square = n => n * n;
	     *
	     *      R.maxBy(square, -3, 2); //=> -3
	     *
	     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
	     *      R.reduce(R.maxBy(square), 0, []); //=> 0
	     */
	    var maxBy = _curry3(function maxBy(f, a, b) {
	        return f(b) > f(a) ? b : a;
	    });

	    /**
	     * Create a new object with the own properties of the first object merged with
	     * the own properties of the second object. If a key exists in both objects,
	     * the value from the second object will be used.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {k: v} -> {k: v} -> {k: v}
	     * @param {Object} l
	     * @param {Object} r
	     * @return {Object}
	     * @see R.mergeWith, R.mergeWithKey
	     * @example
	     *
	     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
	     *      //=> { 'name': 'fred', 'age': 40 }
	     *
	     *      var resetToDefault = R.merge(R.__, {x: 0});
	     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
	     */
	    var merge = _curry2(function merge(l, r) {
	        return _assign({}, l, r);
	    });

	    /**
	     * Merges a list of objects together into one object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig [{k: v}] -> {k: v}
	     * @param {Array} list An array of objects
	     * @return {Object} A merged object.
	     * @see R.reduce
	     * @example
	     *
	     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
	     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
	     */
	    var mergeAll = _curry1(function mergeAll(list) {
	        return _assign.apply(null, [{}].concat(list));
	    });

	    /**
	     * Creates a new object with the own properties of the two provided objects. If
	     * a key exists in both objects, the provided function is applied to the key
	     * and the values associated with the key in each object, with the result being
	     * used as the value associated with the key in the returned object. The key
	     * will be excluded from the returned object if the resulting value is
	     * `undefined`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Object
	     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}
	     * @param {Function} fn
	     * @param {Object} l
	     * @param {Object} r
	     * @return {Object}
	     * @see R.merge, R.mergeWith
	     * @example
	     *
	     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
	     *      R.mergeWithKey(concatValues,
	     *                     { a: true, thing: 'foo', values: [10, 20] },
	     *                     { b: true, thing: 'bar', values: [15, 35] });
	     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
	     */
	    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {
	        var result = {};
	        var k;
	        for (k in l) {
	            if (_has(k, l)) {
	                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
	            }
	        }
	        for (k in r) {
	            if (_has(k, r) && !_has(k, result)) {
	                result[k] = r[k];
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns the smaller of its two arguments.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord a => a -> a -> a
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.minBy, R.max
	     * @example
	     *
	     *      R.min(789, 123); //=> 123
	     *      R.min('a', 'b'); //=> 'a'
	     */
	    var min = _curry2(function min(a, b) {
	        return b < a ? b : a;
	    });

	    /**
	     * Takes a function and two values, and returns whichever value produces the
	     * smaller result when passed to the provided function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Relation
	     * @sig Ord b => (a -> b) -> a -> a -> a
	     * @param {Function} f
	     * @param {*} a
	     * @param {*} b
	     * @return {*}
	     * @see R.min, R.maxBy
	     * @example
	     *
	     *      //  square :: Number -> Number
	     *      var square = n => n * n;
	     *
	     *      R.minBy(square, -3, 2); //=> 2
	     *
	     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
	     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
	     */
	    var minBy = _curry3(function minBy(f, a, b) {
	        return f(b) < f(a) ? b : a;
	    });

	    /**
	     * Divides the first parameter by the second and returns the remainder. Note
	     * that this function preserves the JavaScript-style behavior for modulo. For
	     * mathematical modulo see `mathMod`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The value to the divide.
	     * @param {Number} b The pseudo-modulus
	     * @return {Number} The result of `b % a`.
	     * @see R.mathMod
	     * @example
	     *
	     *      R.modulo(17, 3); //=> 2
	     *      // JS behavior:
	     *      R.modulo(-17, 3); //=> -2
	     *      R.modulo(17, -3); //=> 2
	     *
	     *      var isOdd = R.modulo(R.__, 2);
	     *      isOdd(42); //=> 0
	     *      isOdd(21); //=> 1
	     */
	    var modulo = _curry2(function modulo(a, b) {
	        return a % b;
	    });

	    /**
	     * Multiplies two numbers. Equivalent to `a * b` but curried.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a * b`.
	     * @see R.divide
	     * @example
	     *
	     *      var double = R.multiply(2);
	     *      var triple = R.multiply(3);
	     *      double(3);       //=>  6
	     *      triple(4);       //=> 12
	     *      R.multiply(2, 5);  //=> 10
	     */
	    var multiply = _curry2(function multiply(a, b) {
	        return a * b;
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts
	     * exactly `n` parameters. Any extraneous parameters will not be passed to the
	     * supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig Number -> (* -> a) -> (* -> a)
	     * @param {Number} n The desired arity of the new function.
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity `n`.
	     * @example
	     *
	     *      var takesTwoArgs = (a, b) => [a, b];
	     *
	     *      takesTwoArgs.length; //=> 2
	     *      takesTwoArgs(1, 2); //=> [1, 2]
	     *
	     *      var takesOneArg = R.nAry(1, takesTwoArgs);
	     *      takesOneArg.length; //=> 1
	     *      // Only `n` arguments are passed to the wrapped function
	     *      takesOneArg(1, 2); //=> [1, undefined]
	     */
	    var nAry = _curry2(function nAry(n, fn) {
	        switch (n) {
	        case 0:
	            return function () {
	                return fn.call(this);
	            };
	        case 1:
	            return function (a0) {
	                return fn.call(this, a0);
	            };
	        case 2:
	            return function (a0, a1) {
	                return fn.call(this, a0, a1);
	            };
	        case 3:
	            return function (a0, a1, a2) {
	                return fn.call(this, a0, a1, a2);
	            };
	        case 4:
	            return function (a0, a1, a2, a3) {
	                return fn.call(this, a0, a1, a2, a3);
	            };
	        case 5:
	            return function (a0, a1, a2, a3, a4) {
	                return fn.call(this, a0, a1, a2, a3, a4);
	            };
	        case 6:
	            return function (a0, a1, a2, a3, a4, a5) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5);
	            };
	        case 7:
	            return function (a0, a1, a2, a3, a4, a5, a6) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
	            };
	        case 8:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
	            };
	        case 9:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
	            };
	        case 10:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
	            };
	        default:
	            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
	        }
	    });

	    /**
	     * Negates its argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @example
	     *
	     *      R.negate(42); //=> -42
	     */
	    var negate = _curry1(function negate(n) {
	        return -n;
	    });

	    /**
	     * Returns `true` if no elements of the list match the predicate, `false`
	     * otherwise.
	     *
	     * Dispatches to the `any` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
	     * @see R.all, R.any
	     * @example
	     *
	     *      var isEven = n => n % 2 === 0;
	     *
	     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
	     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false
	     */
	    var none = _curry2(_complement(_dispatchable('any', _xany, any)));

	    /**
	     * A function that returns the `!` of its argument. It will return `true` when
	     * passed false-y value, and `false` when passed a truth-y one.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig * -> Boolean
	     * @param {*} a any value
	     * @return {Boolean} the logical inverse of passed argument.
	     * @see R.complement
	     * @example
	     *
	     *      R.not(true); //=> false
	     *      R.not(false); //=> true
	     *      R.not(0); //=> true
	     *      R.not(1); //=> false
	     */
	    var not = _curry1(function not(a) {
	        return !a;
	    });

	    /**
	     * Returns the nth element of the given list or string. If n is negative the
	     * element at index length + n is returned.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> [a] -> a | Undefined
	     * @sig Number -> String -> String
	     * @param {Number} offset
	     * @param {*} list
	     * @return {*}
	     * @example
	     *
	     *      var list = ['foo', 'bar', 'baz', 'quux'];
	     *      R.nth(1, list); //=> 'bar'
	     *      R.nth(-1, list); //=> 'quux'
	     *      R.nth(-99, list); //=> undefined
	     *
	     *      R.nth(2, 'abc'); //=> 'c'
	     *      R.nth(3, 'abc'); //=> ''
	     */
	    var nth = _curry2(function nth(offset, list) {
	        var idx = offset < 0 ? list.length + offset : offset;
	        return _isString(list) ? list.charAt(idx) : list[idx];
	    });

	    /**
	     * Returns a function which returns its nth argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig Number -> *... -> *
	     * @param {Number} n
	     * @return {Function}
	     * @example
	     *
	     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
	     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
	     */
	    var nthArg = _curry1(function nthArg(n) {
	        var arity = n < 0 ? 1 : n + 1;
	        return curryN(arity, function () {
	            return nth(n, arguments);
	        });
	    });

	    /**
	     * Creates an object containing a single key:value pair.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Object
	     * @sig String -> a -> {String:a}
	     * @param {String} key
	     * @param {*} val
	     * @return {Object}
	     * @see R.pair
	     * @example
	     *
	     *      var matchPhrases = R.compose(
	     *        R.objOf('must'),
	     *        R.map(R.objOf('match_phrase'))
	     *      );
	     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
	     */
	    var objOf = _curry2(function objOf(key, val) {
	        var obj = {};
	        obj[key] = val;
	        return obj;
	    });

	    /**
	     * Returns a singleton array containing the value provided.
	     *
	     * Note this `of` is different from the ES6 `of`; See
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Function
	     * @sig a -> [a]
	     * @param {*} x any value
	     * @return {Array} An array wrapping `x`.
	     * @example
	     *
	     *      R.of(null); //=> [null]
	     *      R.of([42]); //=> [[42]]
	     */
	    var of = _curry1(_of);

	    /**
	     * Accepts a function `fn` and returns a function that guards invocation of
	     * `fn` such that `fn` can only ever be called once, no matter how many times
	     * the returned function is invoked. The first value calculated is returned in
	     * subsequent invocations.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a... -> b) -> (a... -> b)
	     * @param {Function} fn The function to wrap in a call-only-once wrapper.
	     * @return {Function} The wrapped function.
	     * @example
	     *
	     *      var addOneOnce = R.once(x => x + 1);
	     *      addOneOnce(10); //=> 11
	     *      addOneOnce(addOneOnce(50)); //=> 11
	     */
	    var once = _curry1(function once(fn) {
	        var called = false;
	        var result;
	        return _arity(fn.length, function () {
	            if (called) {
	                return result;
	            }
	            called = true;
	            result = fn.apply(this, arguments);
	            return result;
	        });
	    });

	    /**
	     * Returns `true` if one or both of its arguments are `true`. Returns `false`
	     * if both arguments are `false`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig * -> * -> *
	     * @param {Boolean} a A boolean value
	     * @param {Boolean} b A boolean value
	     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise
	     * @see R.either
	     * @example
	     *
	     *      R.or(true, true); //=> true
	     *      R.or(true, false); //=> true
	     *      R.or(false, true); //=> true
	     *      R.or(false, false); //=> false
	     */
	    var or = _curry2(function or(a, b) {
	        return a || b;
	    });

	    /**
	     * Returns the result of "setting" the portion of the given data structure
	     * focused by the given lens to the result of applying the given function to
	     * the focused value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Lens s a -> (a -> a) -> s -> s
	     * @param {Lens} lens
	     * @param {*} v
	     * @param {*} x
	     * @return {*}
	     * @see R.prop, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var headLens = R.lensIndex(0);
	     *
	     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
	     */
	    // `Identity` is a functor that holds a single value, where `map` simply
	    // transforms the held value with the provided function.
	    // The value returned by the getter function is first transformed with `f`,
	    // then set as the value of an `Identity`. This is then mapped over with the
	    // setter function of the lens.
	    var over = function () {
	        // `Identity` is a functor that holds a single value, where `map` simply
	        // transforms the held value with the provided function.
	        var Identity = function (x) {
	            return {
	                value: x,
	                map: function (f) {
	                    return Identity(f(x));
	                }
	            };
	        };
	        return _curry3(function over(lens, f, x) {
	            // The value returned by the getter function is first transformed with `f`,
	            // then set as the value of an `Identity`. This is then mapped over with the
	            // setter function of the lens.
	            return lens(function (y) {
	                return Identity(f(y));
	            })(x).value;
	        });
	    }();

	    /**
	     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category List
	     * @sig a -> b -> (a,b)
	     * @param {*} fst
	     * @param {*} snd
	     * @return {Array}
	     * @see R.objOf, R.of
	     * @example
	     *
	     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
	     */
	    var pair = _curry2(function pair(fst, snd) {
	        return [
	            fst,
	            snd
	        ];
	    });

	    /**
	     * Retrieve the value at a given path.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Object
	     * @sig [String] -> {k: v} -> v | Undefined
	     * @param {Array} path The path to use.
	     * @param {Object} obj The object to retrieve the nested property from.
	     * @return {*} The data at `path`.
	     * @see R.prop
	     * @example
	     *
	     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
	     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
	     */
	    var path = _curry2(function path(paths, obj) {
	        var val = obj;
	        var idx = 0;
	        while (idx < paths.length) {
	            if (val == null) {
	                return;
	            }
	            val = val[paths[idx]];
	            idx += 1;
	        }
	        return val;
	    });

	    /**
	     * If the given, non-null object has a value at the given path, returns the
	     * value at that path. Otherwise returns the provided default value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Object
	     * @sig a -> [String] -> Object -> a
	     * @param {*} d The default value.
	     * @param {Array} p The path to use.
	     * @param {Object} obj The object to retrieve the nested property from.
	     * @return {*} The data at `path` of the supplied object or the default value.
	     * @example
	     *
	     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
	     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
	     */
	    var pathOr = _curry3(function pathOr(d, p, obj) {
	        return defaultTo(d, path(p, obj));
	    });

	    /**
	     * Returns `true` if the specified object property at given path satisfies the
	     * given predicate; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Logic
	     * @sig (a -> Boolean) -> [String] -> Object -> Boolean
	     * @param {Function} pred
	     * @param {Array} propPath
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.propSatisfies, R.path
	     * @example
	     *
	     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
	     */
	    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {
	        return propPath.length > 0 && pred(path(propPath, obj));
	    });

	    /**
	     * Returns a partial copy of an object containing only the keys specified. If
	     * the key does not exist, the property is ignored.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [k] -> {k: v} -> {k: v}
	     * @param {Array} names an array of String property names to copy onto a new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties from `names` on it.
	     * @see R.omit, R.props
	     * @example
	     *
	     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
	     */
	    var pick = _curry2(function pick(names, obj) {
	        var result = {};
	        var idx = 0;
	        while (idx < names.length) {
	            if (names[idx] in obj) {
	                result[names[idx]] = obj[names[idx]];
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Similar to `pick` except that this one includes a `key: undefined` pair for
	     * properties that don't exist.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [k] -> {k: v} -> {k: v}
	     * @param {Array} names an array of String property names to copy onto a new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties from `names` on it.
	     * @see R.pick
	     * @example
	     *
	     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
	     */
	    var pickAll = _curry2(function pickAll(names, obj) {
	        var result = {};
	        var idx = 0;
	        var len = names.length;
	        while (idx < len) {
	            var name = names[idx];
	            result[name] = obj[name];
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns a partial copy of an object containing only the keys that satisfy
	     * the supplied predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}
	     * @param {Function} pred A predicate to determine whether or not a key
	     *        should be included on the output object.
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties that satisfy `pred`
	     *         on it.
	     * @see R.pick, R.filter
	     * @example
	     *
	     *      var isUpperCase = (val, key) => key.toUpperCase() === key;
	     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
	     */
	    var pickBy = _curry2(function pickBy(test, obj) {
	        var result = {};
	        for (var prop in obj) {
	            if (test(obj[prop], prop, obj)) {
	                result[prop] = obj[prop];
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns a new list with the given element at the front, followed by the
	     * contents of the list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} el The item to add to the head of the output list.
	     * @param {Array} list The array to add to the tail of the output list.
	     * @return {Array} A new array.
	     * @see R.append
	     * @example
	     *
	     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
	     */
	    var prepend = _curry2(function prepend(el, list) {
	        return _concat([el], list);
	    });

	    /**
	     * Returns a function that when supplied an object returns the indicated
	     * property of that object, if it exists.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig s -> {s: a} -> a | Undefined
	     * @param {String} p The property name
	     * @param {Object} obj The object to query
	     * @return {*} The value at `obj.p`.
	     * @see R.path
	     * @example
	     *
	     *      R.prop('x', {x: 100}); //=> 100
	     *      R.prop('x', {}); //=> undefined
	     */
	    var prop = _curry2(function prop(p, obj) {
	        return obj[p];
	    });

	    /**
	     * Returns `true` if the specified object property is of the given type;
	     * `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Type
	     * @sig Type -> String -> Object -> Boolean
	     * @param {Function} type
	     * @param {String} name
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.is, R.propSatisfies
	     * @example
	     *
	     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
	     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
	     *      R.propIs(Number, 'x', {});            //=> false
	     */
	    var propIs = _curry3(function propIs(type, name, obj) {
	        return is(type, obj[name]);
	    });

	    /**
	     * If the given, non-null object has an own property with the specified name,
	     * returns the value of that property. Otherwise returns the provided default
	     * value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category Object
	     * @sig a -> String -> Object -> a
	     * @param {*} val The default value.
	     * @param {String} p The name of the property to return.
	     * @param {Object} obj The object to query.
	     * @return {*} The value of given property of the supplied object or the default value.
	     * @example
	     *
	     *      var alice = {
	     *        name: 'ALICE',
	     *        age: 101
	     *      };
	     *      var favorite = R.prop('favoriteLibrary');
	     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
	     *
	     *      favorite(alice);  //=> undefined
	     *      favoriteWithDefault(alice);  //=> 'Ramda'
	     */
	    var propOr = _curry3(function propOr(val, p, obj) {
	        return obj != null && _has(p, obj) ? obj[p] : val;
	    });

	    /**
	     * Returns `true` if the specified object property satisfies the given
	     * predicate; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Logic
	     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
	     * @param {Function} pred
	     * @param {String} name
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.propEq, R.propIs
	     * @example
	     *
	     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
	     */
	    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {
	        return pred(obj[name]);
	    });

	    /**
	     * Acts as multiple `prop`: array of keys in, array of values out. Preserves
	     * order.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [k] -> {k: v} -> [v]
	     * @param {Array} ps The property names to fetch
	     * @param {Object} obj The object to query
	     * @return {Array} The corresponding values or partially applied function.
	     * @example
	     *
	     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
	     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
	     *
	     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
	     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
	     */
	    var props = _curry2(function props(ps, obj) {
	        var len = ps.length;
	        var out = [];
	        var idx = 0;
	        while (idx < len) {
	            out[idx] = obj[ps[idx]];
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> Number -> [Number]
	     * @param {Number} from The first number in the list.
	     * @param {Number} to One more than the last number in the list.
	     * @return {Array} The list of numbers in tthe set `[a, b)`.
	     * @example
	     *
	     *      R.range(1, 5);    //=> [1, 2, 3, 4]
	     *      R.range(50, 53);  //=> [50, 51, 52]
	     */
	    var range = _curry2(function range(from, to) {
	        if (!(_isNumber(from) && _isNumber(to))) {
	            throw new TypeError('Both arguments to range must be numbers');
	        }
	        var result = [];
	        var n = from;
	        while (n < to) {
	            result.push(n);
	            n += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns a single item by iterating through the list, successively calling
	     * the iterator function and passing it an accumulator value and the current
	     * value from the array, and then passing the result to the next call.
	     *
	     * Similar to `reduce`, except moves through the input list from the right to
	     * the left.
	     *
	     * The iterator function receives two values: *(acc, value)*
	     *
	     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
	     * arrays), unlike the native `Array.prototype.reduce` method. For more details
	     * on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a,b -> a) -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.addIndex
	     * @example
	     *
	     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];
	     *      var flattenPairs = (acc, pair) => acc.concat(pair);
	     *
	     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]
	     */
	    var reduceRight = _curry3(function reduceRight(fn, acc, list) {
	        var idx = list.length - 1;
	        while (idx >= 0) {
	            acc = fn(acc, list[idx]);
	            idx -= 1;
	        }
	        return acc;
	    });

	    /**
	     * Returns a value wrapped to indicate that it is the final value of the reduce
	     * and transduce functions. The returned value should be considered a black
	     * box: the internal structure is not guaranteed to be stable.
	     *
	     * Note: this optimization is unavailable to functions not explicitly listed
	     * above. For instance, it is not currently supported by reduceRight.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category List
	     * @sig a -> *
	     * @param {*} x The final value of the reduce.
	     * @return {*} The wrapped value.
	     * @see R.reduce, R.transduce
	     * @example
	     *
	     *      R.reduce(
	     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),
	     *        0,
	     *        [1, 2, 3, 4, 5]) // 10
	     */
	    var reduced = _curry1(_reduced);

	    /**
	     * Removes the sub-list of `list` starting at index `start` and containing
	     * `count` elements. _Note that this is not destructive_: it returns a copy of
	     * the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.2
	     * @category List
	     * @sig Number -> Number -> [a] -> [a]
	     * @param {Number} start The position to start removing elements
	     * @param {Number} count The number of elements to remove
	     * @param {Array} list The list to remove from
	     * @return {Array} A new Array with `count` elements from `start` removed.
	     * @example
	     *
	     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
	     */
	    var remove = _curry3(function remove(start, count, list) {
	        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));
	    });

	    /**
	     * Replace a substring or regex match in a string with a replacement.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category String
	     * @sig RegExp|String -> String -> String -> String
	     * @param {RegExp|String} pattern A regular expression or a substring to match.
	     * @param {String} replacement The string to replace the matches with.
	     * @param {String} str The String to do the search and replacement in.
	     * @return {String} The result.
	     * @example
	     *
	     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
	     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
	     *
	     *      // Use the "g" (global) flag to replace all occurrences:
	     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
	     */
	    var replace = _curry3(function replace(regex, replacement, str) {
	        return str.replace(regex, replacement);
	    });

	    /**
	     * Returns a new list or string with the elements or characters in reverse
	     * order.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a]
	     * @sig String -> String
	     * @param {Array|String} list
	     * @return {Array|String}
	     * @example
	     *
	     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
	     *      R.reverse([1, 2]);     //=> [2, 1]
	     *      R.reverse([1]);        //=> [1]
	     *      R.reverse([]);         //=> []
	     *
	     *      R.reverse('abc');      //=> 'cba'
	     *      R.reverse('ab');       //=> 'ba'
	     *      R.reverse('a');        //=> 'a'
	     *      R.reverse('');         //=> ''
	     */
	    var reverse = _curry1(function reverse(list) {
	        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();
	    });

	    /**
	     * Scan is similar to reduce, but returns a list of successively reduced values
	     * from the left
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (a,b -> a) -> a -> [b] -> [a]
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {Array} A list of all intermediately reduced values.
	     * @example
	     *
	     *      var numbers = [1, 2, 3, 4];
	     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
	     */
	    var scan = _curry3(function scan(fn, acc, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [acc];
	        while (idx < len) {
	            acc = fn(acc, list[idx]);
	            result[idx + 1] = acc;
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns the result of "setting" the portion of the given data structure
	     * focused by the given lens to the given value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Lens s a -> a -> s -> s
	     * @param {Lens} lens
	     * @param {*} v
	     * @param {*} x
	     * @return {*}
	     * @see R.prop, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var xLens = R.lensProp('x');
	     *
	     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
	     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
	     */
	    var set = _curry3(function set(lens, v, x) {
	        return over(lens, always(v), x);
	    });

	    /**
	     * Returns the elements of the given list or string (or object with a `slice`
	     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
	     *
	     * Dispatches to the `slice` method of the third argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.4
	     * @category List
	     * @sig Number -> Number -> [a] -> [a]
	     * @sig Number -> Number -> String -> String
	     * @param {Number} fromIndex The start index (inclusive).
	     * @param {Number} toIndex The end index (exclusive).
	     * @param {*} list
	     * @return {*}
	     * @example
	     *
	     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
	     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
	     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
	     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
	     *      R.slice(0, 3, 'ramda');                     //=> 'ram'
	     */
	    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
	        return Array.prototype.slice.call(list, fromIndex, toIndex);
	    }));

	    /**
	     * Returns a copy of the list, sorted according to the comparator function,
	     * which should accept two values at a time and return a negative number if the
	     * first value is smaller, a positive number if it's larger, and zero if they
	     * are equal. Please note that this is a **copy** of the list. It does not
	     * modify the original.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a,a -> Number) -> [a] -> [a]
	     * @param {Function} comparator A sorting function :: a -> b -> Int
	     * @param {Array} list The list to sort
	     * @return {Array} a new array with its elements sorted by the comparator function.
	     * @example
	     *
	     *      var diff = function(a, b) { return a - b; };
	     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
	     */
	    var sort = _curry2(function sort(comparator, list) {
	        return _slice(list).sort(comparator);
	    });

	    /**
	     * Sorts the list according to the supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig Ord b => (a -> b) -> [a] -> [a]
	     * @param {Function} fn
	     * @param {Array} list The list to sort.
	     * @return {Array} A new list sorted by the keys generated by `fn`.
	     * @example
	     *
	     *      var sortByFirstItem = R.sortBy(R.prop(0));
	     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
	     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
	     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
	     *      var alice = {
	     *        name: 'ALICE',
	     *        age: 101
	     *      };
	     *      var bob = {
	     *        name: 'Bob',
	     *        age: -10
	     *      };
	     *      var clara = {
	     *        name: 'clara',
	     *        age: 314.159
	     *      };
	     *      var people = [clara, bob, alice];
	     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
	     */
	    var sortBy = _curry2(function sortBy(fn, list) {
	        return _slice(list).sort(function (a, b) {
	            var aa = fn(a);
	            var bb = fn(b);
	            return aa < bb ? -1 : aa > bb ? 1 : 0;
	        });
	    });

	    /**
	     * Splits a given list or string at a given index.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig Number -> [a] -> [[a], [a]]
	     * @sig Number -> String -> [String, String]
	     * @param {Number} index The index where the array/string is split.
	     * @param {Array|String} array The array/string to be split.
	     * @return {Array}
	     * @example
	     *
	     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
	     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
	     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
	     */
	    var splitAt = _curry2(function splitAt(index, array) {
	        return [
	            slice(0, index, array),
	            slice(index, length(array), array)
	        ];
	    });

	    /**
	     * Splits a collection into slices of the specified length.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig Number -> [a] -> [[a]]
	     * @sig Number -> String -> [String]
	     * @param {Number} n
	     * @param {Array} list
	     * @return {Array}
	     * @example
	     *
	     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
	     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
	     */
	    var splitEvery = _curry2(function splitEvery(n, list) {
	        if (n <= 0) {
	            throw new Error('First argument to splitEvery must be a positive integer');
	        }
	        var result = [];
	        var idx = 0;
	        while (idx < list.length) {
	            result.push(slice(idx, idx += n, list));
	        }
	        return result;
	    });

	    /**
	     * Takes a list and a predicate and returns a pair of lists with the following properties:
	     *
	     *  - the result of concatenating the two output lists is equivalent to the input list;
	     *  - none of the elements of the first output list satisfies the predicate; and
	     *  - if the second output list is non-empty, its first element satisfies the predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [[a], [a]]
	     * @param {Function} pred The predicate that determines where the array is split.
	     * @param {Array} list The array to be split.
	     * @return {Array}
	     * @example
	     *
	     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
	     */
	    var splitWhen = _curry2(function splitWhen(pred, list) {
	        var idx = 0;
	        var len = list.length;
	        var prefix = [];
	        while (idx < len && !pred(list[idx])) {
	            prefix.push(list[idx]);
	            idx += 1;
	        }
	        return [
	            prefix,
	            _slice(list, idx)
	        ];
	    });

	    /**
	     * Subtracts its second argument from its first argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a - b`.
	     * @see R.add
	     * @example
	     *
	     *      R.subtract(10, 8); //=> 2
	     *
	     *      var minus5 = R.subtract(R.__, 5);
	     *      minus5(17); //=> 12
	     *
	     *      var complementaryAngle = R.subtract(90);
	     *      complementaryAngle(30); //=> 60
	     *      complementaryAngle(72); //=> 18
	     */
	    var subtract = _curry2(function subtract(a, b) {
	        return Number(a) - Number(b);
	    });

	    /**
	     * Returns all but the first element of the given list or string (or object
	     * with a `tail` method).
	     *
	     * Dispatches to the `slice` method of the first argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a]
	     * @sig String -> String
	     * @param {*} list
	     * @return {*}
	     * @see R.head, R.init, R.last
	     * @example
	     *
	     *      R.tail([1, 2, 3]);  //=> [2, 3]
	     *      R.tail([1, 2]);     //=> [2]
	     *      R.tail([1]);        //=> []
	     *      R.tail([]);         //=> []
	     *
	     *      R.tail('abc');  //=> 'bc'
	     *      R.tail('ab');   //=> 'b'
	     *      R.tail('a');    //=> ''
	     *      R.tail('');     //=> ''
	     */
	    var tail = _checkForMethod('tail', slice(1, Infinity));

	    /**
	     * Returns the first `n` elements of the given list, string, or
	     * transducer/transformer (or object with a `take` method).
	     *
	     * Dispatches to the `take` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n
	     * @param {*} list
	     * @return {*}
	     * @see R.drop
	     * @example
	     *
	     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
	     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.take(3, 'ramda');               //=> 'ram'
	     *
	     *      var personnel = [
	     *        'Dave Brubeck',
	     *        'Paul Desmond',
	     *        'Eugene Wright',
	     *        'Joe Morello',
	     *        'Gerry Mulligan',
	     *        'Bob Bates',
	     *        'Joe Dodge',
	     *        'Ron Crotty'
	     *      ];
	     *
	     *      var takeFive = R.take(5);
	     *      takeFive(personnel);
	     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
	     */
	    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {
	        return slice(0, n < 0 ? Infinity : n, xs);
	    }));

	    /**
	     * Returns a new list containing the last `n` elements of a given list, passing
	     * each value to the supplied predicate function, and terminating when the
	     * predicate function returns `false`. Excludes the element that caused the
	     * predicate function to fail. The predicate function is passed one argument:
	     * *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.dropLastWhile, R.addIndex
	     * @example
	     *
	     *      var isNotOne = x => x !== 1;
	     *
	     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
	     */
	    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {
	        var idx = list.length - 1;
	        while (idx >= 0 && fn(list[idx])) {
	            idx -= 1;
	        }
	        return _slice(list, idx + 1, Infinity);
	    });

	    /**
	     * Returns a new list containing the first `n` elements of a given list,
	     * passing each value to the supplied predicate function, and terminating when
	     * the predicate function returns `false`. Excludes the element that caused the
	     * predicate function to fail. The predicate function is passed one argument:
	     * *(value)*.
	     *
	     * Dispatches to the `takeWhile` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.dropWhile, R.transduce, R.addIndex
	     * @example
	     *
	     *      var isNotFour = x => x !== 4;
	     *
	     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
	     */
	    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {
	        var idx = 0;
	        var len = list.length;
	        while (idx < len && fn(list[idx])) {
	            idx += 1;
	        }
	        return _slice(list, 0, idx);
	    }));

	    /**
	     * Runs the given function with the supplied object, then returns the object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a -> *) -> a -> a
	     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
	     * @param {*} x
	     * @return {*} `x`.
	     * @example
	     *
	     *      var sayX = x => console.log('x is ' + x);
	     *      R.tap(sayX, 100); //=> 100
	     *      // logs 'x is 100'
	     */
	    var tap = _curry2(function tap(fn, x) {
	        fn(x);
	        return x;
	    });

	    /**
	     * Calls an input function `n` times, returning an array containing the results
	     * of those function calls.
	     *
	     * `fn` is passed one argument: The current value of `n`, which begins at `0`
	     * and is gradually incremented to `n - 1`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.3
	     * @category List
	     * @sig (Number -> a) -> Number -> [a]
	     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
	     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
	     * @return {Array} An array containing the return values of all calls to `fn`.
	     * @example
	     *
	     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
	     */
	    var times = _curry2(function times(fn, n) {
	        var len = Number(n);
	        var idx = 0;
	        var list;
	        if (len < 0 || isNaN(len)) {
	            throw new RangeError('n must be a non-negative number');
	        }
	        list = new Array(len);
	        while (idx < len) {
	            list[idx] = fn(idx);
	            idx += 1;
	        }
	        return list;
	    });

	    /**
	     * Converts an object into an array of key, value arrays. Only the object's
	     * own properties are used.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.0
	     * @category Object
	     * @sig {String: *} -> [[String,*]]
	     * @param {Object} obj The object to extract from
	     * @return {Array} An array of key, value arrays from the object's own properties.
	     * @see R.fromPairs
	     * @example
	     *
	     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
	     */
	    var toPairs = _curry1(function toPairs(obj) {
	        var pairs = [];
	        for (var prop in obj) {
	            if (_has(prop, obj)) {
	                pairs[pairs.length] = [
	                    prop,
	                    obj[prop]
	                ];
	            }
	        }
	        return pairs;
	    });

	    /**
	     * Converts an object into an array of key, value arrays. The object's own
	     * properties and prototype properties are used. Note that the order of the
	     * output array is not guaranteed to be consistent across different JS
	     * platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.0
	     * @category Object
	     * @sig {String: *} -> [[String,*]]
	     * @param {Object} obj The object to extract from
	     * @return {Array} An array of key, value arrays from the object's own
	     *         and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
	     */
	    var toPairsIn = _curry1(function toPairsIn(obj) {
	        var pairs = [];
	        for (var prop in obj) {
	            pairs[pairs.length] = [
	                prop,
	                obj[prop]
	            ];
	        }
	        return pairs;
	    });

	    /**
	     * Transposes the rows and columns of a 2D list.
	     * When passed a list of `n` lists of length `x`,
	     * returns a list of `x` lists of length `n`.
	     *
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig [[a]] -> [[a]]
	     * @param {Array} list A 2D list
	     * @return {Array} A 2D list
	     * @example
	     *
	     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
	     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
	     *
	     * If some of the rows are shorter than the following rows, their elements are skipped:
	     *
	     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
	     */
	    var transpose = _curry1(function transpose(outerlist) {
	        var i = 0;
	        var result = [];
	        while (i < outerlist.length) {
	            var innerlist = outerlist[i];
	            var j = 0;
	            while (j < innerlist.length) {
	                if (typeof result[j] === 'undefined') {
	                    result[j] = [];
	                }
	                result[j].push(innerlist[j]);
	                j += 1;
	            }
	            i += 1;
	        }
	        return result;
	    });

	    /**
	     * Removes (strips) whitespace from both ends of the string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to trim.
	     * @return {String} Trimmed version of `str`.
	     * @example
	     *
	     *      R.trim('   xyz  '); //=> 'xyz'
	     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
	     */
	    var trim = function () {
	        var ws = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
	        var zeroWidth = '\u200B';
	        var hasProtoTrim = typeof String.prototype.trim === 'function';
	        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {
	            return _curry1(function trim(str) {
	                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
	                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
	                return str.replace(beginRx, '').replace(endRx, '');
	            });
	        } else {
	            return _curry1(function trim(str) {
	                return str.trim();
	            });
	        }
	    }();

	    /**
	     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
	     * function evaluates the `tryer`; if it does not throw, it simply returns the
	     * result. If the `tryer` *does* throw, the returned function evaluates the
	     * `catcher` function and returns its result. Note that for effective
	     * composition with this function, both the `tryer` and `catcher` functions
	     * must return the same type of results.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Function
	     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
	     * @param {Function} tryer The function that may throw.
	     * @param {Function} catcher The function that will be evaluated if `tryer` throws.
	     * @return {Function} A new function that will catch exceptions and send then to the catcher.
	     * @example
	     *
	     *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
	     *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false
	     */
	    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {
	        return _arity(tryer.length, function () {
	            try {
	                return tryer.apply(this, arguments);
	            } catch (e) {
	                return catcher.apply(this, _concat([e], arguments));
	            }
	        });
	    });

	    /**
	     * Gives a single-word string description of the (native) type of a value,
	     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
	     * attempt to distinguish user Object types any further, reporting them all as
	     * 'Object'.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Type
	     * @sig (* -> {*}) -> String
	     * @param {*} val The value to test
	     * @return {String}
	     * @example
	     *
	     *      R.type({}); //=> "Object"
	     *      R.type(1); //=> "Number"
	     *      R.type(false); //=> "Boolean"
	     *      R.type('s'); //=> "String"
	     *      R.type(null); //=> "Null"
	     *      R.type([]); //=> "Array"
	     *      R.type(/[A-z]/); //=> "RegExp"
	     */
	    var type = _curry1(function type(val) {
	        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
	    });

	    /**
	     * Takes a function `fn`, which takes a single array argument, and returns a
	     * function which:
	     *
	     *   - takes any number of positional arguments;
	     *   - passes these arguments to `fn` as an array; and
	     *   - returns the result.
	     *
	     * In other words, R.unapply derives a variadic function from a function which
	     * takes an array. R.unapply is the inverse of R.apply.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Function
	     * @sig ([*...] -> a) -> (*... -> a)
	     * @param {Function} fn
	     * @return {Function}
	     * @see R.apply
	     * @example
	     *
	     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
	     */
	    var unapply = _curry1(function unapply(fn) {
	        return function () {
	            return fn(_slice(arguments));
	        };
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts
	     * exactly 1 parameter. Any extraneous parameters will not be passed to the
	     * supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Function
	     * @sig (* -> b) -> (a -> b)
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity 1.
	     * @example
	     *
	     *      var takesTwoArgs = function(a, b) {
	     *        return [a, b];
	     *      };
	     *      takesTwoArgs.length; //=> 2
	     *      takesTwoArgs(1, 2); //=> [1, 2]
	     *
	     *      var takesOneArg = R.unary(takesTwoArgs);
	     *      takesOneArg.length; //=> 1
	     *      // Only 1 argument is passed to the wrapped function
	     *      takesOneArg(1, 2); //=> [1, undefined]
	     */
	    var unary = _curry1(function unary(fn) {
	        return nAry(1, fn);
	    });

	    /**
	     * Returns a function of arity `n` from a (manually) curried function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Function
	     * @sig Number -> (a -> b) -> (a -> c)
	     * @param {Number} length The arity for the returned function.
	     * @param {Function} fn The function to uncurry.
	     * @return {Function} A new function.
	     * @see R.curry
	     * @example
	     *
	     *      var addFour = a => b => c => d => a + b + c + d;
	     *
	     *      var uncurriedAddFour = R.uncurryN(4, addFour);
	     *      uncurriedAddFour(1, 2, 3, 4); //=> 10
	     */
	    var uncurryN = _curry2(function uncurryN(depth, fn) {
	        return curryN(depth, function () {
	            var currentDepth = 1;
	            var value = fn;
	            var idx = 0;
	            var endIdx;
	            while (currentDepth <= depth && typeof value === 'function') {
	                endIdx = currentDepth === depth ? arguments.length : idx + value.length;
	                value = value.apply(this, _slice(arguments, idx, endIdx));
	                currentDepth += 1;
	                idx = endIdx;
	            }
	            return value;
	        });
	    });

	    /**
	     * Builds a list from a seed value. Accepts an iterator function, which returns
	     * either false to stop iteration or an array of length 2 containing the value
	     * to add to the resulting list and the seed to be used in the next call to the
	     * iterator function.
	     *
	     * The iterator function receives one argument: *(seed)*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category List
	     * @sig (a -> [b]) -> * -> [b]
	     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
	     *        either false to quit iteration or an array of length two to proceed. The element
	     *        at index 0 of this array will be added to the resulting array, and the element
	     *        at index 1 will be passed to the next call to `fn`.
	     * @param {*} seed The seed value.
	     * @return {Array} The final list.
	     * @example
	     *
	     *      var f = n => n > 50 ? false : [-n, n + 10];
	     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
	     */
	    var unfold = _curry2(function unfold(fn, seed) {
	        var pair = fn(seed);
	        var result = [];
	        while (pair && pair.length) {
	            result[result.length] = pair[0];
	            pair = fn(pair[1]);
	        }
	        return result;
	    });

	    /**
	     * Returns a new list containing only one copy of each element in the original
	     * list, based upon the value returned by applying the supplied predicate to
	     * two list elements. Prefers the first item if two items compare equal based
	     * on the predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category List
	     * @sig (a, a -> Boolean) -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      var strEq = R.eqBy(String);
	     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
	     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
	     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
	     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
	     */
	    var uniqWith = _curry2(function uniqWith(pred, list) {
	        var idx = 0;
	        var len = list.length;
	        var result = [];
	        var item;
	        while (idx < len) {
	            item = list[idx];
	            if (!_containsWith(pred, item, result)) {
	                result[result.length] = item;
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Tests the final argument by passing it to the given predicate function. If
	     * the predicate is not satisfied, the function will return the result of
	     * calling the `whenFalseFn` function with the same argument. If the predicate
	     * is satisfied, the argument is returned as is.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Logic
	     * @sig (a -> Boolean) -> (a -> a) -> a -> a
	     * @param {Function} pred        A predicate function
	     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
	     *                               to a falsy value.
	     * @param {*}        x           An object to test with the `pred` function and
	     *                               pass to `whenFalseFn` if necessary.
	     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
	     * @see R.ifElse, R.when
	     * @example
	     *
	     *      // coerceArray :: (a|[a]) -> [a]
	     *      var coerceArray = R.unless(R.isArrayLike, R.of);
	     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]
	     *      coerceArray(1);         //=> [1]
	     */
	    var unless = _curry3(function unless(pred, whenFalseFn, x) {
	        return pred(x) ? x : whenFalseFn(x);
	    });

	    /**
	     * Takes a predicate, a transformation function, and an initial value,
	     * and returns a value of the same type as the initial value.
	     * It does so by applying the transformation until the predicate is satisfied,
	     * at which point it returns the satisfactory value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Logic
	     * @sig (a -> Boolean) -> (a -> a) -> a -> a
	     * @param {Function} pred A predicate function
	     * @param {Function} fn The iterator function
	     * @param {*} init Initial value
	     * @return {*} Final value that satisfies predicate
	     * @example
	     *
	     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
	     */
	    var until = _curry3(function until(pred, fn, init) {
	        var val = init;
	        while (!pred(val)) {
	            val = fn(val);
	        }
	        return val;
	    });

	    /**
	     * Returns a new copy of the array with the element at the provided index
	     * replaced with the given value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig Number -> a -> [a] -> [a]
	     * @param {Number} idx The index to update.
	     * @param {*} x The value to exist at the given index of the returned array.
	     * @param {Array|Arguments} list The source array-like object to be updated.
	     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
	     * @see R.adjust
	     * @example
	     *
	     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]
	     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]
	     */
	    var update = _curry3(function update(idx, x, list) {
	        return adjust(always(x), idx, list);
	    });

	    /**
	     * Accepts a function `fn` and a list of transformer functions and returns a
	     * new curried function. When the new function is invoked, it calls the
	     * function `fn` with parameters consisting of the result of calling each
	     * supplied handler on successive arguments to the new function.
	     *
	     * If more arguments are passed to the returned function than transformer
	     * functions, those arguments are passed directly to `fn` as additional
	     * parameters. If you expect additional arguments that don't need to be
	     * transformed, although you can ignore them, it's best to pass an identity
	     * function so that the new function reports the correct arity.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
	     * @param {Function} fn The function to wrap.
	     * @param {Array} transformers A list of transformer functions
	     * @return {Function} The wrapped function.
	     * @example
	     *
	     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
	     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
	     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
	     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
	     */
	    var useWith = _curry2(function useWith(fn, transformers) {
	        return curryN(transformers.length, function () {
	            var args = [];
	            var idx = 0;
	            while (idx < transformers.length) {
	                args.push(transformers[idx].call(this, arguments[idx]));
	                idx += 1;
	            }
	            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));
	        });
	    });

	    /**
	     * Returns a list of all the enumerable own properties of the supplied object.
	     * Note that the order of the output array is not guaranteed across different
	     * JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {k: v} -> [v]
	     * @param {Object} obj The object to extract values from
	     * @return {Array} An array of the values of the object's own properties.
	     * @example
	     *
	     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
	     */
	    var values = _curry1(function values(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var vals = [];
	        var idx = 0;
	        while (idx < len) {
	            vals[idx] = obj[props[idx]];
	            idx += 1;
	        }
	        return vals;
	    });

	    /**
	     * Returns a list of all the properties, including prototype properties, of the
	     * supplied object.
	     * Note that the order of the output array is not guaranteed to be consistent
	     * across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Object
	     * @sig {k: v} -> [v]
	     * @param {Object} obj The object to extract values from
	     * @return {Array} An array of the values of the object's own and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.valuesIn(f); //=> ['X', 'Y']
	     */
	    var valuesIn = _curry1(function valuesIn(obj) {
	        var prop;
	        var vs = [];
	        for (prop in obj) {
	            vs[vs.length] = obj[prop];
	        }
	        return vs;
	    });

	    /**
	     * Returns a "view" of the given data structure, determined by the given lens.
	     * The lens's focus determines which portion of the data structure is visible.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Lens s a -> s -> a
	     * @param {Lens} lens
	     * @param {*} x
	     * @return {*}
	     * @see R.prop, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var xLens = R.lensProp('x');
	     *
	     *      R.view(xLens, {x: 1, y: 2});  //=> 1
	     *      R.view(xLens, {x: 4, y: 2});  //=> 4
	     */
	    // `Const` is a functor that effectively ignores the function given to `map`.
	    // Using `Const` effectively ignores the setter function of the `lens`,
	    // leaving the value returned by the getter function unmodified.
	    var view = function () {
	        // `Const` is a functor that effectively ignores the function given to `map`.
	        var Const = function (x) {
	            return {
	                value: x,
	                map: function () {
	                    return this;
	                }
	            };
	        };
	        return _curry2(function view(lens, x) {
	            // Using `Const` effectively ignores the setter function of the `lens`,
	            // leaving the value returned by the getter function unmodified.
	            return lens(Const)(x).value;
	        });
	    }();

	    /**
	     * Tests the final argument by passing it to the given predicate function. If
	     * the predicate is satisfied, the function will return the result of calling
	     * the `whenTrueFn` function with the same argument. If the predicate is not
	     * satisfied, the argument is returned as is.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Logic
	     * @sig (a -> Boolean) -> (a -> a) -> a -> a
	     * @param {Function} pred       A predicate function
	     * @param {Function} whenTrueFn A function to invoke when the `condition`
	     *                              evaluates to a truthy value.
	     * @param {*}        x          An object to test with the `pred` function and
	     *                              pass to `whenTrueFn` if necessary.
	     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
	     * @see R.ifElse, R.unless
	     * @example
	     *
	     *      // truncate :: String -> String
	     *      var truncate = R.when(
	     *        R.propSatisfies(R.gt(R.__, 10), 'length'),
	     *        R.pipe(R.take(10), R.append('…'), R.join(''))
	     *      );
	     *      truncate('12345');         //=> '12345'
	     *      truncate('0123456789ABC'); //=> '0123456789…'
	     */
	    var when = _curry3(function when(pred, whenTrueFn, x) {
	        return pred(x) ? whenTrueFn(x) : x;
	    });

	    /**
	     * Takes a spec object and a test object; returns true if the test satisfies
	     * the spec. Each of the spec's own properties must be a predicate function.
	     * Each predicate is applied to the value of the corresponding property of the
	     * test object. `where` returns true if all the predicates return true, false
	     * otherwise.
	     *
	     * `where` is well suited to declaratively expressing constraints for other
	     * functions such as `filter` and `find`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category Object
	     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
	     * @param {Object} spec
	     * @param {Object} testObj
	     * @return {Boolean}
	     * @example
	     *
	     *      // pred :: Object -> Boolean
	     *      var pred = where({
	     *        a: equals('foo'),
	     *        b: complement(equals('bar')),
	     *        x: gt(__, 10),
	     *        y: lt(__, 20)
	     *      });
	     *
	     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
	     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
	     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
	     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
	     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
	     */
	    var where = _curry2(function where(spec, testObj) {
	        for (var prop in spec) {
	            if (_has(prop, spec) && !spec[prop](testObj[prop])) {
	                return false;
	            }
	        }
	        return true;
	    });

	    /**
	     * Wrap a function inside another to allow you to make adjustments to the
	     * parameters, or do other processing either before the internal function is
	     * called or with its results.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)
	     * @param {Function} fn The function to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @return {Function} The wrapped function.
	     * @deprecated since v0.22.0
	     * @example
	     *
	     *      var greet = name => 'Hello ' + name;
	     *
	     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());
	     *
	     *      shoutedGreet("Kathy"); //=> "HELLO KATHY"
	     *
	     *      var shortenedGreet = R.wrap(greet, function(gr, name) {
	     *        return gr(name.substring(0, 3));
	     *      });
	     *      shortenedGreet("Robert"); //=> "Hello Rob"
	     */
	    var wrap = _curry2(function wrap(fn, wrapper) {
	        return curryN(fn.length, function () {
	            return wrapper.apply(this, _concat([fn], arguments));
	        });
	    });

	    /**
	     * Creates a new list out of the two supplied by creating each possible pair
	     * from the lists.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [b] -> [[a,b]]
	     * @param {Array} as The first list.
	     * @param {Array} bs The second list.
	     * @return {Array} The list made by combining each possible pair from
	     *         `as` and `bs` into pairs (`[a, b]`).
	     * @example
	     *
	     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
	     */
	    // = xprodWith(prepend); (takes about 3 times as long...)
	    var xprod = _curry2(function xprod(a, b) {
	        // = xprodWith(prepend); (takes about 3 times as long...)
	        var idx = 0;
	        var ilen = a.length;
	        var j;
	        var jlen = b.length;
	        var result = [];
	        while (idx < ilen) {
	            j = 0;
	            while (j < jlen) {
	                result[result.length] = [
	                    a[idx],
	                    b[j]
	                ];
	                j += 1;
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Creates a new list out of the two supplied by pairing up equally-positioned
	     * items from both lists. The returned list is truncated to the length of the
	     * shorter of the two input lists.
	     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [b] -> [[a,b]]
	     * @param {Array} list1 The first array to consider.
	     * @param {Array} list2 The second array to consider.
	     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
	     * @example
	     *
	     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
	     */
	    var zip = _curry2(function zip(a, b) {
	        var rv = [];
	        var idx = 0;
	        var len = Math.min(a.length, b.length);
	        while (idx < len) {
	            rv[idx] = [
	                a[idx],
	                b[idx]
	            ];
	            idx += 1;
	        }
	        return rv;
	    });

	    /**
	     * Creates a new object out of a list of keys and a list of values.
	     * Key/value pairing is truncated to the length of the shorter of the two lists.
	     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig [String] -> [*] -> {String: *}
	     * @param {Array} keys The array that will be properties on the output object.
	     * @param {Array} values The list of values on the output object.
	     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
	     * @example
	     *
	     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
	     */
	    var zipObj = _curry2(function zipObj(keys, values) {
	        var idx = 0;
	        var len = Math.min(keys.length, values.length);
	        var out = {};
	        while (idx < len) {
	            out[keys[idx]] = values[idx];
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Creates a new list out of the two supplied by applying the function to each
	     * equally-positioned pair in the lists. The returned list is truncated to the
	     * length of the shorter of the two input lists.
	     *
	     * @function
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a,b -> c) -> [a] -> [b] -> [c]
	     * @param {Function} fn The function used to combine the two elements into one value.
	     * @param {Array} list1 The first array to consider.
	     * @param {Array} list2 The second array to consider.
	     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
	     *         using `fn`.
	     * @example
	     *
	     *      var f = (x, y) => {
	     *        // ...
	     *      };
	     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
	     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
	     */
	    var zipWith = _curry3(function zipWith(fn, a, b) {
	        var rv = [];
	        var idx = 0;
	        var len = Math.min(a.length, b.length);
	        while (idx < len) {
	            rv[idx] = fn(a[idx], b[idx]);
	            idx += 1;
	        }
	        return rv;
	    });

	    /**
	     * A function that always returns `false`. Any passed in parameters are ignored.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig * -> Boolean
	     * @param {*}
	     * @return {Boolean}
	     * @see R.always, R.T
	     * @example
	     *
	     *      R.F(); //=> false
	     */
	    var F = always(false);

	    /**
	     * A function that always returns `true`. Any passed in parameters are ignored.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig * -> Boolean
	     * @param {*}
	     * @return {Boolean}
	     * @see R.always, R.F
	     * @example
	     *
	     *      R.T(); //=> true
	     */
	    var T = always(true);

	    /**
	     * Copies an object.
	     *
	     * @private
	     * @param {*} value The value to be copied
	     * @param {Array} refFrom Array containing the source references
	     * @param {Array} refTo Array containing the copied source references
	     * @param {Boolean} deep Whether or not to perform deep cloning.
	     * @return {*} The copied value.
	     */
	    var _clone = function _clone(value, refFrom, refTo, deep) {
	        var copy = function copy(copiedValue) {
	            var len = refFrom.length;
	            var idx = 0;
	            while (idx < len) {
	                if (value === refFrom[idx]) {
	                    return refTo[idx];
	                }
	                idx += 1;
	            }
	            refFrom[idx + 1] = value;
	            refTo[idx + 1] = copiedValue;
	            for (var key in value) {
	                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
	            }
	            return copiedValue;
	        };
	        switch (type(value)) {
	        case 'Object':
	            return copy({});
	        case 'Array':
	            return copy([]);
	        case 'Date':
	            return new Date(value.valueOf());
	        case 'RegExp':
	            return _cloneRegExp(value);
	        default:
	            return value;
	        }
	    };

	    var _createPartialApplicator = function _createPartialApplicator(concat) {
	        return _curry2(function (fn, args) {
	            return _arity(Math.max(0, fn.length - args.length), function () {
	                return fn.apply(this, concat(args, arguments));
	            });
	        });
	    };

	    var _dropLast = function dropLast(n, xs) {
	        return take(n < xs.length ? xs.length - n : 0, xs);
	    };

	    // Values of other types are only equal if identical.
	    var _equals = function _equals(a, b, stackA, stackB) {
	        if (identical(a, b)) {
	            return true;
	        }
	        if (type(a) !== type(b)) {
	            return false;
	        }
	        if (a == null || b == null) {
	            return false;
	        }
	        if (typeof a.equals === 'function' || typeof b.equals === 'function') {
	            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
	        }
	        switch (type(a)) {
	        case 'Arguments':
	        case 'Array':
	        case 'Object':
	            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
	                return a === b;
	            }
	            break;
	        case 'Boolean':
	        case 'Number':
	        case 'String':
	            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {
	                return false;
	            }
	            break;
	        case 'Date':
	            if (!identical(a.valueOf(), b.valueOf())) {
	                return false;
	            }
	            break;
	        case 'Error':
	            return a.name === b.name && a.message === b.message;
	        case 'RegExp':
	            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
	                return false;
	            }
	            break;
	        case 'Map':
	        case 'Set':
	            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {
	                return false;
	            }
	            break;
	        case 'Int8Array':
	        case 'Uint8Array':
	        case 'Uint8ClampedArray':
	        case 'Int16Array':
	        case 'Uint16Array':
	        case 'Int32Array':
	        case 'Uint32Array':
	        case 'Float32Array':
	        case 'Float64Array':
	            break;
	        case 'ArrayBuffer':
	            break;
	        default:
	            // Values of other types are only equal if identical.
	            return false;
	        }
	        var keysA = keys(a);
	        if (keysA.length !== keys(b).length) {
	            return false;
	        }
	        var idx = stackA.length - 1;
	        while (idx >= 0) {
	            if (stackA[idx] === a) {
	                return stackB[idx] === b;
	            }
	            idx -= 1;
	        }
	        stackA.push(a);
	        stackB.push(b);
	        idx = keysA.length - 1;
	        while (idx >= 0) {
	            var key = keysA[idx];
	            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {
	                return false;
	            }
	            idx -= 1;
	        }
	        stackA.pop();
	        stackB.pop();
	        return true;
	    };

	    /**
	     * `_makeFlat` is a helper function that returns a one-level or fully recursive
	     * function based on the flag passed in.
	     *
	     * @private
	     */
	    var _makeFlat = function _makeFlat(recursive) {
	        return function flatt(list) {
	            var value, jlen, j;
	            var result = [];
	            var idx = 0;
	            var ilen = list.length;
	            while (idx < ilen) {
	                if (isArrayLike(list[idx])) {
	                    value = recursive ? flatt(list[idx]) : list[idx];
	                    j = 0;
	                    jlen = value.length;
	                    while (j < jlen) {
	                        result[result.length] = value[j];
	                        j += 1;
	                    }
	                } else {
	                    result[result.length] = list[idx];
	                }
	                idx += 1;
	            }
	            return result;
	        };
	    };

	    var _reduce = function () {
	        function _arrayReduce(xf, acc, list) {
	            var idx = 0;
	            var len = list.length;
	            while (idx < len) {
	                acc = xf['@@transducer/step'](acc, list[idx]);
	                if (acc && acc['@@transducer/reduced']) {
	                    acc = acc['@@transducer/value'];
	                    break;
	                }
	                idx += 1;
	            }
	            return xf['@@transducer/result'](acc);
	        }
	        function _iterableReduce(xf, acc, iter) {
	            var step = iter.next();
	            while (!step.done) {
	                acc = xf['@@transducer/step'](acc, step.value);
	                if (acc && acc['@@transducer/reduced']) {
	                    acc = acc['@@transducer/value'];
	                    break;
	                }
	                step = iter.next();
	            }
	            return xf['@@transducer/result'](acc);
	        }
	        function _methodReduce(xf, acc, obj) {
	            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));
	        }
	        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';
	        return function _reduce(fn, acc, list) {
	            if (typeof fn === 'function') {
	                fn = _xwrap(fn);
	            }
	            if (isArrayLike(list)) {
	                return _arrayReduce(fn, acc, list);
	            }
	            if (typeof list.reduce === 'function') {
	                return _methodReduce(fn, acc, list);
	            }
	            if (list[symIterator] != null) {
	                return _iterableReduce(fn, acc, list[symIterator]());
	            }
	            if (typeof list.next === 'function') {
	                return _iterableReduce(fn, acc, list);
	            }
	            throw new TypeError('reduce: list must be array or iterable');
	        };
	    }();

	    var _stepCat = function () {
	        var _stepCatArray = {
	            '@@transducer/init': Array,
	            '@@transducer/step': function (xs, x) {
	                xs.push(x);
	                return xs;
	            },
	            '@@transducer/result': _identity
	        };
	        var _stepCatString = {
	            '@@transducer/init': String,
	            '@@transducer/step': function (a, b) {
	                return a + b;
	            },
	            '@@transducer/result': _identity
	        };
	        var _stepCatObject = {
	            '@@transducer/init': Object,
	            '@@transducer/step': function (result, input) {
	                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);
	            },
	            '@@transducer/result': _identity
	        };
	        return function _stepCat(obj) {
	            if (_isTransformer(obj)) {
	                return obj;
	            }
	            if (isArrayLike(obj)) {
	                return _stepCatArray;
	            }
	            if (typeof obj === 'string') {
	                return _stepCatString;
	            }
	            if (typeof obj === 'object') {
	                return _stepCatObject;
	            }
	            throw new Error('Cannot create transformer for ' + obj);
	        };
	    }();

	    var _xdropLastWhile = function () {
	        function XDropLastWhile(fn, xf) {
	            this.f = fn;
	            this.retained = [];
	            this.xf = xf;
	        }
	        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;
	        XDropLastWhile.prototype['@@transducer/result'] = function (result) {
	            this.retained = null;
	            return this.xf['@@transducer/result'](result);
	        };
	        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
	            return this.f(input) ? this.retain(result, input) : this.flush(result, input);
	        };
	        XDropLastWhile.prototype.flush = function (result, input) {
	            result = _reduce(this.xf['@@transducer/step'], result, this.retained);
	            this.retained = [];
	            return this.xf['@@transducer/step'](result, input);
	        };
	        XDropLastWhile.prototype.retain = function (result, input) {
	            this.retained.push(input);
	            return result;
	        };
	        return _curry2(function _xdropLastWhile(fn, xf) {
	            return new XDropLastWhile(fn, xf);
	        });
	    }();

	    /**
	     * Creates a new list iteration function from an existing one by adding two new
	     * parameters to its callback function: the current index, and the entire list.
	     *
	     * This would turn, for instance, Ramda's simple `map` function into one that
	     * more closely resembles `Array.prototype.map`. Note that this will only work
	     * for functions in which the iteration callback function is the first
	     * parameter, and where the list is the last parameter. (This latter might be
	     * unimportant if the list parameter is not used.)
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category Function
	     * @category List
	     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
	     * @param {Function} fn A list iteration function that does not pass index or list to its callback
	     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
	     * @example
	     *
	     *      var mapIndexed = R.addIndex(R.map);
	     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
	     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
	     */
	    var addIndex = _curry1(function addIndex(fn) {
	        return curryN(fn.length, function () {
	            var idx = 0;
	            var origFn = arguments[0];
	            var list = arguments[arguments.length - 1];
	            var args = _slice(arguments);
	            args[0] = function () {
	                var result = origFn.apply(this, _concat(arguments, [
	                    idx,
	                    list
	                ]));
	                idx += 1;
	                return result;
	            };
	            return fn.apply(this, args);
	        });
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts
	     * exactly 2 parameters. Any extraneous parameters will not be passed to the
	     * supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.2.0
	     * @category Function
	     * @sig (* -> c) -> (a, b -> c)
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity 2.
	     * @example
	     *
	     *      var takesThreeArgs = function(a, b, c) {
	     *        return [a, b, c];
	     *      };
	     *      takesThreeArgs.length; //=> 3
	     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
	     *
	     *      var takesTwoArgs = R.binary(takesThreeArgs);
	     *      takesTwoArgs.length; //=> 2
	     *      // Only 2 arguments are passed to the wrapped function
	     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
	     */
	    var binary = _curry1(function binary(fn) {
	        return nAry(2, fn);
	    });

	    /**
	     * Creates a deep copy of the value which may contain (nested) `Array`s and
	     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not
	     * copied, but assigned by their reference.
	     *
	     * Dispatches to a `clone` method if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig {*} -> {*}
	     * @param {*} value The object or array to clone
	     * @return {*} A new object or array.
	     * @example
	     *
	     *      var objects = [{}, {}, {}];
	     *      var objectsClone = R.clone(objects);
	     *      objects[0] === objectsClone[0]; //=> false
	     */
	    var clone = _curry1(function clone(value) {
	        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);
	    });

	    /**
	     * Returns a curried equivalent of the provided function. The curried function
	     * has two unusual capabilities. First, its arguments needn't be provided one
	     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
	     * following are equivalent:
	     *
	     *   - `g(1)(2)(3)`
	     *   - `g(1)(2, 3)`
	     *   - `g(1, 2)(3)`
	     *   - `g(1, 2, 3)`
	     *
	     * Secondly, the special placeholder value `R.__` may be used to specify
	     * "gaps", allowing partial application of any combination of arguments,
	     * regardless of their positions. If `g` is as above and `_` is `R.__`, the
	     * following are equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (* -> a) -> (* -> a)
	     * @param {Function} fn The function to curry.
	     * @return {Function} A new, curried function.
	     * @see R.curryN
	     * @example
	     *
	     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
	     *
	     *      var curriedAddFourNumbers = R.curry(addFourNumbers);
	     *      var f = curriedAddFourNumbers(1, 2);
	     *      var g = f(3);
	     *      g(4); //=> 10
	     */
	    var curry = _curry1(function curry(fn) {
	        return curryN(fn.length, fn);
	    });

	    /**
	     * Returns all but the first `n` elements of the given list, string, or
	     * transducer/transformer (or object with a `drop` method).
	     *
	     * Dispatches to the `drop` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n
	     * @param {*} list
	     * @return {*}
	     * @see R.take, R.transduce
	     * @example
	     *
	     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
	     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
	     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
	     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
	     *      R.drop(3, 'ramda');               //=> 'da'
	     */
	    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {
	        return slice(Math.max(0, n), Infinity, xs);
	    }));

	    /**
	     * Returns a list containing all but the last `n` elements of the given `list`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n The number of elements of `xs` to skip.
	     * @param {Array} xs The collection to consider.
	     * @return {Array}
	     * @see R.takeLast
	     * @example
	     *
	     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
	     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
	     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
	     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
	     *      R.dropLast(3, 'ramda');               //=> 'ra'
	     */
	    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));

	    /**
	     * Returns a new list excluding all the tailing elements of a given list which
	     * satisfy the supplied predicate function. It passes each value from the right
	     * to the supplied predicate function, skipping elements while the predicate
	     * function returns `true`. The predicate function is applied to one argument:
	     * *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @see R.takeLastWhile, R.addIndex
	     * @example
	     *
	     *      var lteThree = x => x <= 3;
	     *
	     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
	     */
	    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));

	    /**
	     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
	     * cyclical data structures.
	     *
	     * Dispatches symmetrically to the `equals` methods of both arguments, if
	     * present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.15.0
	     * @category Relation
	     * @sig a -> b -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @example
	     *
	     *      R.equals(1, 1); //=> true
	     *      R.equals(1, '1'); //=> false
	     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
	     *
	     *      var a = {}; a.v = a;
	     *      var b = {}; b.v = b;
	     *      R.equals(a, b); //=> true
	     */
	    var equals = _curry2(function equals(a, b) {
	        return _equals(a, b, [], []);
	    });

	    /**
	     * Takes a predicate and a "filterable", and returns a new filterable of the
	     * same type containing the members of the given filterable which satisfy the
	     * given predicate.
	     *
	     * Dispatches to the `filter` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Filterable f => (a -> Boolean) -> f a -> f a
	     * @param {Function} pred
	     * @param {Array} filterable
	     * @return {Array}
	     * @see R.reject, R.transduce, R.addIndex
	     * @example
	     *
	     *      var isEven = n => n % 2 === 0;
	     *
	     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
	     *
	     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	     */
	    // else
	    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {
	        return _isObject(filterable) ? _reduce(function (acc, key) {
	            if (pred(filterable[key])) {
	                acc[key] = filterable[key];
	            }
	            return acc;
	        }, {}, keys(filterable)) : // else
	        _filter(pred, filterable);
	    }));

	    /**
	     * Returns a new list by pulling every item out of it (and all its sub-arrays)
	     * and putting them in a new array, depth-first.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [b]
	     * @param {Array} list The array to consider.
	     * @return {Array} The flattened list.
	     * @see R.unnest
	     * @example
	     *
	     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
	     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
	     */
	    var flatten = _curry1(_makeFlat(true));

	    /**
	     * Returns a new function much like the supplied one, except that the first two
	     * arguments' order is reversed.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
	     * @param {Function} fn The function to invoke with its first two parameters reversed.
	     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
	     * @example
	     *
	     *      var mergeThree = (a, b, c) => [].concat(a, b, c);
	     *
	     *      mergeThree(1, 2, 3); //=> [1, 2, 3]
	     *
	     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
	     */
	    var flip = _curry1(function flip(fn) {
	        return curry(function (a, b) {
	            var args = _slice(arguments);
	            args[0] = b;
	            args[1] = a;
	            return fn.apply(this, args);
	        });
	    });

	    /**
	     * Returns the first element of the given list or string. In some libraries
	     * this function is named `first`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> a | Undefined
	     * @sig String -> String
	     * @param {Array|String} list
	     * @return {*}
	     * @see R.tail, R.init, R.last
	     * @example
	     *
	     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
	     *      R.head([]); //=> undefined
	     *
	     *      R.head('abc'); //=> 'a'
	     *      R.head(''); //=> ''
	     */
	    var head = nth(0);

	    /**
	     * Returns all but the last element of the given list or string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category List
	     * @sig [a] -> [a]
	     * @sig String -> String
	     * @param {*} list
	     * @return {*}
	     * @see R.last, R.head, R.tail
	     * @example
	     *
	     *      R.init([1, 2, 3]);  //=> [1, 2]
	     *      R.init([1, 2]);     //=> [1]
	     *      R.init([1]);        //=> []
	     *      R.init([]);         //=> []
	     *
	     *      R.init('abc');  //=> 'ab'
	     *      R.init('ab');   //=> 'a'
	     *      R.init('a');    //=> ''
	     *      R.init('');     //=> ''
	     */
	    var init = slice(0, -1);

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of those
	     * elements common to both lists. Duplication is determined according to the
	     * value returned by applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
	     * @param {Function} pred A predicate function that determines whether
	     *        the two supplied elements are equal.
	     * @param {Array} list1 One list of items to compare
	     * @param {Array} list2 A second list of items to compare
	     * @return {Array} A new list containing those elements common to both lists.
	     * @see R.intersection
	     * @example
	     *
	     *      var buffaloSpringfield = [
	     *        {id: 824, name: 'Richie Furay'},
	     *        {id: 956, name: 'Dewey Martin'},
	     *        {id: 313, name: 'Bruce Palmer'},
	     *        {id: 456, name: 'Stephen Stills'},
	     *        {id: 177, name: 'Neil Young'}
	     *      ];
	     *      var csny = [
	     *        {id: 204, name: 'David Crosby'},
	     *        {id: 456, name: 'Stephen Stills'},
	     *        {id: 539, name: 'Graham Nash'},
	     *        {id: 177, name: 'Neil Young'}
	     *      ];
	     *
	     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);
	     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
	     */
	    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {
	        var lookupList, filteredList;
	        if (list1.length > list2.length) {
	            lookupList = list1;
	            filteredList = list2;
	        } else {
	            lookupList = list2;
	            filteredList = list1;
	        }
	        var results = [];
	        var idx = 0;
	        while (idx < filteredList.length) {
	            if (_containsWith(pred, filteredList[idx], lookupList)) {
	                results[results.length] = filteredList[idx];
	            }
	            idx += 1;
	        }
	        return uniqWith(pred, results);
	    });

	    /**
	     * Transforms the items of the list with the transducer and appends the
	     * transformed items to the accumulator using an appropriate iterator function
	     * based on the accumulator type.
	     *
	     * The accumulator can be an array, string, object or a transformer. Iterated
	     * items will be appended to arrays and concatenated to strings. Objects will
	     * be merged directly or 2-item arrays will be merged as key, value pairs.
	     *
	     * The accumulator can also be a transformer object that provides a 2-arity
	     * reducing iterator function, step, 0-arity initial value function, init, and
	     * 1-arity result extraction function result. The step function is used as the
	     * iterator function in reduce. The result function is used to convert the
	     * final accumulator into the return type and in most cases is R.identity. The
	     * init function is used to provide the initial accumulator.
	     *
	     * The iteration is performed with R.reduce after initializing the transducer.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig a -> (b -> b) -> [c] -> a
	     * @param {*} acc The initial accumulator value.
	     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var numbers = [1, 2, 3, 4];
	     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
	     *
	     *      R.into([], transducer, numbers); //=> [2, 3]
	     *
	     *      var intoArray = R.into([]);
	     *      intoArray(transducer, numbers); //=> [2, 3]
	     */
	    var into = _curry3(function into(acc, xf, list) {
	        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
	    });

	    /**
	     * Same as R.invertObj, however this accounts for objects with duplicate values
	     * by putting the values into an array.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig {s: x} -> {x: [ s, ... ]}
	     * @param {Object} obj The object or array to invert
	     * @return {Object} out A new object with keys
	     * in an array.
	     * @example
	     *
	     *      var raceResultsByFirstName = {
	     *        first: 'alice',
	     *        second: 'jake',
	     *        third: 'alice',
	     *      };
	     *      R.invert(raceResultsByFirstName);
	     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
	     */
	    var invert = _curry1(function invert(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var idx = 0;
	        var out = {};
	        while (idx < len) {
	            var key = props[idx];
	            var val = obj[key];
	            var list = _has(val, out) ? out[val] : out[val] = [];
	            list[list.length] = key;
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a new object with the keys of the given object as values, and the
	     * values of the given object, which are coerced to strings, as keys. Note
	     * that the last key found is preferred when handling the same value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig {s: x} -> {x: s}
	     * @param {Object} obj The object or array to invert
	     * @return {Object} out A new object
	     * @example
	     *
	     *      var raceResults = {
	     *        first: 'alice',
	     *        second: 'jake'
	     *      };
	     *      R.invertObj(raceResults);
	     *      //=> { 'alice': 'first', 'jake':'second' }
	     *
	     *      // Alternatively:
	     *      var raceResults = ['alice', 'jake'];
	     *      R.invertObj(raceResults);
	     *      //=> { 'alice': '0', 'jake':'1' }
	     */
	    var invertObj = _curry1(function invertObj(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var idx = 0;
	        var out = {};
	        while (idx < len) {
	            var key = props[idx];
	            out[obj[key]] = key;
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns `true` if the given value is its type's empty value; `false`
	     * otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Logic
	     * @sig a -> Boolean
	     * @param {*} x
	     * @return {Boolean}
	     * @see R.empty
	     * @example
	     *
	     *      R.isEmpty([1, 2, 3]);   //=> false
	     *      R.isEmpty([]);          //=> true
	     *      R.isEmpty('');          //=> true
	     *      R.isEmpty(null);        //=> false
	     *      R.isEmpty({});          //=> true
	     *      R.isEmpty({length: 0}); //=> false
	     */
	    var isEmpty = _curry1(function isEmpty(x) {
	        return x != null && equals(x, empty(x));
	    });

	    /**
	     * Returns the last element of the given list or string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.4
	     * @category List
	     * @sig [a] -> a | Undefined
	     * @sig String -> String
	     * @param {*} list
	     * @return {*}
	     * @see R.init, R.head, R.tail
	     * @example
	     *
	     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
	     *      R.last([]); //=> undefined
	     *
	     *      R.last('abc'); //=> 'c'
	     *      R.last(''); //=> ''
	     */
	    var last = nth(-1);

	    /**
	     * Returns the position of the last occurrence of an item in an array, or -1 if
	     * the item is not included in the array. `R.equals` is used to determine
	     * equality.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> Number
	     * @param {*} target The item to find.
	     * @param {Array} xs The array to search in.
	     * @return {Number} the index of the target, or -1 if the target is not found.
	     * @see R.indexOf
	     * @example
	     *
	     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
	     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
	     */
	    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {
	        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {
	            return xs.lastIndexOf(target);
	        } else {
	            var idx = xs.length - 1;
	            while (idx >= 0) {
	                if (equals(xs[idx], target)) {
	                    return idx;
	                }
	                idx -= 1;
	            }
	            return -1;
	        }
	    });

	    /**
	     * Takes a function and
	     * a [functor](https://github.com/fantasyland/fantasy-land#functor),
	     * applies the function to each of the functor's values, and returns
	     * a functor of the same shape.
	     *
	     * Ramda provides suitable `map` implementations for `Array` and `Object`,
	     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
	     *
	     * Dispatches to the `map` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * Also treats functions as functors and will compose them together.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Functor f => (a -> b) -> f a -> f b
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {Array} list The list to be iterated over.
	     * @return {Array} The new list.
	     * @see R.transduce, R.addIndex
	     * @example
	     *
	     *      var double = x => x * 2;
	     *
	     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
	     *
	     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
	     */
	    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {
	        switch (Object.prototype.toString.call(functor)) {
	        case '[object Function]':
	            return curryN(functor.length, function () {
	                return fn.call(this, functor.apply(this, arguments));
	            });
	        case '[object Object]':
	            return _reduce(function (acc, key) {
	                acc[key] = fn(functor[key]);
	                return acc;
	            }, {}, keys(functor));
	        default:
	            return _map(fn, functor);
	        }
	    }));

	    /**
	     * An Object-specific version of `map`. The function is applied to three
	     * arguments: *(value, key, obj)*. If only the value is significant, use
	     * `map` instead.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Object
	     * @sig ((*, String, Object) -> *) -> Object -> Object
	     * @param {Function} fn
	     * @param {Object} obj
	     * @return {Object}
	     * @see R.map
	     * @example
	     *
	     *      var values = { x: 1, y: 2, z: 3 };
	     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);
	     *
	     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
	     */
	    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {
	        return _reduce(function (acc, key) {
	            acc[key] = fn(obj[key], key, obj);
	            return acc;
	        }, {}, keys(obj));
	    });

	    /**
	     * Creates a new object with the own properties of the two provided objects. If
	     * a key exists in both objects, the provided function is applied to the values
	     * associated with the key in each object, with the result being used as the
	     * value associated with the key in the returned object. The key will be
	     * excluded from the returned object if the resulting value is `undefined`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Object
	     * @sig (a -> a -> a) -> {a} -> {a} -> {a}
	     * @param {Function} fn
	     * @param {Object} l
	     * @param {Object} r
	     * @return {Object}
	     * @see R.merge, R.mergeWithKey
	     * @example
	     *
	     *      R.mergeWith(R.concat,
	     *                  { a: true, values: [10, 20] },
	     *                  { b: true, values: [15, 35] });
	     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
	     */
	    var mergeWith = _curry3(function mergeWith(fn, l, r) {
	        return mergeWithKey(function (_, _l, _r) {
	            return fn(_l, _r);
	        }, l, r);
	    });

	    /**
	     * Takes a function `f` and a list of arguments, and returns a function `g`.
	     * When applied, `g` returns the result of applying `f` to the arguments
	     * provided initially followed by the arguments provided to `g`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
	     * @param {Function} f
	     * @param {Array} args
	     * @return {Function}
	     * @see R.partialRight
	     * @example
	     *
	     *      var multiply = (a, b) => a * b;
	     *      var double = R.partial(multiply, [2]);
	     *      double(2); //=> 4
	     *
	     *      var greet = (salutation, title, firstName, lastName) =>
	     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	     *
	     *      var sayHello = R.partial(greet, ['Hello']);
	     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);
	     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
	     */
	    var partial = _createPartialApplicator(_concat);

	    /**
	     * Takes a function `f` and a list of arguments, and returns a function `g`.
	     * When applied, `g` returns the result of applying `f` to the arguments
	     * provided to `g` followed by the arguments provided initially.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
	     * @param {Function} f
	     * @param {Array} args
	     * @return {Function}
	     * @see R.partial
	     * @example
	     *
	     *      var greet = (salutation, title, firstName, lastName) =>
	     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	     *
	     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
	     *
	     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
	     */
	    var partialRight = _createPartialApplicator(flip(_concat));

	    /**
	     * Determines whether a nested path on an object has a specific value, in
	     * `R.equals` terms. Most likely used to filter a list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Relation
	     * @sig [String] -> * -> {String: *} -> Boolean
	     * @param {Array} path The path of the nested property to use
	     * @param {*} val The value to compare the nested property with
	     * @param {Object} obj The object to check the nested property in
	     * @return {Boolean} `true` if the value equals the nested object property,
	     *         `false` otherwise.
	     * @example
	     *
	     *      var user1 = { address: { zipCode: 90210 } };
	     *      var user2 = { address: { zipCode: 55555 } };
	     *      var user3 = { name: 'Bob' };
	     *      var users = [ user1, user2, user3 ];
	     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);
	     *      R.filter(isFamous, users); //=> [ user1 ]
	     */
	    var pathEq = _curry3(function pathEq(_path, val, obj) {
	        return equals(path(_path, obj), val);
	    });

	    /**
	     * Returns a new list by plucking the same named property off all objects in
	     * the list supplied.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig k -> [{k: v}] -> [v]
	     * @param {Number|String} key The key name to pluck off of each object.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of values for the given key.
	     * @see R.props
	     * @example
	     *
	     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
	     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
	     */
	    var pluck = _curry2(function pluck(p, list) {
	        return map(prop(p), list);
	    });

	    /**
	     * Reasonable analog to SQL `select` statement.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @category Relation
	     * @sig [k] -> [{k: v}] -> [{k: v}]
	     * @param {Array} props The property names to project
	     * @param {Array} objs The objects to query
	     * @return {Array} An array of objects with just the `props` properties.
	     * @example
	     *
	     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
	     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
	     *      var kids = [abby, fred];
	     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
	     */
	    // passing `identity` gives correct arity
	    var project = useWith(_map, [
	        pickAll,
	        identity
	    ]);

	    /**
	     * Returns `true` if the specified object property is equal, in `R.equals`
	     * terms, to the given value; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig String -> a -> Object -> Boolean
	     * @param {String} name
	     * @param {*} val
	     * @param {*} obj
	     * @return {Boolean}
	     * @see R.equals, R.propSatisfies
	     * @example
	     *
	     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
	     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
	     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
	     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
	     *      var kids = [abby, fred, rusty, alois];
	     *      var hasBrownHair = R.propEq('hair', 'brown');
	     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
	     */
	    var propEq = _curry3(function propEq(name, val, obj) {
	        return equals(val, obj[name]);
	    });

	    /**
	     * Returns a single item by iterating through the list, successively calling
	     * the iterator function and passing it an accumulator value and the current
	     * value from the array, and then passing the result to the next call.
	     *
	     * The iterator function receives two values: *(acc, value)*. It may use
	     * `R.reduced` to shortcut the iteration.
	     *
	     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
	     * arrays), unlike the native `Array.prototype.reduce` method. For more details
	     * on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	     *
	     * Dispatches to the `reduce` method of the third argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig ((a, b) -> a) -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.reduced, R.addIndex
	     * @example
	     *
	     *      var numbers = [1, 2, 3];
	     *      var plus = (a, b) => a + b;
	     *
	     *      R.reduce(plus, 10, numbers); //=> 16
	     */
	    var reduce = _curry3(_reduce);

	    /**
	     * Groups the elements of the list according to the result of calling
	     * the String-returning function `keyFn` on each element and reduces the elements
	     * of each group to a single value via the reducer function `valueFn`.
	     *
	     * This function is basically a more general `groupBy` function.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category List
	     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
	     * @param {Function} valueFn The function that reduces the elements of each group to a single
	     *        value. Receives two values, accumulator for a particular group and the current element.
	     * @param {*} acc The (initial) accumulator value for each group.
	     * @param {Function} keyFn The function that maps the list's element into a key.
	     * @param {Array} list The array to group.
	     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
	     *         `valueFn` for elements which produced that key when passed to `keyFn`.
	     * @see R.groupBy, R.reduce
	     * @example
	     *
	     *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
	     *      var namesByGrade = reduceToNamesBy(function(student) {
	     *        var score = student.score;
	     *        return score < 65 ? 'F' :
	     *               score < 70 ? 'D' :
	     *               score < 80 ? 'C' :
	     *               score < 90 ? 'B' : 'A';
	     *      });
	     *      var students = [{name: 'Lucy', score: 92},
	     *                      {name: 'Drew', score: 85},
	     *                      // ...
	     *                      {name: 'Bart', score: 62}];
	     *      namesByGrade(students);
	     *      // {
	     *      //   'A': ['Lucy'],
	     *      //   'B': ['Drew']
	     *      //   // ...,
	     *      //   'F': ['Bart']
	     *      // }
	     */
	    var reduceBy = _curryN(4, [], _dispatchable('reduceBy', _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
	        return _reduce(function (acc, elt) {
	            var key = keyFn(elt);
	            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);
	            return acc;
	        }, {}, list);
	    }));

	    /**
	     * Like `reduce`, `reduceWhile` returns a single item by iterating through
	     * the list, successively calling the iterator function. `reduceWhile` also
	     * takes a predicate that is evaluated before each step. If the predicate returns
	     * `false`, it "short-circuits" the iteration and returns the current value
	     * of the accumulator.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.22.0
	     * @category List
	     * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
	     * @param {Function} pred The predicate. It is passed the accumulator and the
	     *        current element.
	     * @param {Function} fn The iterator function. Receives two values, the
	     *        accumulator and the current element.
	     * @param {*} a The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.reduce, R.reduced
	     * @example
	     *
	     *      var isOdd = (acc, x) => x % 2 === 1;
	     *      var xs = [1, 3, 5, 60, 777, 800];
	     *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
	     *
	     *      var ys = [2, 4, 6]
	     *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
	     */
	    var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {
	        return _reduce(function (acc, x) {
	            return pred(acc, x) ? fn(acc, x) : _reduced(acc);
	        }, a, list);
	    });

	    /**
	     * The complement of `filter`.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig Filterable f => (a -> Boolean) -> f a -> f a
	     * @param {Function} pred
	     * @param {Array} filterable
	     * @return {Array}
	     * @see R.filter, R.transduce, R.addIndex
	     * @example
	     *
	     *      var isOdd = (n) => n % 2 === 1;
	     *
	     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
	     *
	     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
	     */
	    var reject = _curry2(function reject(pred, filterable) {
	        return filter(_complement(pred), filterable);
	    });

	    /**
	     * Returns a fixed list of size `n` containing a specified identical value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.1
	     * @category List
	     * @sig a -> n -> [a]
	     * @param {*} value The value to repeat.
	     * @param {Number} n The desired size of the output list.
	     * @return {Array} A new array containing `n` `value`s.
	     * @example
	     *
	     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
	     *
	     *      var obj = {};
	     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
	     *      repeatedObjs[0] === repeatedObjs[1]; //=> true
	     */
	    var repeat = _curry2(function repeat(value, n) {
	        return times(always(value), n);
	    });

	    /**
	     * Adds together all the elements of a list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list An array of numbers
	     * @return {Number} The sum of all the numbers in the list.
	     * @see R.reduce
	     * @example
	     *
	     *      R.sum([2,4,6,8,100,1]); //=> 121
	     */
	    var sum = reduce(add, 0);

	    /**
	     * Returns a new list containing the last `n` elements of the given list.
	     * If `n > list.length`, returns a list of `list.length` elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @sig Number -> String -> String
	     * @param {Number} n The number of elements to return.
	     * @param {Array} xs The collection to consider.
	     * @return {Array}
	     * @see R.dropLast
	     * @example
	     *
	     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
	     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
	     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
	     *      R.takeLast(3, 'ramda');               //=> 'mda'
	     */
	    var takeLast = _curry2(function takeLast(n, xs) {
	        return drop(n >= 0 ? xs.length - n : 0, xs);
	    });

	    /**
	     * Initializes a transducer using supplied iterator function. Returns a single
	     * item by iterating through the list, successively calling the transformed
	     * iterator function and passing it an accumulator value and the current value
	     * from the array, and then passing the result to the next call.
	     *
	     * The iterator function receives two values: *(acc, value)*. It will be
	     * wrapped as a transformer to initialize the transducer. A transformer can be
	     * passed directly in place of an iterator function. In both cases, iteration
	     * may be stopped early with the `R.reduced` function.
	     *
	     * A transducer is a function that accepts a transformer and returns a
	     * transformer and can be composed directly.
	     *
	     * A transformer is an an object that provides a 2-arity reducing iterator
	     * function, step, 0-arity initial value function, init, and 1-arity result
	     * extraction function, result. The step function is used as the iterator
	     * function in reduce. The result function is used to convert the final
	     * accumulator into the return type and in most cases is R.identity. The init
	     * function can be used to provide an initial accumulator, but is ignored by
	     * transduce.
	     *
	     * The iteration is performed with R.reduce after initializing the transducer.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category List
	     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a
	     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array. Wrapped as transformer, if necessary, and used to
	     *        initialize the transducer
	     * @param {*} acc The initial accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @see R.reduce, R.reduced, R.into
	     * @example
	     *
	     *      var numbers = [1, 2, 3, 4];
	     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
	     *
	     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
	     */
	    var transduce = curryN(4, function transduce(xf, fn, acc, list) {
	        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
	    });

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of the elements
	     * of each list. Duplication is determined according to the value returned by
	     * applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The first and second lists concatenated, with
	     *         duplicates removed.
	     * @see R.union
	     * @example
	     *
	     *      var l1 = [{a: 1}, {a: 2}];
	     *      var l2 = [{a: 1}, {a: 4}];
	     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
	     */
	    var unionWith = _curry3(function unionWith(pred, list1, list2) {
	        return uniqWith(pred, _concat(list1, list2));
	    });

	    /**
	     * Takes a spec object and a test object; returns true if the test satisfies
	     * the spec, false otherwise. An object satisfies the spec if, for each of the
	     * spec's own properties, accessing that property of the object gives the same
	     * value (in `R.equals` terms) as accessing that property of the spec.
	     *
	     * `whereEq` is a specialization of [`where`](#where).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Object
	     * @sig {String: *} -> {String: *} -> Boolean
	     * @param {Object} spec
	     * @param {Object} testObj
	     * @return {Boolean}
	     * @see R.where
	     * @example
	     *
	     *      // pred :: Object -> Boolean
	     *      var pred = R.whereEq({a: 1, b: 2});
	     *
	     *      pred({a: 1});              //=> false
	     *      pred({a: 1, b: 2});        //=> true
	     *      pred({a: 1, b: 2, c: 3});  //=> true
	     *      pred({a: 1, b: 1});        //=> false
	     */
	    var whereEq = _curry2(function whereEq(spec, testObj) {
	        return where(map(equals, spec), testObj);
	    });

	    var _flatCat = function () {
	        var preservingReduced = function (xf) {
	            return {
	                '@@transducer/init': _xfBase.init,
	                '@@transducer/result': function (result) {
	                    return xf['@@transducer/result'](result);
	                },
	                '@@transducer/step': function (result, input) {
	                    var ret = xf['@@transducer/step'](result, input);
	                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
	                }
	            };
	        };
	        return function _xcat(xf) {
	            var rxf = preservingReduced(xf);
	            return {
	                '@@transducer/init': _xfBase.init,
	                '@@transducer/result': function (result) {
	                    return rxf['@@transducer/result'](result);
	                },
	                '@@transducer/step': function (result, input) {
	                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
	                }
	            };
	        };
	    }();

	    // Array.prototype.indexOf doesn't exist below IE9
	    // manually crawl the list to distinguish between +0 and -0
	    // NaN
	    // non-zero numbers can utilise Set
	    // all these types can utilise Set
	    // null can utilise Set
	    // anything else not covered above, defer to R.equals
	    var _indexOf = function _indexOf(list, a, idx) {
	        var inf, item;
	        // Array.prototype.indexOf doesn't exist below IE9
	        if (typeof list.indexOf === 'function') {
	            switch (typeof a) {
	            case 'number':
	                if (a === 0) {
	                    // manually crawl the list to distinguish between +0 and -0
	                    inf = 1 / a;
	                    while (idx < list.length) {
	                        item = list[idx];
	                        if (item === 0 && 1 / item === inf) {
	                            return idx;
	                        }
	                        idx += 1;
	                    }
	                    return -1;
	                } else if (a !== a) {
	                    // NaN
	                    while (idx < list.length) {
	                        item = list[idx];
	                        if (typeof item === 'number' && item !== item) {
	                            return idx;
	                        }
	                        idx += 1;
	                    }
	                    return -1;
	                }
	                // non-zero numbers can utilise Set
	                return list.indexOf(a, idx);
	            // all these types can utilise Set
	            case 'string':
	            case 'boolean':
	            case 'function':
	            case 'undefined':
	                return list.indexOf(a, idx);
	            case 'object':
	                if (a === null) {
	                    // null can utilise Set
	                    return list.indexOf(a, idx);
	                }
	            }
	        }
	        // anything else not covered above, defer to R.equals
	        while (idx < list.length) {
	            if (equals(list[idx], a)) {
	                return idx;
	            }
	            idx += 1;
	        }
	        return -1;
	    };

	    var _xchain = _curry2(function _xchain(f, xf) {
	        return map(f, _flatCat(xf));
	    });

	    /**
	     * Takes a list of predicates and returns a predicate that returns true for a
	     * given list of arguments if every one of the provided predicates is satisfied
	     * by those arguments.
	     *
	     * The function returned is a curried function whose arity matches that of the
	     * highest-arity predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Logic
	     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	     * @param {Array} preds
	     * @return {Function}
	     * @see R.anyPass
	     * @example
	     *
	     *      var isQueen = R.propEq('rank', 'Q');
	     *      var isSpade = R.propEq('suit', '♠︎');
	     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
	     *
	     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
	     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
	     */
	    var allPass = _curry1(function allPass(preds) {
	        return curryN(reduce(max, 0, pluck('length', preds)), function () {
	            var idx = 0;
	            var len = preds.length;
	            while (idx < len) {
	                if (!preds[idx].apply(this, arguments)) {
	                    return false;
	                }
	                idx += 1;
	            }
	            return true;
	        });
	    });

	    /**
	     * Takes a list of predicates and returns a predicate that returns true for a
	     * given list of arguments if at least one of the provided predicates is
	     * satisfied by those arguments.
	     *
	     * The function returned is a curried function whose arity matches that of the
	     * highest-arity predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Logic
	     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	     * @param {Array} preds
	     * @return {Function}
	     * @see R.allPass
	     * @example
	     *
	     *      var gte = R.anyPass([R.gt, R.equals]);
	     *
	     *      gte(3, 2); //=> true
	     *      gte(2, 2); //=> true
	     *      gte(2, 3); //=> false
	     */
	    var anyPass = _curry1(function anyPass(preds) {
	        return curryN(reduce(max, 0, pluck('length', preds)), function () {
	            var idx = 0;
	            var len = preds.length;
	            while (idx < len) {
	                if (preds[idx].apply(this, arguments)) {
	                    return true;
	                }
	                idx += 1;
	            }
	            return false;
	        });
	    });

	    /**
	     * ap applies a list of functions to a list of values.
	     *
	     * Dispatches to the `ap` method of the second argument, if present. Also
	     * treats curried functions as applicatives.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category Function
	     * @sig [a -> b] -> [a] -> [b]
	     * @sig Apply f => f (a -> b) -> f a -> f b
	     * @param {Array} fns An array of functions
	     * @param {Array} vs An array of values
	     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.
	     * @example
	     *
	     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
	     */
	    // else
	    var ap = _curry2(function ap(applicative, fn) {
	        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {
	            return applicative(x)(fn(x));
	        } : // else
	        _reduce(function (acc, f) {
	            return _concat(acc, map(f, fn));
	        }, [], applicative);
	    });

	    /**
	     * Given a spec object recursively mapping properties to functions, creates a
	     * function producing an object of the same structure, by mapping each property
	     * to the result of calling its associated function with the supplied arguments.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.20.0
	     * @category Function
	     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
	     * @param {Object} spec an object recursively mapping properties to functions for
	     *        producing the values for these properties.
	     * @return {Function} A function that returns an object of the same structure
	     * as `spec', with each property set to the value returned by calling its
	     * associated function with the supplied arguments.
	     * @see R.converge, R.juxt
	     * @example
	     *
	     *      var getMetrics = R.applySpec({
	     *                                      sum: R.add,
	     *                                      nested: { mul: R.multiply }
	     *                                   });
	     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
	     */
	    var applySpec = _curry1(function applySpec(spec) {
	        spec = map(function (v) {
	            return typeof v == 'function' ? v : applySpec(v);
	        }, spec);
	        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {
	            var args = arguments;
	            return map(function (f) {
	                return apply(f, args);
	            }, spec);
	        });
	    });

	    /**
	     * Returns the result of calling its first argument with the remaining
	     * arguments. This is occasionally useful as a converging function for
	     * `R.converge`: the left branch can produce a function while the right branch
	     * produces a value to be passed to that function as an argument.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category Function
	     * @sig (*... -> a),*... -> a
	     * @param {Function} fn The function to apply to the remaining arguments.
	     * @param {...*} args Any number of positional arguments.
	     * @return {*}
	     * @see R.apply
	     * @example
	     *
	     *      var indentN = R.pipe(R.times(R.always(' ')),
	     *                           R.join(''),
	     *                           R.replace(/^(?!$)/gm));
	     *
	     *      var format = R.converge(R.call, [
	     *                                  R.pipe(R.prop('indent'), indentN),
	     *                                  R.prop('value')
	     *                              ]);
	     *
	     *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
	     */
	    var call = curry(function call(fn) {
	        return fn.apply(this, _slice(arguments, 1));
	    });

	    /**
	     * `chain` maps a function over a list and concatenates the results. `chain`
	     * is also known as `flatMap` in some libraries
	     *
	     * Dispatches to the `chain` method of the second argument, if present,
	     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig Chain m => (a -> m b) -> m a -> m b
	     * @param {Function} fn
	     * @param {Array} list
	     * @return {Array}
	     * @example
	     *
	     *      var duplicate = n => [n, n];
	     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
	     */
	    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {
	        if (typeof monad === 'function') {
	            return function () {
	                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);
	            };
	        }
	        return _makeFlat(false)(map(fn, monad));
	    }));

	    /**
	     * Returns a function, `fn`, which encapsulates if/else-if/else logic.
	     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments
	     * to `fn` are applied to each of the predicates in turn until one returns a
	     * "truthy" value, at which point `fn` returns the result of applying its
	     * arguments to the corresponding transformer. If none of the predicates
	     * matches, `fn` returns undefined.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.6.0
	     * @category Logic
	     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
	     * @param {Array} pairs
	     * @return {Function}
	     * @example
	     *
	     *      var fn = R.cond([
	     *        [R.equals(0),   R.always('water freezes at 0°C')],
	     *        [R.equals(100), R.always('water boils at 100°C')],
	     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
	     *      ]);
	     *      fn(0); //=> 'water freezes at 0°C'
	     *      fn(50); //=> 'nothing special happens at 50°C'
	     *      fn(100); //=> 'water boils at 100°C'
	     */
	    var cond = _curry1(function cond(pairs) {
	        var arity = reduce(max, 0, map(function (pair) {
	            return pair[0].length;
	        }, pairs));
	        return _arity(arity, function () {
	            var idx = 0;
	            while (idx < pairs.length) {
	                if (pairs[idx][0].apply(this, arguments)) {
	                    return pairs[idx][1].apply(this, arguments);
	                }
	                idx += 1;
	            }
	        });
	    });

	    /**
	     * Wraps a constructor function inside a curried function that can be called
	     * with the same arguments and returns the same type. The arity of the function
	     * returned is specified to allow using variadic constructor functions.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.0
	     * @category Function
	     * @sig Number -> (* -> {*}) -> (* -> {*})
	     * @param {Number} n The arity of the constructor function.
	     * @param {Function} Fn The constructor function to wrap.
	     * @return {Function} A wrapped, curried constructor function.
	     * @example
	     *
	     *      // Variadic constructor function
	     *      var Widget = () => {
	     *        this.children = Array.prototype.slice.call(arguments);
	     *        // ...
	     *      };
	     *      Widget.prototype = {
	     *        // ...
	     *      };
	     *      var allConfigs = [
	     *        // ...
	     *      ];
	     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets
	     */
	    var constructN = _curry2(function constructN(n, Fn) {
	        if (n > 10) {
	            throw new Error('Constructor with greater than ten arguments');
	        }
	        if (n === 0) {
	            return function () {
	                return new Fn();
	            };
	        }
	        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
	            switch (arguments.length) {
	            case 1:
	                return new Fn($0);
	            case 2:
	                return new Fn($0, $1);
	            case 3:
	                return new Fn($0, $1, $2);
	            case 4:
	                return new Fn($0, $1, $2, $3);
	            case 5:
	                return new Fn($0, $1, $2, $3, $4);
	            case 6:
	                return new Fn($0, $1, $2, $3, $4, $5);
	            case 7:
	                return new Fn($0, $1, $2, $3, $4, $5, $6);
	            case 8:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
	            case 9:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
	            case 10:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
	            }
	        }));
	    });

	    /**
	     * Accepts a converging function and a list of branching functions and returns
	     * a new function. When invoked, this new function is applied to some
	     * arguments, each branching function is applied to those same arguments. The
	     * results of each branching function are passed as arguments to the converging
	     * function to produce the return value.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.4.2
	     * @category Function
	     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
	     * @param {Function} after A function. `after` will be invoked with the return values of
	     *        `fn1` and `fn2` as its arguments.
	     * @param {Array} functions A list of functions.
	     * @return {Function} A new function.
	     * @example
	     *
	     *      var add = (a, b) => a + b;
	     *      var multiply = (a, b) => a * b;
	     *      var subtract = (a, b) => a - b;
	     *
	     *      //≅ multiply( add(1, 2), subtract(1, 2) );
	     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3
	     *
	     *      var add3 = (a, b, c) => a + b + c;
	     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4
	     */
	    var converge = _curry2(function converge(after, fns) {
	        return curryN(reduce(max, 0, pluck('length', fns)), function () {
	            var args = arguments;
	            var context = this;
	            return after.apply(context, _map(function (fn) {
	                return fn.apply(context, args);
	            }, fns));
	        });
	    });

	    /**
	     * Counts the elements of a list according to how many match each value of a
	     * key generated by the supplied function. Returns an object mapping the keys
	     * produced by `fn` to the number of occurrences in the list. Note that all
	     * keys are coerced to strings because of how JavaScript objects work.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig (a -> String) -> [a] -> {*}
	     * @param {Function} fn The function used to map values to keys.
	     * @param {Array} list The list to count elements from.
	     * @return {Object} An object mapping keys to number of occurrences in the list.
	     * @example
	     *
	     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
	     *      var letters = R.split('', 'abcABCaaaBBc');
	     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
	     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}
	     */
	    var countBy = reduceBy(function (acc, elem) {
	        return acc + 1;
	    }, 0);

	    /**
	     * Returns a new list without any consecutively repeating elements. Equality is
	     * determined by applying the supplied predicate two consecutive elements. The
	     * first element in a series of equal element is the one being preserved.
	     *
	     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig (a, a -> Boolean) -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list The array to consider.
	     * @return {Array} `list` without repeating elements.
	     * @see R.transduce
	     * @example
	     *
	     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
	     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
	     */
	    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
	        var result = [];
	        var idx = 1;
	        var len = list.length;
	        if (len !== 0) {
	            result[0] = list[0];
	            while (idx < len) {
	                if (!pred(last(result), list[idx])) {
	                    result[result.length] = list[idx];
	                }
	                idx += 1;
	            }
	        }
	        return result;
	    }));

	    /**
	     * Takes a function and two values in its domain and returns `true` if the
	     * values map to the same value in the codomain; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.18.0
	     * @category Relation
	     * @sig (a -> b) -> a -> a -> Boolean
	     * @param {Function} f
	     * @param {*} x
	     * @param {*} y
	     * @return {Boolean}
	     * @example
	     *
	     *      R.eqBy(Math.abs, 5, -5); //=> true
	     */
	    var eqBy = _curry3(function eqBy(f, x, y) {
	        return equals(f(x), f(y));
	    });

	    /**
	     * Reports whether two objects have the same value, in `R.equals` terms, for
	     * the specified property. Useful as a curried predicate.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig k -> {k: v} -> {k: v} -> Boolean
	     * @param {String} prop The name of the property to compare
	     * @param {Object} obj1
	     * @param {Object} obj2
	     * @return {Boolean}
	     *
	     * @example
	     *
	     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
	     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
	     *      R.eqProps('a', o1, o2); //=> false
	     *      R.eqProps('c', o1, o2); //=> true
	     */
	    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {
	        return equals(obj1[prop], obj2[prop]);
	    });

	    /**
	     * Splits a list into sub-lists stored in an object, based on the result of
	     * calling a String-returning function on each element, and grouping the
	     * results according to values returned.
	     *
	     * Dispatches to the `groupBy` method of the second argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig (a -> String) -> [a] -> {String: [a]}
	     * @param {Function} fn Function :: a -> String
	     * @param {Array} list The array to group
	     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
	     *         that produced that key when passed to `fn`.
	     * @see R.transduce
	     * @example
	     *
	     *      var byGrade = R.groupBy(function(student) {
	     *        var score = student.score;
	     *        return score < 65 ? 'F' :
	     *               score < 70 ? 'D' :
	     *               score < 80 ? 'C' :
	     *               score < 90 ? 'B' : 'A';
	     *      });
	     *      var students = [{name: 'Abby', score: 84},
	     *                      {name: 'Eddy', score: 58},
	     *                      // ...
	     *                      {name: 'Jack', score: 69}];
	     *      byGrade(students);
	     *      // {
	     *      //   'A': [{name: 'Dianne', score: 99}],
	     *      //   'B': [{name: 'Abby', score: 84}]
	     *      //   // ...,
	     *      //   'F': [{name: 'Eddy', score: 58}]
	     *      // }
	     */
	    var groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {
	        if (acc == null) {
	            acc = [];
	        }
	        acc.push(item);
	        return acc;
	    }, null)));

	    /**
	     * Given a function that generates a key, turns a list of objects into an
	     * object indexing the objects by the given key. Note that if multiple
	     * objects generate the same value for the indexing key only the last value
	     * will be included in the generated object.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
	     * @param {Function} fn Function :: a -> String
	     * @param {Array} array The array of objects to index
	     * @return {Object} An object indexing each array element by the given property.
	     * @example
	     *
	     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
	     *      R.indexBy(R.prop('id'), list);
	     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
	     */
	    var indexBy = reduceBy(function (acc, elem) {
	        return elem;
	    }, null);

	    /**
	     * Returns the position of the first occurrence of an item in an array, or -1
	     * if the item is not included in the array. `R.equals` is used to determine
	     * equality.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> Number
	     * @param {*} target The item to find.
	     * @param {Array} xs The array to search in.
	     * @return {Number} the index of the target, or -1 if the target is not found.
	     * @see R.lastIndexOf
	     * @example
	     *
	     *      R.indexOf(3, [1,2,3,4]); //=> 2
	     *      R.indexOf(10, [1,2,3,4]); //=> -1
	     */
	    var indexOf = _curry2(function indexOf(target, xs) {
	        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
	    });

	    /**
	     * juxt applies a list of functions to a list of values.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Function
	     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
	     * @param {Array} fns An array of functions
	     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
	     * @see R.applySpec
	     * @example
	     *
	     *      var getRange = R.juxt([Math.min, Math.max]);
	     *      getRange(3, 4, 9, -3); //=> [-3, 9]
	     */
	    var juxt = _curry1(function juxt(fns) {
	        return converge(_arrayOf, fns);
	    });

	    /**
	     * Returns a lens for the given getter and setter functions. The getter "gets"
	     * the value of the focus; the setter "sets" the value of the focus. The setter
	     * should not mutate the data structure.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.8.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
	     * @param {Function} getter
	     * @param {Function} setter
	     * @return {Lens}
	     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
	     * @example
	     *
	     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));
	     *
	     *      R.view(xLens, {x: 1, y: 2});            //=> 1
	     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
	     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
	     */
	    var lens = _curry2(function lens(getter, setter) {
	        return function (toFunctorFn) {
	            return function (target) {
	                return map(function (focus) {
	                    return setter(focus, target);
	                }, toFunctorFn(getter(target)));
	            };
	        };
	    });

	    /**
	     * Returns a lens whose focus is the specified index.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig Number -> Lens s a
	     * @param {Number} n
	     * @return {Lens}
	     * @see R.view, R.set, R.over
	     * @example
	     *
	     *      var headLens = R.lensIndex(0);
	     *
	     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
	     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
	     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
	     */
	    var lensIndex = _curry1(function lensIndex(n) {
	        return lens(nth(n), update(n));
	    });

	    /**
	     * Returns a lens whose focus is the specified path.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig [String] -> Lens s a
	     * @param {Array} path The path to use.
	     * @return {Lens}
	     * @see R.view, R.set, R.over
	     * @example
	     *
	     *      var xyLens = R.lensPath(['x', 'y']);
	     *
	     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2
	     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}
	     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}
	     */
	    var lensPath = _curry1(function lensPath(p) {
	        return lens(path(p), assocPath(p));
	    });

	    /**
	     * Returns a lens whose focus is the specified property.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Object
	     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
	     * @sig String -> Lens s a
	     * @param {String} k
	     * @return {Lens}
	     * @see R.view, R.set, R.over
	     * @example
	     *
	     *      var xLens = R.lensProp('x');
	     *
	     *      R.view(xLens, {x: 1, y: 2});            //=> 1
	     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
	     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
	     */
	    var lensProp = _curry1(function lensProp(k) {
	        return lens(prop(k), assoc(k));
	    });

	    /**
	     * "lifts" a function to be the specified arity, so that it may "map over" that
	     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Function
	     * @sig Number -> (*... -> *) -> ([*]... -> [*])
	     * @param {Function} fn The function to lift into higher context
	     * @return {Function} The lifted function.
	     * @see R.lift, R.ap
	     * @example
	     *
	     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));
	     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	     */
	    var liftN = _curry2(function liftN(arity, fn) {
	        var lifted = curryN(arity, fn);
	        return curryN(arity, function () {
	            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));
	        });
	    });

	    /**
	     * Returns the mean of the given list of numbers.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list
	     * @return {Number}
	     * @example
	     *
	     *      R.mean([2, 7, 9]); //=> 6
	     *      R.mean([]); //=> NaN
	     */
	    var mean = _curry1(function mean(list) {
	        return sum(list) / list.length;
	    });

	    /**
	     * Returns the median of the given list of numbers.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list
	     * @return {Number}
	     * @example
	     *
	     *      R.median([2, 9, 7]); //=> 7
	     *      R.median([7, 2, 10, 9]); //=> 8
	     *      R.median([]); //=> NaN
	     */
	    var median = _curry1(function median(list) {
	        var len = list.length;
	        if (len === 0) {
	            return NaN;
	        }
	        var width = 2 - len % 2;
	        var idx = (len - width) / 2;
	        return mean(_slice(list).sort(function (a, b) {
	            return a < b ? -1 : a > b ? 1 : 0;
	        }).slice(idx, idx + width));
	    });

	    /**
	     * Takes a predicate and a list or other "filterable" object and returns the
	     * pair of filterable objects of the same type of elements which do and do not
	     * satisfy, the predicate, respectively.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.4
	     * @category List
	     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
	     * @param {Function} pred A predicate to determine which side the element belongs to.
	     * @param {Array} filterable the list (or other filterable) to partition.
	     * @return {Array} An array, containing first the subset of elements that satisfy the
	     *         predicate, and second the subset of elements that do not satisfy.
	     * @see R.filter, R.reject
	     * @example
	     *
	     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
	     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
	     *
	     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
	     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
	     */
	    var partition = juxt([
	        filter,
	        reject
	    ]);

	    /**
	     * Performs left-to-right function composition. The leftmost function may have
	     * any arity; the remaining functions must be unary.
	     *
	     * In some libraries this function is named `sequence`.
	     *
	     * **Note:** The result of pipe is not automatically curried.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.compose
	     * @example
	     *
	     *      var f = R.pipe(Math.pow, R.negate, R.inc);
	     *
	     *      f(3, 4); // -(3^4) + 1
	     */
	    var pipe = function pipe() {
	        if (arguments.length === 0) {
	            throw new Error('pipe requires at least one argument');
	        }
	        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
	    };

	    /**
	     * Performs left-to-right composition of one or more Promise-returning
	     * functions. The leftmost function may have any arity; the remaining functions
	     * must be unary.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.composeP
	     * @example
	     *
	     *      //  followersForUser :: String -> Promise [User]
	     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);
	     */
	    var pipeP = function pipeP() {
	        if (arguments.length === 0) {
	            throw new Error('pipeP requires at least one argument');
	        }
	        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));
	    };

	    /**
	     * Multiplies together all the elements of a list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list An array of numbers
	     * @return {Number} The product of all the numbers in the list.
	     * @see R.reduce
	     * @example
	     *
	     *      R.product([2,4,6,8,100,1]); //=> 38400
	     */
	    var product = reduce(multiply, 1);

	    /**
	     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
	     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
	     * Applicative of Traversable.
	     *
	     * Dispatches to the `sequence` method of the second argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
	     * @param {Function} of
	     * @param {*} traversable
	     * @return {*}
	     * @see R.traverse
	     * @example
	     *
	     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
	     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
	     *
	     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
	     *      R.sequence(R.of, Nothing());       //=> [Nothing()]
	     */
	    var sequence = _curry2(function sequence(of, traversable) {
	        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {
	            return ap(map(prepend, x), acc);
	        }, of([]), traversable);
	    });

	    /**
	     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
	     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
	     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
	     * into an Applicative of Traversable.
	     *
	     * Dispatches to the `sequence` method of the third argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
	     * @param {Function} of
	     * @param {Function} f
	     * @param {*} traversable
	     * @return {*}
	     * @see R.sequence
	     * @example
	     *
	     *      // Returns `Nothing` if the given divisor is `0`
	     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)
	     *
	     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])
	     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing
	     */
	    var traverse = _curry3(function traverse(of, f, traversable) {
	        return sequence(of, map(f, traversable));
	    });

	    /**
	     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
	     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.3.0
	     * @category List
	     * @sig Chain c => c (c a) -> c a
	     * @param {*} list
	     * @return {*}
	     * @see R.flatten, R.chain
	     * @example
	     *
	     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
	     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
	     */
	    var unnest = chain(_identity);

	    var _contains = function _contains(a, list) {
	        return _indexOf(list, a, 0) >= 0;
	    };

	    //  mapPairs :: (Object, [String]) -> [String]
	    var _toString = function _toString(x, seen) {
	        var recur = function recur(y) {
	            var xs = seen.concat([x]);
	            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);
	        };
	        //  mapPairs :: (Object, [String]) -> [String]
	        var mapPairs = function (obj, keys) {
	            return _map(function (k) {
	                return _quote(k) + ': ' + recur(obj[k]);
	            }, keys.slice().sort());
	        };
	        switch (Object.prototype.toString.call(x)) {
	        case '[object Arguments]':
	            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';
	        case '[object Array]':
	            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
	                return /^\d+$/.test(k);
	            }, keys(x)))).join(', ') + ']';
	        case '[object Boolean]':
	            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
	        case '[object Date]':
	            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';
	        case '[object Null]':
	            return 'null';
	        case '[object Number]':
	            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
	        case '[object String]':
	            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);
	        case '[object Undefined]':
	            return 'undefined';
	        default:
	            if (typeof x.toString === 'function') {
	                var repr = x.toString();
	                if (repr !== '[object Object]') {
	                    return repr;
	                }
	            }
	            return '{' + mapPairs(x, keys(x)).join(', ') + '}';
	        }
	    };

	    /**
	     * Performs right-to-left function composition. The rightmost function may have
	     * any arity; the remaining functions must be unary.
	     *
	     * **Note:** The result of compose is not automatically curried.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.pipe
	     * @example
	     *
	     *      var f = R.compose(R.inc, R.negate, Math.pow);
	     *
	     *      f(3, 4); // -(3^4) + 1
	     */
	    var compose = function compose() {
	        if (arguments.length === 0) {
	            throw new Error('compose requires at least one argument');
	        }
	        return pipe.apply(this, reverse(arguments));
	    };

	    /**
	     * Returns the right-to-left Kleisli composition of the provided functions,
	     * each of which must return a value of a type supported by [`chain`](#chain).
	     *
	     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Function
	     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)
	     * @param {...Function}
	     * @return {Function}
	     * @see R.pipeK
	     * @example
	     *
	     *      //  parseJson :: String -> Maybe *
	     *      //  get :: String -> Object -> Maybe *
	     *
	     *      //  getStateCode :: Maybe String -> Maybe String
	     *      var getStateCode = R.composeK(
	     *        R.compose(Maybe.of, R.toUpper),
	     *        get('state'),
	     *        get('address'),
	     *        get('user'),
	     *        parseJson
	     *      );
	     *
	     *      getStateCode(Maybe.of('{"user":{"address":{"state":"ny"}}}'));
	     *      //=> Just('NY')
	     *      getStateCode(Maybe.of('[Invalid JSON]'));
	     *      //=> Nothing()
	     */
	    var composeK = function composeK() {
	        return compose.apply(this, prepend(identity, map(chain, arguments)));
	    };

	    /**
	     * Performs right-to-left composition of one or more Promise-returning
	     * functions. The rightmost function may have any arity; the remaining
	     * functions must be unary.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.10.0
	     * @category Function
	     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
	     * @param {...Function} functions
	     * @return {Function}
	     * @see R.pipeP
	     * @example
	     *
	     *      //  followersForUser :: String -> Promise [User]
	     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);
	     */
	    var composeP = function composeP() {
	        if (arguments.length === 0) {
	            throw new Error('composeP requires at least one argument');
	        }
	        return pipeP.apply(this, reverse(arguments));
	    };

	    /**
	     * Wraps a constructor function inside a curried function that can be called
	     * with the same arguments and returns the same type.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (* -> {*}) -> (* -> {*})
	     * @param {Function} Fn The constructor function to wrap.
	     * @return {Function} A wrapped, curried constructor function.
	     * @example
	     *
	     *      // Constructor function
	     *      var Widget = config => {
	     *        // ...
	     *      };
	     *      Widget.prototype = {
	     *        // ...
	     *      };
	     *      var allConfigs = [
	     *        // ...
	     *      ];
	     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets
	     */
	    var construct = _curry1(function construct(Fn) {
	        return constructN(Fn.length, Fn);
	    });

	    /**
	     * Returns `true` if the specified value is equal, in `R.equals` terms, to at
	     * least one element of the given list; `false` otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig a -> [a] -> Boolean
	     * @param {Object} a The item to compare against.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the item is in the list, `false` otherwise.
	     * @see R.any
	     * @example
	     *
	     *      R.contains(3, [1, 2, 3]); //=> true
	     *      R.contains(4, [1, 2, 3]); //=> false
	     *      R.contains([42], [[42]]); //=> true
	     */
	    var contains = _curry2(_contains);

	    /**
	     * Finds the set (i.e. no duplicates) of all elements in the first list not
	     * contained in the second list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` that are not in `list2`.
	     * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith
	     * @example
	     *
	     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
	     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
	     */
	    var difference = _curry2(function difference(first, second) {
	        var out = [];
	        var idx = 0;
	        var firstLen = first.length;
	        while (idx < firstLen) {
	            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
	                out[out.length] = first[idx];
	            }
	            idx += 1;
	        }
	        return out;
	    });

	    /**
	     * Returns a new list without any consecutively repeating elements. `R.equals`
	     * is used to determine equality.
	     *
	     * Dispatches to the `dropRepeats` method of the first argument, if present.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The array to consider.
	     * @return {Array} `list` without repeating elements.
	     * @see R.transduce
	     * @example
	     *
	     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
	     */
	    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));

	    /**
	     * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
	     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
	     *
	     * @func
	     * @memberOf R
	     * @since v0.7.0
	     * @category Function
	     * @sig (*... -> *) -> ([*]... -> [*])
	     * @param {Function} fn The function to lift into higher context
	     * @return {Function} The lifted function.
	     * @see R.liftN
	     * @example
	     *
	     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));
	     *
	     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	     *
	     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));
	     *
	     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
	     */
	    var lift = _curry1(function lift(fn) {
	        return liftN(fn.length, fn);
	    });

	    /**
	     * Returns a partial copy of an object omitting the keys specified.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Object
	     * @sig [String] -> {String: *} -> {String: *}
	     * @param {Array} names an array of String property names to omit from the new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with properties from `names` not on it.
	     * @see R.pick
	     * @example
	     *
	     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
	     */
	    var omit = _curry2(function omit(names, obj) {
	        var result = {};
	        for (var prop in obj) {
	            if (!_contains(prop, names)) {
	                result[prop] = obj[prop];
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns the left-to-right Kleisli composition of the provided functions,
	     * each of which must return a value of a type supported by [`chain`](#chain).
	     *
	     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category Function
	     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)
	     * @param {...Function}
	     * @return {Function}
	     * @see R.composeK
	     * @example
	     *
	     *      //  parseJson :: String -> Maybe *
	     *      //  get :: String -> Object -> Maybe *
	     *
	     *      //  getStateCode :: Maybe String -> Maybe String
	     *      var getStateCode = R.pipeK(
	     *        parseJson,
	     *        get('user'),
	     *        get('address'),
	     *        get('state'),
	     *        R.compose(Maybe.of, R.toUpper)
	     *      );
	     *
	     *      getStateCode(Maybe.of('{"user":{"address":{"state":"ny"}}}'));
	     *      //=> Just('NY')
	     *      getStateCode(Maybe.of('[Invalid JSON]'));
	     *      //=> Nothing()
	     */
	    var pipeK = function pipeK() {
	        return composeK.apply(this, reverse(arguments));
	    };

	    /**
	     * Returns the string representation of the given value. `eval`'ing the output
	     * should result in a value equivalent to the input value. Many of the built-in
	     * `toString` methods do not satisfy this requirement.
	     *
	     * If the given value is an `[object Object]` with a `toString` method other
	     * than `Object.prototype.toString`, this method is invoked with no arguments
	     * to produce the return value. This means user-defined constructor functions
	     * can provide a suitable `toString` method. For example:
	     *
	     *     function Point(x, y) {
	     *       this.x = x;
	     *       this.y = y;
	     *     }
	     *
	     *     Point.prototype.toString = function() {
	     *       return 'new Point(' + this.x + ', ' + this.y + ')';
	     *     };
	     *
	     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
	     *
	     * @func
	     * @memberOf R
	     * @since v0.14.0
	     * @category String
	     * @sig * -> String
	     * @param {*} val
	     * @return {String}
	     * @example
	     *
	     *      R.toString(42); //=> '42'
	     *      R.toString('abc'); //=> '"abc"'
	     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
	     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
	     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
	     */
	    var toString = _curry1(function toString(val) {
	        return _toString(val, []);
	    });

	    /**
	     * Returns a new list without values in the first argument.
	     * `R.equals` is used to determine equality.
	     *
	     * Acts as a transducer if a transformer is given in list position.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category List
	     * @sig [a] -> [a] -> [a]
	     * @param {Array} list1 The values to be removed from `list2`.
	     * @param {Array} list2 The array to remove values from.
	     * @return {Array} The new array without values in `list1`.
	     * @see R.transduce
	     * @example
	     *
	     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
	     */
	    var without = _curry2(function (xs, list) {
	        return reject(flip(_contains)(xs), list);
	    });

	    // A simple Set type that honours R.equals semantics
	    /* globals Set */
	    // until we figure out why jsdoc chokes on this
	    // @param item The item to add to the Set
	    // @returns {boolean} true if the item did not exist prior, otherwise false
	    //
	    //
	    // @param item The item to check for existence in the Set
	    // @returns {boolean} true if the item exists in the Set, otherwise false
	    //
	    //
	    // Combines the logic for checking whether an item is a member of the set and
	    // for adding a new item to the set.
	    //
	    // @param item       The item to check or add to the Set instance.
	    // @param shouldAdd  If true, the item will be added to the set if it doesn't
	    //                   already exist.
	    // @param set        The set instance to check or add to.
	    // @return {boolean} true if the item already existed, otherwise false.
	    //
	    // distinguish between +0 and -0
	    // these types can all utilise the native Set
	    // set._items['boolean'] holds a two element array
	    // representing [ falseExists, trueExists ]
	    // compare functions for reference equality
	    /* falls through */
	    // reduce the search size of heterogeneous sets by creating buckets
	    // for each type.
	    // scan through all previously applied items
	    var _Set = function () {
	        function _Set() {
	            /* globals Set */
	            this._nativeSet = typeof Set === 'function' ? new Set() : null;
	            this._items = {};
	        }
	        // until we figure out why jsdoc chokes on this
	        // @param item The item to add to the Set
	        // @returns {boolean} true if the item did not exist prior, otherwise false
	        //
	        _Set.prototype.add = function (item) {
	            return !hasOrAdd(item, true, this);
	        };
	        //
	        // @param item The item to check for existence in the Set
	        // @returns {boolean} true if the item exists in the Set, otherwise false
	        //
	        _Set.prototype.has = function (item) {
	            return hasOrAdd(item, false, this);
	        };
	        //
	        // Combines the logic for checking whether an item is a member of the set and
	        // for adding a new item to the set.
	        //
	        // @param item       The item to check or add to the Set instance.
	        // @param shouldAdd  If true, the item will be added to the set if it doesn't
	        //                   already exist.
	        // @param set        The set instance to check or add to.
	        // @return {boolean} true if the item already existed, otherwise false.
	        //
	        function hasOrAdd(item, shouldAdd, set) {
	            var type = typeof item;
	            var prevSize, newSize;
	            switch (type) {
	            case 'string':
	            case 'number':
	                // distinguish between +0 and -0
	                if (item === 0 && 1 / item === -Infinity) {
	                    if (set._items['-0']) {
	                        return true;
	                    } else {
	                        if (shouldAdd) {
	                            set._items['-0'] = true;
	                        }
	                        return false;
	                    }
	                }
	                // these types can all utilise the native Set
	                if (set._nativeSet !== null) {
	                    if (shouldAdd) {
	                        prevSize = set._nativeSet.size;
	                        set._nativeSet.add(item);
	                        newSize = set._nativeSet.size;
	                        return newSize === prevSize;
	                    } else {
	                        return set._nativeSet.has(item);
	                    }
	                } else {
	                    if (!(type in set._items)) {
	                        if (shouldAdd) {
	                            set._items[type] = {};
	                            set._items[type][item] = true;
	                        }
	                        return false;
	                    } else if (item in set._items[type]) {
	                        return true;
	                    } else {
	                        if (shouldAdd) {
	                            set._items[type][item] = true;
	                        }
	                        return false;
	                    }
	                }
	            case 'boolean':
	                // set._items['boolean'] holds a two element array
	                // representing [ falseExists, trueExists ]
	                if (type in set._items) {
	                    var bIdx = item ? 1 : 0;
	                    if (set._items[type][bIdx]) {
	                        return true;
	                    } else {
	                        if (shouldAdd) {
	                            set._items[type][bIdx] = true;
	                        }
	                        return false;
	                    }
	                } else {
	                    if (shouldAdd) {
	                        set._items[type] = item ? [
	                            false,
	                            true
	                        ] : [
	                            true,
	                            false
	                        ];
	                    }
	                    return false;
	                }
	            case 'function':
	                // compare functions for reference equality
	                if (set._nativeSet !== null) {
	                    if (shouldAdd) {
	                        prevSize = set._nativeSet.size;
	                        set._nativeSet.add(item);
	                        newSize = set._nativeSet.size;
	                        return newSize > prevSize;
	                    } else {
	                        return set._nativeSet.has(item);
	                    }
	                } else {
	                    if (!(type in set._items)) {
	                        if (shouldAdd) {
	                            set._items[type] = [item];
	                        }
	                        return false;
	                    }
	                    if (!_contains(item, set._items[type])) {
	                        if (shouldAdd) {
	                            set._items[type].push(item);
	                        }
	                        return false;
	                    }
	                    return true;
	                }
	            case 'undefined':
	                if (set._items[type]) {
	                    return true;
	                } else {
	                    if (shouldAdd) {
	                        set._items[type] = true;
	                    }
	                    return false;
	                }
	            case 'object':
	                if (item === null) {
	                    if (!set._items['null']) {
	                        if (shouldAdd) {
	                            set._items['null'] = true;
	                        }
	                        return false;
	                    }
	                    return true;
	                }
	            /* falls through */
	            default:
	                // reduce the search size of heterogeneous sets by creating buckets
	                // for each type.
	                type = Object.prototype.toString.call(item);
	                if (!(type in set._items)) {
	                    if (shouldAdd) {
	                        set._items[type] = [item];
	                    }
	                    return false;
	                }
	                // scan through all previously applied items
	                if (!_contains(item, set._items[type])) {
	                    if (shouldAdd) {
	                        set._items[type].push(item);
	                    }
	                    return false;
	                }
	                return true;
	            }
	        }
	        return _Set;
	    }();

	    /**
	     * A function wrapping calls to the two functions in an `&&` operation,
	     * returning the result of the first function if it is false-y and the result
	     * of the second function otherwise. Note that this is short-circuited,
	     * meaning that the second function will not be invoked if the first returns a
	     * false-y value.
	     *
	     * In addition to functions, `R.both` also accepts any fantasy-land compatible
	     * applicative functor.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	     * @param {Function} f a predicate
	     * @param {Function} g another predicate
	     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
	     * @see R.and
	     * @example
	     *
	     *      var gt10 = x => x > 10;
	     *      var even = x => x % 2 === 0;
	     *      var f = R.both(gt10, even);
	     *      f(100); //=> true
	     *      f(101); //=> false
	     */
	    var both = _curry2(function both(f, g) {
	        return _isFunction(f) ? function _both() {
	            return f.apply(this, arguments) && g.apply(this, arguments);
	        } : lift(and)(f, g);
	    });

	    /**
	     * Takes a function `f` and returns a function `g` such that:
	     *
	     *   - applying `g` to zero or more arguments will give __true__ if applying
	     *     the same arguments to `f` gives a logical __false__ value; and
	     *
	     *   - applying `g` to zero or more arguments will give __false__ if applying
	     *     the same arguments to `f` gives a logical __true__ value.
	     *
	     * `R.complement` will work on all other functors as well.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category Logic
	     * @sig (*... -> *) -> (*... -> Boolean)
	     * @param {Function} f
	     * @return {Function}
	     * @see R.not
	     * @example
	     *
	     *      var isEven = n => n % 2 === 0;
	     *      var isOdd = R.complement(isEven);
	     *      isOdd(21); //=> true
	     *      isOdd(42); //=> false
	     */
	    var complement = lift(not);

	    /**
	     * Returns the result of concatenating the given lists or strings.
	     *
	     * Note: `R.concat` expects both arguments to be of the same type,
	     * unlike the native `Array.prototype.concat` method. It will throw
	     * an error if you `concat` an Array with a non-Array value.
	     *
	     * Dispatches to the `concat` method of the first argument, if present.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a] -> [a]
	     * @sig String -> String -> String
	     * @param {Array|String} a
	     * @param {Array|String} b
	     * @return {Array|String}
	     *
	     * @example
	     *
	     *      R.concat([], []); //=> []
	     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	     *      R.concat('ABC', 'DEF'); // 'ABCDEF'
	     */
	    var concat = _curry2(function concat(a, b) {
	        if (a == null || !_isFunction(a.concat)) {
	            throw new TypeError(toString(a) + ' does not have a method named "concat"');
	        }
	        if (_isArray(a) && !_isArray(b)) {
	            throw new TypeError(toString(b) + ' is not an array');
	        }
	        return a.concat(b);
	    });

	    /**
	     * A function wrapping calls to the two functions in an `||` operation,
	     * returning the result of the first function if it is truth-y and the result
	     * of the second function otherwise. Note that this is short-circuited,
	     * meaning that the second function will not be invoked if the first returns a
	     * truth-y value.
	     *
	     * In addition to functions, `R.either` also accepts any fantasy-land compatible
	     * applicative functor.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	     * @param {Function} f a predicate
	     * @param {Function} g another predicate
	     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
	     * @see R.or
	     * @example
	     *
	     *      var gt10 = x => x > 10;
	     *      var even = x => x % 2 === 0;
	     *      var f = R.either(gt10, even);
	     *      f(101); //=> true
	     *      f(8); //=> true
	     */
	    var either = _curry2(function either(f, g) {
	        return _isFunction(f) ? function _either() {
	            return f.apply(this, arguments) || g.apply(this, arguments);
	        } : lift(or)(f, g);
	    });

	    /**
	     * Turns a named method with a specified arity into a function that can be
	     * called directly supplied with arguments and a target object.
	     *
	     * The returned function is curried and accepts `arity + 1` parameters where
	     * the final parameter is the target object.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
	     * @param {Number} arity Number of arguments the returned function should take
	     *        before the target object.
	     * @param {String} method Name of the method to call.
	     * @return {Function} A new curried function.
	     * @example
	     *
	     *      var sliceFrom = R.invoker(1, 'slice');
	     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
	     *      var sliceFrom6 = R.invoker(2, 'slice')(6);
	     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
	     */
	    var invoker = _curry2(function invoker(arity, method) {
	        return curryN(arity + 1, function () {
	            var target = arguments[arity];
	            if (target != null && _isFunction(target[method])) {
	                return target[method].apply(target, _slice(arguments, 0, arity));
	            }
	            throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
	        });
	    });

	    /**
	     * Returns a string made by inserting the `separator` between each element and
	     * concatenating all the elements into a single string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig String -> [a] -> String
	     * @param {Number|String} separator The string used to separate the elements.
	     * @param {Array} xs The elements to join into a string.
	     * @return {String} str The string made by concatenating `xs` with `separator`.
	     * @see R.split
	     * @example
	     *
	     *      var spacer = R.join(' ');
	     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
	     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
	     */
	    var join = invoker(1, 'join');

	    /**
	     * Creates a new function that, when invoked, caches the result of calling `fn`
	     * for a given argument set and returns the result. Subsequent calls to the
	     * memoized `fn` with the same argument set will not result in an additional
	     * call to `fn`; instead, the cached result for that set of arguments will be
	     * returned.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Function
	     * @sig (*... -> a) -> (*... -> a)
	     * @param {Function} fn The function to memoize.
	     * @return {Function} Memoized version of `fn`.
	     * @example
	     *
	     *      var count = 0;
	     *      var factorial = R.memoize(n => {
	     *        count += 1;
	     *        return R.product(R.range(1, n + 1));
	     *      });
	     *      factorial(5); //=> 120
	     *      factorial(5); //=> 120
	     *      factorial(5); //=> 120
	     *      count; //=> 1
	     */
	    var memoize = _curry1(function memoize(fn) {
	        var cache = {};
	        return _arity(fn.length, function () {
	            var key = toString(arguments);
	            if (!_has(key, cache)) {
	                cache[key] = fn.apply(this, arguments);
	            }
	            return cache[key];
	        });
	    });

	    /**
	     * Splits a string into an array of strings based on the given
	     * separator.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category String
	     * @sig (String | RegExp) -> String -> [String]
	     * @param {String|RegExp} sep The pattern.
	     * @param {String} str The string to separate into an array.
	     * @return {Array} The array of strings from `str` separated by `str`.
	     * @see R.join
	     * @example
	     *
	     *      var pathComponents = R.split('/');
	     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
	     *
	     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
	     */
	    var split = invoker(1, 'split');

	    /**
	     * Finds the set (i.e. no duplicates) of all elements contained in the first or
	     * second list, but not both.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` or `list2`, but not both.
	     * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
	     * @example
	     *
	     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
	     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
	     */
	    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {
	        return concat(difference(list1, list2), difference(list2, list1));
	    });

	    /**
	     * Finds the set (i.e. no duplicates) of all elements contained in the first or
	     * second list, but not both. Duplication is determined according to the value
	     * returned by applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.19.0
	     * @category Relation
	     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` or `list2`, but not both.
	     * @see R.symmetricDifference, R.difference, R.differenceWith
	     * @example
	     *
	     *      var eqA = R.eqBy(R.prop('a'));
	     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
	     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
	     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
	     */
	    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {
	        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
	    });

	    /**
	     * Determines whether a given string matches a given regular expression.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.12.0
	     * @category String
	     * @sig RegExp -> String -> Boolean
	     * @param {RegExp} pattern
	     * @param {String} str
	     * @return {Boolean}
	     * @see R.match
	     * @example
	     *
	     *      R.test(/^x/, 'xyz'); //=> true
	     *      R.test(/^y/, 'xyz'); //=> false
	     */
	    var test = _curry2(function test(pattern, str) {
	        if (!_isRegExp(pattern)) {
	            throw new TypeError('\u2018test\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));
	        }
	        return _cloneRegExp(pattern).test(str);
	    });

	    /**
	     * The lower case version of a string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to lower case.
	     * @return {String} The lower case version of `str`.
	     * @see R.toUpper
	     * @example
	     *
	     *      R.toLower('XYZ'); //=> 'xyz'
	     */
	    var toLower = invoker(0, 'toLowerCase');

	    /**
	     * The upper case version of a string.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.9.0
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to upper case.
	     * @return {String} The upper case version of `str`.
	     * @see R.toLower
	     * @example
	     *
	     *      R.toUpper('abc'); //=> 'ABC'
	     */
	    var toUpper = invoker(0, 'toUpperCase');

	    /**
	     * Returns a new list containing only one copy of each element in the original
	     * list, based upon the value returned by applying the supplied function to
	     * each list element. Prefers the first item if the supplied function produces
	     * the same value on two items. `R.equals` is used for comparison.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.16.0
	     * @category List
	     * @sig (a -> b) -> [a] -> [a]
	     * @param {Function} fn A function used to produce a value to use during comparisons.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
	     */
	    var uniqBy = _curry2(function uniqBy(fn, list) {
	        var set = new _Set();
	        var result = [];
	        var idx = 0;
	        var appliedItem, item;
	        while (idx < list.length) {
	            item = list[idx];
	            appliedItem = fn(item);
	            if (set.add(appliedItem)) {
	                result.push(item);
	            }
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns a new list containing only one copy of each element in the original
	     * list. `R.equals` is used to determine equality.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
	     *      R.uniq([1, '1']);     //=> [1, '1']
	     *      R.uniq([[42], [42]]); //=> [[42]]
	     */
	    var uniq = uniqBy(identity);

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of those
	     * elements common to both lists.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The list of elements found in both `list1` and `list2`.
	     * @see R.intersectionWith
	     * @example
	     *
	     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
	     */
	    var intersection = _curry2(function intersection(list1, list2) {
	        var lookupList, filteredList;
	        if (list1.length > list2.length) {
	            lookupList = list1;
	            filteredList = list2;
	        } else {
	            lookupList = list2;
	            filteredList = list1;
	        }
	        return uniq(_filter(flip(_contains)(lookupList), filteredList));
	    });

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of the elements
	     * of each list.
	     *
	     * @func
	     * @memberOf R
	     * @since v0.1.0
	     * @category Relation
	     * @sig [*] -> [*] -> [*]
	     * @param {Array} as The first list.
	     * @param {Array} bs The second list.
	     * @return {Array} The first and second lists concatenated, with
	     *         duplicates removed.
	     * @example
	     *
	     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
	     */
	    var union = _curry2(compose(uniq, _concat));

	    var R = {
	        F: F,
	        T: T,
	        __: __,
	        add: add,
	        addIndex: addIndex,
	        adjust: adjust,
	        all: all,
	        allPass: allPass,
	        always: always,
	        and: and,
	        any: any,
	        anyPass: anyPass,
	        ap: ap,
	        aperture: aperture,
	        append: append,
	        apply: apply,
	        applySpec: applySpec,
	        assoc: assoc,
	        assocPath: assocPath,
	        binary: binary,
	        bind: bind,
	        both: both,
	        call: call,
	        chain: chain,
	        clamp: clamp,
	        clone: clone,
	        comparator: comparator,
	        complement: complement,
	        compose: compose,
	        composeK: composeK,
	        composeP: composeP,
	        concat: concat,
	        cond: cond,
	        construct: construct,
	        constructN: constructN,
	        contains: contains,
	        converge: converge,
	        countBy: countBy,
	        curry: curry,
	        curryN: curryN,
	        dec: dec,
	        defaultTo: defaultTo,
	        difference: difference,
	        differenceWith: differenceWith,
	        dissoc: dissoc,
	        dissocPath: dissocPath,
	        divide: divide,
	        drop: drop,
	        dropLast: dropLast,
	        dropLastWhile: dropLastWhile,
	        dropRepeats: dropRepeats,
	        dropRepeatsWith: dropRepeatsWith,
	        dropWhile: dropWhile,
	        either: either,
	        empty: empty,
	        eqBy: eqBy,
	        eqProps: eqProps,
	        equals: equals,
	        evolve: evolve,
	        filter: filter,
	        find: find,
	        findIndex: findIndex,
	        findLast: findLast,
	        findLastIndex: findLastIndex,
	        flatten: flatten,
	        flip: flip,
	        forEach: forEach,
	        fromPairs: fromPairs,
	        groupBy: groupBy,
	        groupWith: groupWith,
	        gt: gt,
	        gte: gte,
	        has: has,
	        hasIn: hasIn,
	        head: head,
	        identical: identical,
	        identity: identity,
	        ifElse: ifElse,
	        inc: inc,
	        indexBy: indexBy,
	        indexOf: indexOf,
	        init: init,
	        insert: insert,
	        insertAll: insertAll,
	        intersection: intersection,
	        intersectionWith: intersectionWith,
	        intersperse: intersperse,
	        into: into,
	        invert: invert,
	        invertObj: invertObj,
	        invoker: invoker,
	        is: is,
	        isArrayLike: isArrayLike,
	        isEmpty: isEmpty,
	        isNil: isNil,
	        join: join,
	        juxt: juxt,
	        keys: keys,
	        keysIn: keysIn,
	        last: last,
	        lastIndexOf: lastIndexOf,
	        length: length,
	        lens: lens,
	        lensIndex: lensIndex,
	        lensPath: lensPath,
	        lensProp: lensProp,
	        lift: lift,
	        liftN: liftN,
	        lt: lt,
	        lte: lte,
	        map: map,
	        mapAccum: mapAccum,
	        mapAccumRight: mapAccumRight,
	        mapObjIndexed: mapObjIndexed,
	        match: match,
	        mathMod: mathMod,
	        max: max,
	        maxBy: maxBy,
	        mean: mean,
	        median: median,
	        memoize: memoize,
	        merge: merge,
	        mergeAll: mergeAll,
	        mergeWith: mergeWith,
	        mergeWithKey: mergeWithKey,
	        min: min,
	        minBy: minBy,
	        modulo: modulo,
	        multiply: multiply,
	        nAry: nAry,
	        negate: negate,
	        none: none,
	        not: not,
	        nth: nth,
	        nthArg: nthArg,
	        objOf: objOf,
	        of: of,
	        omit: omit,
	        once: once,
	        or: or,
	        over: over,
	        pair: pair,
	        partial: partial,
	        partialRight: partialRight,
	        partition: partition,
	        path: path,
	        pathEq: pathEq,
	        pathOr: pathOr,
	        pathSatisfies: pathSatisfies,
	        pick: pick,
	        pickAll: pickAll,
	        pickBy: pickBy,
	        pipe: pipe,
	        pipeK: pipeK,
	        pipeP: pipeP,
	        pluck: pluck,
	        prepend: prepend,
	        product: product,
	        project: project,
	        prop: prop,
	        propEq: propEq,
	        propIs: propIs,
	        propOr: propOr,
	        propSatisfies: propSatisfies,
	        props: props,
	        range: range,
	        reduce: reduce,
	        reduceBy: reduceBy,
	        reduceRight: reduceRight,
	        reduceWhile: reduceWhile,
	        reduced: reduced,
	        reject: reject,
	        remove: remove,
	        repeat: repeat,
	        replace: replace,
	        reverse: reverse,
	        scan: scan,
	        sequence: sequence,
	        set: set,
	        slice: slice,
	        sort: sort,
	        sortBy: sortBy,
	        split: split,
	        splitAt: splitAt,
	        splitEvery: splitEvery,
	        splitWhen: splitWhen,
	        subtract: subtract,
	        sum: sum,
	        symmetricDifference: symmetricDifference,
	        symmetricDifferenceWith: symmetricDifferenceWith,
	        tail: tail,
	        take: take,
	        takeLast: takeLast,
	        takeLastWhile: takeLastWhile,
	        takeWhile: takeWhile,
	        tap: tap,
	        test: test,
	        times: times,
	        toLower: toLower,
	        toPairs: toPairs,
	        toPairsIn: toPairsIn,
	        toString: toString,
	        toUpper: toUpper,
	        transduce: transduce,
	        transpose: transpose,
	        traverse: traverse,
	        trim: trim,
	        tryCatch: tryCatch,
	        type: type,
	        unapply: unapply,
	        unary: unary,
	        uncurryN: uncurryN,
	        unfold: unfold,
	        union: union,
	        unionWith: unionWith,
	        uniq: uniq,
	        uniqBy: uniqBy,
	        uniqWith: uniqWith,
	        unless: unless,
	        unnest: unnest,
	        until: until,
	        update: update,
	        useWith: useWith,
	        values: values,
	        valuesIn: valuesIn,
	        view: view,
	        when: when,
	        where: where,
	        whereEq: whereEq,
	        without: without,
	        wrap: wrap,
	        xprod: xprod,
	        zip: zip,
	        zipObj: zipObj,
	        zipWith: zipWith
	    };
	  /* eslint-env amd */

	  /* TEST_ENTRY_POINT */

	  if (true) {
	    module.exports = R;
	  } else if (typeof define === 'function' && define.amd) {
	    define(function() { return R; });
	  } else {
	    this.R = R;
	  }

	}.call(this));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.multicast = exports.throwError = exports.flatMapError = exports.recoverWith = exports.await = exports.awaitPromises = exports.fromPromise = exports.debounce = exports.throttle = exports.timestamp = exports.delay = exports.during = exports.since = exports.skipUntil = exports.until = exports.takeUntil = exports.skipWhile = exports.takeWhile = exports.slice = exports.skip = exports.take = exports.distinctBy = exports.skipRepeatsWith = exports.distinct = exports.skipRepeats = exports.filter = exports.switch = exports.switchLatest = exports.zipArray = exports.zip = exports.sampleWith = exports.sampleArray = exports.sample = exports.combineArray = exports.combine = exports.mergeArray = exports.merge = exports.mergeConcurrently = exports.concatMap = exports.flatMapEnd = exports.continueWith = exports.join = exports.chain = exports.flatMap = exports.transduce = exports.ap = exports.tap = exports.constant = exports.map = exports.startWith = exports.concat = exports.generate = exports.iterate = exports.unfold = exports.reduce = exports.scan = exports.loop = exports.drain = exports.forEach = exports.observe = exports.fromEvent = exports.periodic = exports.from = exports.never = exports.empty = exports.just = exports.of = exports.Stream = undefined;

	var _fromEvent = __webpack_require__(3);

	Object.defineProperty(exports, 'fromEvent', {
	  enumerable: true,
	  get: function () {
	    return _fromEvent.fromEvent;
	  }
	});

	var _unfold = __webpack_require__(15);

	Object.defineProperty(exports, 'unfold', {
	  enumerable: true,
	  get: function () {
	    return _unfold.unfold;
	  }
	});

	var _iterate = __webpack_require__(16);

	Object.defineProperty(exports, 'iterate', {
	  enumerable: true,
	  get: function () {
	    return _iterate.iterate;
	  }
	});

	var _generate = __webpack_require__(17);

	Object.defineProperty(exports, 'generate', {
	  enumerable: true,
	  get: function () {
	    return _generate.generate;
	  }
	});

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	var _core = __webpack_require__(18);

	var _from = __webpack_require__(21);

	var _periodic = __webpack_require__(31);

	var _symbolObservable = __webpack_require__(26);

	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	var _subscribe = __webpack_require__(32);

	var _thru = __webpack_require__(38);

	var _observe = __webpack_require__(39);

	var _loop = __webpack_require__(46);

	var _accumulate = __webpack_require__(47);

	var _build = __webpack_require__(48);

	var _transform = __webpack_require__(41);

	var _applicative = __webpack_require__(50);

	var _transduce = __webpack_require__(54);

	var _flatMap = __webpack_require__(55);

	var _continueWith = __webpack_require__(49);

	var _concatMap = __webpack_require__(58);

	var _mergeConcurrently = __webpack_require__(56);

	var _merge = __webpack_require__(59);

	var _combine = __webpack_require__(51);

	var _sample = __webpack_require__(60);

	var _zip = __webpack_require__(61);

	var _switch = __webpack_require__(63);

	var _filter = __webpack_require__(64);

	var _slice = __webpack_require__(65);

	var _timeslice = __webpack_require__(66);

	var _delay = __webpack_require__(67);

	var _timestamp = __webpack_require__(68);

	var _limit = __webpack_require__(69);

	var _promises = __webpack_require__(70);

	var _errors = __webpack_require__(71);

	var _multicast = __webpack_require__(73);

	var _multicast2 = _interopRequireDefault(_multicast);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Core stream type
	 * @type {Stream}
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	exports.Stream = _Stream2.default;

	// Add of and empty to constructor for fantasy-land compat

	_Stream2.default.of = _core.of;
	_Stream2.default.empty = _core.empty;
	// Add from to constructor for ES Observable compat
	_Stream2.default.from = _from.from;
	exports.of = _core.of;
	exports.just = _core.of;
	exports.empty = _core.empty;
	exports.never = _core.never;
	exports.from = _from.from;
	exports.periodic = _periodic.periodic;

	// -----------------------------------------------------------------------
	// Draft ES Observable proposal interop
	// https://github.com/zenparsing/es-observable

	_Stream2.default.prototype.subscribe = function (subscriber) {
	  return (0, _subscribe.subscribe)(subscriber, this);
	};

	_Stream2.default.prototype[_symbolObservable2.default] = function () {
	  return this;
	};

	// -----------------------------------------------------------------------
	// Fluent adapter

	/**
	 * Adapt a functional stream transform to fluent style.
	 * It applies f to the this stream object
	 * @param  {function(s: Stream): Stream} f function that
	 * receives the stream itself and must return a new stream
	 * @return {Stream}
	 */
	_Stream2.default.prototype.thru = function (f) {
	  return (0, _thru.thru)(f, this);
	};

	// -----------------------------------------------------------------------
	// Adapting other sources

	/**
	 * Create a stream of events from the supplied EventTarget or EventEmitter
	 * @param {String} event event name
	 * @param {EventTarget|EventEmitter} source EventTarget or EventEmitter. The source
	 *  must support either addEventListener/removeEventListener (w3c EventTarget:
	 *  http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget),
	 *  or addListener/removeListener (node EventEmitter: http://nodejs.org/api/events.html)
	 * @returns {Stream} stream of events of the specified type from the source
	 */


	// -----------------------------------------------------------------------
	// Observing

	exports.observe = _observe.observe;
	exports.forEach = _observe.observe;
	exports.drain = _observe.drain;

	/**
	 * Process all the events in the stream
	 * @returns {Promise} promise that fulfills when the stream ends, or rejects
	 *  if the stream fails with an unhandled error.
	 */

	_Stream2.default.prototype.observe = _Stream2.default.prototype.forEach = function (f) {
	  return (0, _observe.observe)(f, this);
	};

	/**
	 * Consume all events in the stream, without providing a function to process each.
	 * This causes a stream to become active and begin emitting events, and is useful
	 * in cases where all processing has been setup upstream via other combinators, and
	 * there is no need to process the terminal events.
	 * @returns {Promise} promise that fulfills when the stream ends, or rejects
	 *  if the stream fails with an unhandled error.
	 */
	_Stream2.default.prototype.drain = function () {
	  return (0, _observe.drain)(this);
	};

	// -------------------------------------------------------

	exports.loop = _loop.loop;

	/**
	 * Generalized feedback loop. Call a stepper function for each event. The stepper
	 * will be called with 2 params: the current seed and the an event value.  It must
	 * return a new { seed, value } pair. The `seed` will be fed back into the next
	 * invocation of stepper, and the `value` will be propagated as the event value.
	 * @param {function(seed:*, value:*):{seed:*, value:*}} stepper loop step function
	 * @param {*} seed initial seed value passed to first stepper call
	 * @returns {Stream} new stream whose values are the `value` field of the objects
	 * returned by the stepper
	 */

	_Stream2.default.prototype.loop = function (stepper, seed) {
	  return (0, _loop.loop)(stepper, seed, this);
	};

	// -------------------------------------------------------

	exports.scan = _accumulate.scan;
	exports.reduce = _accumulate.reduce;

	/**
	 * Create a stream containing successive reduce results of applying f to
	 * the previous reduce result and the current stream item.
	 * @param {function(result:*, x:*):*} f reducer function
	 * @param {*} initial initial value
	 * @returns {Stream} new stream containing successive reduce results
	 */

	_Stream2.default.prototype.scan = function (f, initial) {
	  return (0, _accumulate.scan)(f, initial, this);
	};

	/**
	 * Reduce the stream to produce a single result.  Note that reducing an infinite
	 * stream will return a Promise that never fulfills, but that may reject if an error
	 * occurs.
	 * @param {function(result:*, x:*):*} f reducer function
	 * @param {*} initial optional initial value
	 * @returns {Promise} promise for the file result of the reduce
	 */
	_Stream2.default.prototype.reduce = function (f, initial) {
	  return (0, _accumulate.reduce)(f, initial, this);
	};

	// -----------------------------------------------------------------------
	// Building and extending

	exports.concat = _build.concat;
	exports.startWith = _build.cons;

	/**
	 * @param {Stream} tail
	 * @returns {Stream} new stream containing all items in this followed by
	 *  all items in tail
	 */

	_Stream2.default.prototype.concat = function (tail) {
	  return (0, _build.concat)(this, tail);
	};

	/**
	 * @param {*} x value to prepend
	 * @returns {Stream} a new stream with x prepended
	 */
	_Stream2.default.prototype.startWith = function (x) {
	  return (0, _build.cons)(x, this);
	};

	// -----------------------------------------------------------------------
	// Transforming

	exports.map = _transform.map;
	exports.constant = _transform.constant;
	exports.tap = _transform.tap;
	exports.ap = _applicative.ap;

	/**
	 * Transform each value in the stream by applying f to each
	 * @param {function(*):*} f mapping function
	 * @returns {Stream} stream containing items transformed by f
	 */

	_Stream2.default.prototype.map = function (f) {
	  return (0, _transform.map)(f, this);
	};

	/**
	 * Assume this stream contains functions, and apply each function to each item
	 * in the provided stream.  This generates, in effect, a cross product.
	 * @param {Stream} xs stream of items to which
	 * @returns {Stream} stream containing the cross product of items
	 */
	_Stream2.default.prototype.ap = function (xs) {
	  return (0, _applicative.ap)(this, xs);
	};

	/**
	 * Replace each value in the stream with x
	 * @param {*} x
	 * @returns {Stream} stream containing items replaced with x
	 */
	_Stream2.default.prototype.constant = function (x) {
	  return (0, _transform.constant)(x, this);
	};

	/**
	 * Perform a side effect for each item in the stream
	 * @param {function(x:*):*} f side effect to execute for each item. The
	 *  return value will be discarded.
	 * @returns {Stream} new stream containing the same items as this stream
	 */
	_Stream2.default.prototype.tap = function (f) {
	  return (0, _transform.tap)(f, this);
	};

	// -----------------------------------------------------------------------
	// Transducer support

	exports.transduce = _transduce.transduce;

	/**
	 * Transform this stream by passing its events through a transducer.
	 * @param  {function} transducer transducer function
	 * @return {Stream} stream of events transformed by the transducer
	 */

	_Stream2.default.prototype.transduce = function (transducer) {
	  return (0, _transduce.transduce)(transducer, this);
	};

	// -----------------------------------------------------------------------
	// FlatMapping

	exports.flatMap = _flatMap.flatMap;
	exports.chain = _flatMap.flatMap;
	exports.join = _flatMap.join;

	/**
	 * Map each value in the stream to a new stream, and merge it into the
	 * returned outer stream. Event arrival times are preserved.
	 * @param {function(x:*):Stream} f chaining function, must return a Stream
	 * @returns {Stream} new stream containing all events from each stream returned by f
	 */

	_Stream2.default.prototype.flatMap = _Stream2.default.prototype.chain = function (f) {
	  return (0, _flatMap.flatMap)(f, this);
	};

	/**
	 * Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner
	 * streams to the outer. Event arrival times are preserved.
	 * @returns {Stream<X>} new stream containing all events of all inner streams
	 */
	_Stream2.default.prototype.join = function () {
	  return (0, _flatMap.join)(this);
	};

	exports.continueWith = _continueWith.continueWith;
	exports.flatMapEnd = _continueWith.continueWith;

	/**
	 * Map the end event to a new stream, and begin emitting its values.
	 * @param {function(x:*):Stream} f function that receives the end event value,
	 * and *must* return a new Stream to continue with.
	 * @returns {Stream} new stream that emits all events from the original stream,
	 * followed by all events from the stream returned by f.
	 */

	_Stream2.default.prototype.continueWith = _Stream2.default.prototype.flatMapEnd = function (f) {
	  return (0, _continueWith.continueWith)(f, this);
	};

	exports.concatMap = _concatMap.concatMap;


	_Stream2.default.prototype.concatMap = function (f) {
	  return (0, _concatMap.concatMap)(f, this);
	};

	// -----------------------------------------------------------------------
	// Concurrent merging

	exports.mergeConcurrently = _mergeConcurrently.mergeConcurrently;

	/**
	 * Flatten a Stream<Stream<X>> to Stream<X> by merging inner
	 * streams to the outer, limiting the number of inner streams that may
	 * be active concurrently.
	 * @param {number} concurrency at most this many inner streams will be
	 *  allowed to be active concurrently.
	 * @return {Stream<X>} new stream containing all events of all inner
	 *  streams, with limited concurrency.
	 */

	_Stream2.default.prototype.mergeConcurrently = function (concurrency) {
	  return (0, _mergeConcurrently.mergeConcurrently)(concurrency, this);
	};

	// -----------------------------------------------------------------------
	// Merging

	exports.merge = _merge.merge;
	exports.mergeArray = _merge.mergeArray;

	/**
	 * Merge this stream and all the provided streams
	 * @returns {Stream} stream containing items from this stream and s in time
	 * order.  If two events are simultaneous they will be merged in
	 * arbitrary order.
	 */

	_Stream2.default.prototype.merge = function () /* ...streams*/{
	  return (0, _merge.mergeArray)(base.cons(this, arguments));
	};

	// -----------------------------------------------------------------------
	// Combining

	exports.combine = _combine.combine;
	exports.combineArray = _combine.combineArray;

	/**
	 * Combine latest events from all input streams
	 * @param {function(...events):*} f function to combine most recent events
	 * @returns {Stream} stream containing the result of applying f to the most recent
	 *  event of each input stream, whenever a new event arrives on any stream.
	 */

	_Stream2.default.prototype.combine = function (f /*, ...streams*/) {
	  return (0, _combine.combineArray)(f, base.replace(this, 0, arguments));
	};

	// -----------------------------------------------------------------------
	// Sampling

	exports.sample = _sample.sample;
	exports.sampleArray = _sample.sampleArray;
	exports.sampleWith = _sample.sampleWith;

	/**
	 * When an event arrives on sampler, emit the latest event value from stream.
	 * @param {Stream} sampler stream of events at whose arrival time
	 *  signal's latest value will be propagated
	 * @returns {Stream} sampled stream of values
	 */

	_Stream2.default.prototype.sampleWith = function (sampler) {
	  return (0, _sample.sampleWith)(sampler, this);
	};

	/**
	 * When an event arrives on this stream, emit the result of calling f with the latest
	 * values of all streams being sampled
	 * @param {function(...values):*} f function to apply to each set of sampled values
	 * @returns {Stream} stream of sampled and transformed values
	 */
	_Stream2.default.prototype.sample = function (f /* ...streams */) {
	  return (0, _sample.sampleArray)(f, this, base.tail(arguments));
	};

	// -----------------------------------------------------------------------
	// Zipping

	exports.zip = _zip.zip;
	exports.zipArray = _zip.zipArray;

	/**
	 * Pair-wise combine items with those in s. Given 2 streams:
	 * [1,2,3] zipWith f [4,5,6] -> [f(1,4),f(2,5),f(3,6)]
	 * Note: zip causes fast streams to buffer and wait for slow streams.
	 * @param {function(a:Stream, b:Stream, ...):*} f function to combine items
	 * @returns {Stream} new stream containing pairs
	 */

	_Stream2.default.prototype.zip = function (f /*, ...streams*/) {
	  return (0, _zip.zipArray)(f, base.replace(this, 0, arguments));
	};

	// -----------------------------------------------------------------------
	// Switching

	exports.switchLatest = _switch.switchLatest;
	exports.switch = _switch.switchLatest;

	/**
	 * Given a stream of streams, return a new stream that adopts the behavior
	 * of the most recent inner stream.
	 * @returns {Stream} switching stream
	 */

	_Stream2.default.prototype.switch = _Stream2.default.prototype.switchLatest = function () {
	  return (0, _switch.switchLatest)(this);
	};

	// -----------------------------------------------------------------------
	// Filtering

	exports.filter = _filter.filter;
	exports.skipRepeats = _filter.skipRepeats;
	exports.distinct = _filter.skipRepeats;
	exports.skipRepeatsWith = _filter.skipRepeatsWith;
	exports.distinctBy = _filter.skipRepeatsWith;

	/**
	 * Retain only items matching a predicate
	 * stream:                           -12345678-
	 * filter(x => x % 2 === 0, stream): --2-4-6-8-
	 * @param {function(x:*):boolean} p filtering predicate called for each item
	 * @returns {Stream} stream containing only items for which predicate returns truthy
	 */

	_Stream2.default.prototype.filter = function (p) {
	  return (0, _filter.filter)(p, this);
	};

	/**
	 * Skip repeated events, using === to compare items
	 * stream:           -abbcd-
	 * distinct(stream): -ab-cd-
	 * @returns {Stream} stream with no repeated events
	 */
	_Stream2.default.prototype.skipRepeats = function () {
	  return (0, _filter.skipRepeats)(this);
	};

	/**
	 * Skip repeated events, using supplied equals function to compare items
	 * @param {function(a:*, b:*):boolean} equals function to compare items
	 * @returns {Stream} stream with no repeated events
	 */
	_Stream2.default.prototype.skipRepeatsWith = function (equals) {
	  return (0, _filter.skipRepeatsWith)(equals, this);
	};

	// -----------------------------------------------------------------------
	// Slicing

	exports.take = _slice.take;
	exports.skip = _slice.skip;
	exports.slice = _slice.slice;
	exports.takeWhile = _slice.takeWhile;
	exports.skipWhile = _slice.skipWhile;

	/**
	 * stream:          -abcd-
	 * take(2, stream): -ab|
	 * @param {Number} n take up to this many events
	 * @returns {Stream} stream containing at most the first n items from this stream
	 */

	_Stream2.default.prototype.take = function (n) {
	  return (0, _slice.take)(n, this);
	};

	/**
	 * stream:          -abcd->
	 * skip(2, stream): ---cd->
	 * @param {Number} n skip this many events
	 * @returns {Stream} stream not containing the first n events
	 */
	_Stream2.default.prototype.skip = function (n) {
	  return (0, _slice.skip)(n, this);
	};

	/**
	 * Slice a stream by event index. Equivalent to, but more efficient than
	 * stream.take(end).skip(start);
	 * NOTE: Negative start and end are not supported
	 * @param {Number} start skip all events before the start index
	 * @param {Number} end allow all events from the start index to the end index
	 * @returns {Stream} stream containing items where start <= index < end
	 */
	_Stream2.default.prototype.slice = function (start, end) {
	  return (0, _slice.slice)(start, end, this);
	};

	/**
	 * stream:                        -123451234->
	 * takeWhile(x => x < 5, stream): -1234|
	 * @param {function(x:*):boolean} p predicate
	 * @returns {Stream} stream containing items up to, but not including, the
	 * first item for which p returns falsy.
	 */
	_Stream2.default.prototype.takeWhile = function (p) {
	  return (0, _slice.takeWhile)(p, this);
	};

	/**
	 * stream:                        -123451234->
	 * skipWhile(x => x < 5, stream): -----51234->
	 * @param {function(x:*):boolean} p predicate
	 * @returns {Stream} stream containing items following *and including* the
	 * first item for which p returns falsy.
	 */
	_Stream2.default.prototype.skipWhile = function (p) {
	  return (0, _slice.skipWhile)(p, this);
	};

	// -----------------------------------------------------------------------
	// Time slicing

	exports.takeUntil = _timeslice.takeUntil;
	exports.until = _timeslice.takeUntil;
	exports.skipUntil = _timeslice.skipUntil;
	exports.since = _timeslice.skipUntil;
	exports.during = _timeslice.during;

	/**
	 * stream:                    -a-b-c-d-e-f-g->
	 * signal:                    -------x
	 * takeUntil(signal, stream): -a-b-c-|
	 * @param {Stream} signal retain only events in stream before the first
	 * event in signal
	 * @returns {Stream} new stream containing only events that occur before
	 * the first event in signal.
	 */

	_Stream2.default.prototype.until = _Stream2.default.prototype.takeUntil = function (signal) {
	  return (0, _timeslice.takeUntil)(signal, this);
	};

	/**
	 * stream:                    -a-b-c-d-e-f-g->
	 * signal:                    -------x
	 * takeUntil(signal, stream): -------d-e-f-g->
	 * @param {Stream} signal retain only events in stream at or after the first
	 * event in signal
	 * @returns {Stream} new stream containing only events that occur after
	 * the first event in signal.
	 */
	_Stream2.default.prototype.since = _Stream2.default.prototype.skipUntil = function (signal) {
	  return (0, _timeslice.skipUntil)(signal, this);
	};

	/**
	 * stream:                    -a-b-c-d-e-f-g->
	 * timeWindow:                -----s
	 * s:                               -----t
	 * stream.during(timeWindow): -----c-d-e-|
	 * @param {Stream<Stream>} timeWindow a stream whose first event (s) represents
	 *  the window start time.  That event (s) is itself a stream whose first event (t)
	 *  represents the window end time
	 * @returns {Stream} new stream containing only events within the provided timespan
	 */
	_Stream2.default.prototype.during = function (timeWindow) {
	  return (0, _timeslice.during)(timeWindow, this);
	};

	// -----------------------------------------------------------------------
	// Delaying

	exports.delay = _delay.delay;

	/**
	 * @param {Number} delayTime milliseconds to delay each item
	 * @returns {Stream} new stream containing the same items, but delayed by ms
	 */

	_Stream2.default.prototype.delay = function (delayTime) {
	  return (0, _delay.delay)(delayTime, this);
	};

	// -----------------------------------------------------------------------
	// Getting event timestamp

	exports.timestamp = _timestamp.timestamp;

	/**
	 * Expose event timestamps into the stream. Turns a Stream<X> into
	 * Stream<{time:t, value:X}>
	 * @returns {Stream<{time:number, value:*}>}
	 */

	_Stream2.default.prototype.timestamp = function () {
	  return (0, _timestamp.timestamp)(this);
	};

	// -----------------------------------------------------------------------
	// Rate limiting

	exports.throttle = _limit.throttle;
	exports.debounce = _limit.debounce;

	/**
	 * Limit the rate of events
	 * stream:              abcd----abcd----
	 * throttle(2, stream): a-c-----a-c-----
	 * @param {Number} period time to suppress events
	 * @returns {Stream} new stream that skips events for throttle period
	 */

	_Stream2.default.prototype.throttle = function (period) {
	  return (0, _limit.throttle)(period, this);
	};

	/**
	 * Wait for a burst of events to subside and emit only the last event in the burst
	 * stream:              abcd----abcd----
	 * debounce(2, stream): -----d-------d--
	 * @param {Number} period events occuring more frequently than this
	 *  on the provided scheduler will be suppressed
	 * @returns {Stream} new debounced stream
	 */
	_Stream2.default.prototype.debounce = function (period) {
	  return (0, _limit.debounce)(period, this);
	};

	// -----------------------------------------------------------------------
	// Awaiting Promises

	exports.fromPromise = _promises.fromPromise;
	exports.awaitPromises = _promises.awaitPromises;
	exports.await = _promises.awaitPromises;

	/**
	 * Await promises, turning a Stream<Promise<X>> into Stream<X>.  Preserves
	 * event order, but timeshifts events based on promise resolution time.
	 * @returns {Stream<X>} stream containing non-promise values
	 */

	_Stream2.default.prototype.await = function () {
	  return (0, _promises.awaitPromises)(this);
	};

	// -----------------------------------------------------------------------
	// Error handling

	exports.recoverWith = _errors.recoverWith;
	exports.flatMapError = _errors.flatMapError;
	exports.throwError = _errors.throwError;

	/**
	 * If this stream encounters an error, recover and continue with items from stream
	 * returned by f.
	 * stream:                  -a-b-c-X-
	 * f(X):                           d-e-f-g-
	 * flatMapError(f, stream): -a-b-c-d-e-f-g-
	 * @param {function(error:*):Stream} f function which returns a new stream
	 * @returns {Stream} new stream which will recover from an error by calling f
	 */

	_Stream2.default.prototype.recoverWith = _Stream2.default.prototype.flatMapError = function (f) {
	  return (0, _errors.flatMapError)(f, this);
	};

	// -----------------------------------------------------------------------
	// Multicasting

	exports.multicast = _multicast2.default;

	/**
	 * Transform the stream into multicast stream.  That means that many subscribers
	 * to the stream will not cause multiple invocations of the internal machinery.
	 * @returns {Stream} new stream which will multicast events to all observers.
	 */

	_Stream2.default.prototype.multicast = function () {
	  return (0, _multicast2.default)(this);
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fromEvent = fromEvent;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _EventTargetSource = __webpack_require__(5);

	var _EventTargetSource2 = _interopRequireDefault(_EventTargetSource);

	var _EventEmitterSource = __webpack_require__(12);

	var _EventEmitterSource2 = _interopRequireDefault(_EventEmitterSource);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Create a stream from an EventTarget, such as a DOM Node, or EventEmitter.
	 * @param {String} event event type name, e.g. 'click'
	 * @param {EventTarget|EventEmitter} source EventTarget or EventEmitter
	 * @param {*?} capture for DOM events, whether to use
	 *  capturing--passed as 3rd parameter to addEventListener.
	 * @returns {Stream} stream containing all events of the specified type
	 * from the source.
	 */
	function fromEvent(event, source, capture) {
	  // eslint-disable-line complexity
	  var s;

	  if (typeof source.addEventListener === 'function' && typeof source.removeEventListener === 'function') {
	    if (arguments.length < 3) {
	      capture = false;
	    }

	    s = new _EventTargetSource2.default(event, source, capture);
	  } else if (typeof source.addListener === 'function' && typeof source.removeListener === 'function') {
	    s = new _EventEmitterSource2.default(event, source);
	  } else {
	    throw new Error('source must support addEventListener/removeEventListener or addListener/removeListener');
	  }

	  return new _Stream2.default(s);
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Stream;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function Stream(source) {
	  this.source = source;
	}

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = EventTargetSource;

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _tryEvent = __webpack_require__(11);

	var tryEvent = _interopRequireWildcard(_tryEvent);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function EventTargetSource(event, source, capture) {
	  this.event = event;
	  this.source = source;
	  this.capture = capture;
	}

	EventTargetSource.prototype.run = function (sink, scheduler) {
	  function addEvent(e) {
	    tryEvent.tryEvent(scheduler.now(), e, sink);
	  }

	  this.source.addEventListener(this.event, addEvent, this.capture);

	  return dispose.create(disposeEventTarget, { target: this, addEvent: addEvent });
	};

	function disposeEventTarget(info) {
	  var target = info.target;
	  target.source.removeEventListener(target.event, info.addEvent, target.capture);
	}

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.tryDispose = tryDispose;
	exports.create = create;
	exports.empty = empty;
	exports.all = all;
	exports.promised = promised;
	exports.settable = settable;
	exports.once = once;

	var _Disposable = __webpack_require__(7);

	var _Disposable2 = _interopRequireDefault(_Disposable);

	var _SettableDisposable = __webpack_require__(8);

	var _SettableDisposable2 = _interopRequireDefault(_SettableDisposable);

	var _Promise = __webpack_require__(9);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */
	var map = base.map;
	var identity = base.id;

	/**
	 * Call disposable.dispose.  If it returns a promise, catch promise
	 * error and forward it through the provided sink.
	 * @param {number} t time
	 * @param {{dispose: function}} disposable
	 * @param {{error: function}} sink
	 * @return {*} result of disposable.dispose
	 */
	function tryDispose(t, disposable, sink) {
	  var result = disposeSafely(disposable);
	  return (0, _Promise.isPromise)(result) ? result.catch(function (e) {
	    sink.error(t, e);
	  }) : result;
	}

	/**
	 * Create a new Disposable which will dispose its underlying resource
	 * at most once.
	 * @param {function} dispose function
	 * @param {*?} data any data to be passed to disposer function
	 * @return {Disposable}
	 */
	function create(dispose, data) {
	  return once(new _Disposable2.default(dispose, data));
	}

	/**
	 * Create a noop disposable. Can be used to satisfy a Disposable
	 * requirement when no actual resource needs to be disposed.
	 * @return {Disposable|exports|module.exports}
	 */
	function empty() {
	  return new _Disposable2.default(identity, void 0);
	}

	/**
	 * Create a disposable that will dispose all input disposables in parallel.
	 * @param {Array<Disposable>} disposables
	 * @return {Disposable}
	 */
	function all(disposables) {
	  return create(disposeAll, disposables);
	}

	function disposeAll(disposables) {
	  return Promise.all(map(disposeSafely, disposables));
	}

	function disposeSafely(disposable) {
	  try {
	    return disposable.dispose();
	  } catch (e) {
	    return Promise.reject(e);
	  }
	}

	/**
	 * Create a disposable from a promise for another disposable
	 * @param {Promise<Disposable>} disposablePromise
	 * @return {Disposable}
	 */
	function promised(disposablePromise) {
	  return create(disposePromise, disposablePromise);
	}

	function disposePromise(disposablePromise) {
	  return disposablePromise.then(disposeOne);
	}

	function disposeOne(disposable) {
	  return disposable.dispose();
	}

	/**
	 * Create a disposable proxy that allows its underlying disposable to
	 * be set later.
	 * @return {SettableDisposable}
	 */
	function settable() {
	  return new _SettableDisposable2.default();
	}

	/**
	 * Wrap an existing disposable (which may not already have been once()d)
	 * so that it will only dispose its underlying resource at most once.
	 * @param {{ dispose: function() }} disposable
	 * @return {Disposable} wrapped disposable
	 */
	function once(disposable) {
	  return new _Disposable2.default(disposeMemoized, memoized(disposable));
	}

	function disposeMemoized(memoized) {
	  if (!memoized.disposed) {
	    memoized.disposed = true;
	    memoized.value = disposeSafely(memoized.disposable);
	    memoized.disposable = void 0;
	  }

	  return memoized.value;
	}

	function memoized(disposable) {
	  return { disposed: false, disposable: disposable, value: void 0 };
	}

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Disposable;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	/**
	 * Create a new Disposable which will dispose its underlying resource.
	 * @param {function} dispose function
	 * @param {*?} data any data to be passed to disposer function
	 * @constructor
	 */
	function Disposable(dispose, data) {
	  this._dispose = dispose;
	  this._data = data;
	}

	Disposable.prototype.dispose = function () {
	  return this._dispose(this._data);
	};

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = SettableDisposable;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function SettableDisposable() {
	  this.disposable = void 0;
	  this.disposed = false;
	  this._resolve = void 0;

	  var self = this;
	  this.result = new Promise(function (resolve) {
	    self._resolve = resolve;
	  });
	}

	SettableDisposable.prototype.setDisposable = function (disposable) {
	  if (this.disposable !== void 0) {
	    throw new Error('setDisposable called more than once');
	  }

	  this.disposable = disposable;

	  if (this.disposed) {
	    this._resolve(disposable.dispose());
	  }
	};

	SettableDisposable.prototype.dispose = function () {
	  if (this.disposed) {
	    return this.result;
	  }

	  this.disposed = true;

	  if (this.disposable !== void 0) {
	    this.result = this.disposable.dispose();
	  }

	  return this.result;
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isPromise = isPromise;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function isPromise(p) {
	  return p !== null && typeof p === 'object' && typeof p.then === 'function';
	}

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.mostPrelude = global.mostPrelude || {})));
	}(this, (function (exports) { 'use strict';

	/** @license MIT License (c) copyright 2010-2016 original author or authors */

	// Non-mutating array operations

	// cons :: a -> [a] -> [a]
	// a with x prepended
	function cons (x, a) {
	  var l = a.length
	  var b = new Array(l + 1)
	  b[0] = x
	  for (var i = 0; i < l; ++i) {
	    b[i + 1] = a[i]
	  }
	  return b
	}

	// append :: a -> [a] -> [a]
	// a with x appended
	function append (x, a) {
	  var l = a.length
	  var b = new Array(l + 1)
	  for (var i = 0; i < l; ++i) {
	    b[i] = a[i]
	  }

	  b[l] = x
	  return b
	}

	// drop :: Int -> [a] -> [a]
	// drop first n elements
	function drop (n, a) { // eslint-disable-line complexity
	  if (n < 0) {
	    throw new TypeError('n must be >= 0')
	  }

	  var l = a.length
	  if (n === 0 || l === 0) {
	    return a
	  }

	  if (n >= l) {
	    return []
	  }

	  return unsafeDrop(n, a, l - n)
	}

	// unsafeDrop :: Int -> [a] -> Int -> [a]
	// Internal helper for drop
	function unsafeDrop (n, a, l) {
	  var b = new Array(l)
	  for (var i = 0; i < l; ++i) {
	    b[i] = a[n + i]
	  }
	  return b
	}

	// tail :: [a] -> [a]
	// drop head element
	function tail (a) {
	  return drop(1, a)
	}

	// copy :: [a] -> [a]
	// duplicate a (shallow duplication)
	function copy (a) {
	  var l = a.length
	  var b = new Array(l)
	  for (var i = 0; i < l; ++i) {
	    b[i] = a[i]
	  }
	  return b
	}

	// map :: (a -> b) -> [a] -> [b]
	// transform each element with f
	function map (f, a) {
	  var l = a.length
	  var b = new Array(l)
	  for (var i = 0; i < l; ++i) {
	    b[i] = f(a[i])
	  }
	  return b
	}

	// reduce :: (a -> b -> a) -> a -> [b] -> a
	// accumulate via left-fold
	function reduce (f, z, a) {
	  var r = z
	  for (var i = 0, l = a.length; i < l; ++i) {
	    r = f(r, a[i], i)
	  }
	  return r
	}

	// replace :: a -> Int -> [a]
	// replace element at index
	function replace (x, i, a) { // eslint-disable-line complexity
	  if (i < 0) {
	    throw new TypeError('i must be >= 0')
	  }

	  var l = a.length
	  var b = new Array(l)
	  for (var j = 0; j < l; ++j) {
	    b[j] = i === j ? x : a[j]
	  }
	  return b
	}

	// remove :: Int -> [a] -> [a]
	// remove element at index
	function remove (i, a) {  // eslint-disable-line complexity
	  if (i < 0) {
	    throw new TypeError('i must be >= 0')
	  }

	  var l = a.length
	  if (l === 0 || i >= l) { // exit early if index beyond end of array
	    return a
	  }

	  if (l === 1) { // exit early if index in bounds and length === 1
	    return []
	  }

	  return unsafeRemove(i, a, l - 1)
	}

	// unsafeRemove :: Int -> [a] -> Int -> [a]
	// Internal helper to remove element at index
	function unsafeRemove (i, a, l) {
	  var b = new Array(l)
	  var j
	  for (j = 0; j < i; ++j) {
	    b[j] = a[j]
	  }
	  for (j = i; j < l; ++j) {
	    b[j] = a[j + 1]
	  }

	  return b
	}

	// removeAll :: (a -> boolean) -> [a] -> [a]
	// remove all elements matching a predicate
	function removeAll (f, a) {
	  var l = a.length
	  var b = new Array(l)
	  var j = 0
	  for (var x, i = 0; i < l; ++i) {
	    x = a[i]
	    if (!f(x)) {
	      b[j] = x
	      ++j
	    }
	  }

	  b.length = j
	  return b
	}

	// findIndex :: a -> [a] -> Int
	// find index of x in a, from the left
	function findIndex (x, a) {
	  for (var i = 0, l = a.length; i < l; ++i) {
	    if (x === a[i]) {
	      return i
	    }
	  }
	  return -1
	}

	// isArrayLike :: * -> boolean
	// Return true iff x is array-like
	function isArrayLike (x) {
	  return x != null && typeof x.length === 'number' && typeof x !== 'function'
	}

	/** @license MIT License (c) copyright 2010-2016 original author or authors */

	// id :: a -> a
	var id = function (x) { return x; }

	// compose :: (b -> c) -> (a -> b) -> (a -> c)
	var compose = function (f, g) { return function (x) { return f(g(x)); }; }

	// apply :: (a -> b) -> a -> b
	var apply = function (f, x) { return f(x); }

	// curry2 :: ((a, b) -> c) -> (a -> b -> c)
	function curry2 (f) {
	  function curried (a, b) {
	    switch (arguments.length) {
	      case 0: return curried
	      case 1: return function (b) { return f(a, b); }
	      default: return f(a, b)
	    }
	  }
	  return curried
	}

	// curry3 :: ((a, b, c) -> d) -> (a -> b -> c -> d)
	function curry3 (f) {
	  function curried (a, b, c) { // eslint-disable-line complexity
	    switch (arguments.length) {
	      case 0: return curried
	      case 1: return curry2(function (b, c) { return f(a, b, c); })
	      case 2: return function (c) { return f(a, b, c); }
	      default:return f(a, b, c)
	    }
	  }
	  return curried
	}

	exports.cons = cons;
	exports.append = append;
	exports.drop = drop;
	exports.tail = tail;
	exports.copy = copy;
	exports.map = map;
	exports.reduce = reduce;
	exports.replace = replace;
	exports.remove = remove;
	exports.removeAll = removeAll;
	exports.findIndex = findIndex;
	exports.isArrayLike = isArrayLike;
	exports.id = id;
	exports.compose = compose;
	exports.apply = apply;
	exports.curry2 = curry2;
	exports.curry3 = curry3;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=prelude.js.map


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.tryEvent = tryEvent;
	exports.tryEnd = tryEnd;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function tryEvent(t, x, sink) {
	  try {
	    sink.event(t, x);
	  } catch (e) {
	    sink.error(t, e);
	  }
	}

	function tryEnd(t, x, sink) {
	  try {
	    sink.end(t, x);
	  } catch (e) {
	    sink.error(t, e);
	  }
	}

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = EventEmitterSource;

	var _DeferredSink = __webpack_require__(13);

	var _DeferredSink2 = _interopRequireDefault(_DeferredSink);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _tryEvent = __webpack_require__(11);

	var tryEvent = _interopRequireWildcard(_tryEvent);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function EventEmitterSource(event, source) {
	  this.event = event;
	  this.source = source;
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	EventEmitterSource.prototype.run = function (sink, scheduler) {
	  // NOTE: Because EventEmitter allows events in the same call stack as
	  // a listener is added, use a DeferredSink to buffer events
	  // until the stack clears, then propagate.  This maintains most.js's
	  // invariant that no event will be delivered in the same call stack
	  // as an observer begins observing.
	  var dsink = new _DeferredSink2.default(sink);

	  function addEventVariadic(a) {
	    var arguments$1 = arguments;

	    var l = arguments.length;
	    if (l > 1) {
	      var arr = new Array(l);
	      for (var i = 0; i < l; ++i) {
	        arr[i] = arguments$1[i];
	      }
	      tryEvent.tryEvent(scheduler.now(), arr, dsink);
	    } else {
	      tryEvent.tryEvent(scheduler.now(), a, dsink);
	    }
	  }

	  this.source.addListener(this.event, addEventVariadic);

	  return dispose.create(disposeEventEmitter, { target: this, addEvent: addEventVariadic });
	};

	function disposeEventEmitter(info) {
	  var target = info.target;
	  target.source.removeListener(target.event, info.addEvent);
	}

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = DeferredSink;

	var _task = __webpack_require__(14);

	function DeferredSink(sink) {
	  this.sink = sink;
	  this.events = [];
	  this.active = true;
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	DeferredSink.prototype.event = function (t, x) {
	  if (!this.active) {
	    return;
	  }

	  if (this.events.length === 0) {
	    (0, _task.defer)(new PropagateAllTask(this.sink, t, this.events));
	  }

	  this.events.push({ time: t, value: x });
	};

	DeferredSink.prototype.end = function (t, x) {
	  if (!this.active) {
	    return;
	  }

	  this._end(new EndTask(t, x, this.sink));
	};

	DeferredSink.prototype.error = function (t, e) {
	  this._end(new ErrorTask(t, e, this.sink));
	};

	DeferredSink.prototype._end = function (task) {
	  this.active = false;
	  (0, _task.defer)(task);
	};

	function PropagateAllTask(sink, time, events) {
	  this.sink = sink;
	  this.events = events;
	  this.time = time;
	}

	PropagateAllTask.prototype.run = function () {
	  var this$1 = this;

	  var events = this.events;
	  var sink = this.sink;
	  var event;

	  for (var i = 0, l = events.length; i < l; ++i) {
	    event = events[i];
	    this$1.time = event.time;
	    sink.event(event.time, event.value);
	  }

	  events.length = 0;
	};

	PropagateAllTask.prototype.error = function (e) {
	  this.sink.error(this.time, e);
	};

	function EndTask(t, x, sink) {
	  this.time = t;
	  this.value = x;
	  this.sink = sink;
	}

	EndTask.prototype.run = function () {
	  this.sink.end(this.time, this.value);
	};

	EndTask.prototype.error = function (e) {
	  this.sink.error(this.time, e);
	};

	function ErrorTask(t, e, sink) {
	  this.time = t;
	  this.value = e;
	  this.sink = sink;
	}

	ErrorTask.prototype.run = function () {
	  this.sink.error(this.time, this.value);
	};

	ErrorTask.prototype.error = function (e) {
	  throw e;
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.defer = defer;
	exports.runTask = runTask;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function defer(task) {
	  return Promise.resolve(task).then(runTask);
	}

	function runTask(task) {
	  try {
	    return task.run();
	  } catch (e) {
	    return task.error(e);
	  }
	}

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.unfold = unfold;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Compute a stream by unfolding tuples of future values from a seed value
	 * Event times may be controlled by returning a Promise from f
	 * @param {function(seed:*):{value:*, seed:*, done:boolean}|Promise<{value:*, seed:*, done:boolean}>} f unfolding function accepts
	 *  a seed and returns a new tuple with a value, new seed, and boolean done flag.
	 *  If tuple.done is true, the stream will end.
	 * @param {*} seed seed value
	 * @returns {Stream} stream containing all value of all tuples produced by the
	 *  unfolding function.
	 */
	function unfold(f, seed) {
	  return new _Stream2.default(new UnfoldSource(f, seed));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function UnfoldSource(f, seed) {
	  this.f = f;
	  this.value = seed;
	}

	UnfoldSource.prototype.run = function (sink, scheduler) {
	  return new Unfold(this.f, this.value, sink, scheduler);
	};

	function Unfold(f, x, sink, scheduler) {
	  this.f = f;
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.active = true;

	  var self = this;
	  function err(e) {
	    self.sink.error(self.scheduler.now(), e);
	  }

	  function start(unfold) {
	    return stepUnfold(unfold, x);
	  }

	  Promise.resolve(this).then(start).catch(err);
	}

	Unfold.prototype.dispose = function () {
	  this.active = false;
	};

	function stepUnfold(unfold, x) {
	  var f = unfold.f;
	  return Promise.resolve(f(x)).then(function (tuple) {
	    return continueUnfold(unfold, tuple);
	  });
	}

	function continueUnfold(unfold, tuple) {
	  if (tuple.done) {
	    unfold.sink.end(unfold.scheduler.now(), tuple.value);
	    return tuple.value;
	  }

	  unfold.sink.event(unfold.scheduler.now(), tuple.value);

	  if (!unfold.active) {
	    return tuple.value;
	  }
	  return stepUnfold(unfold, tuple.seed);
	}

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.iterate = iterate;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Compute a stream by iteratively calling f to produce values
	 * Event times may be controlled by returning a Promise from f
	 * @param {function(x:*):*|Promise<*>} f
	 * @param {*} x initial value
	 * @returns {Stream}
	 */
	function iterate(f, x) {
	  return new _Stream2.default(new IterateSource(f, x));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function IterateSource(f, x) {
	  this.f = f;
	  this.value = x;
	}

	IterateSource.prototype.run = function (sink, scheduler) {
	  return new Iterate(this.f, this.value, sink, scheduler);
	};

	function Iterate(f, initial, sink, scheduler) {
	  this.f = f;
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.active = true;

	  var x = initial;

	  var self = this;
	  function err(e) {
	    self.sink.error(self.scheduler.now(), e);
	  }

	  function start(iterate) {
	    return stepIterate(iterate, x);
	  }

	  Promise.resolve(this).then(start).catch(err);
	}

	Iterate.prototype.dispose = function () {
	  this.active = false;
	};

	function stepIterate(iterate, x) {
	  iterate.sink.event(iterate.scheduler.now(), x);

	  if (!iterate.active) {
	    return x;
	  }

	  var f = iterate.f;
	  return Promise.resolve(f(x)).then(function (y) {
	    return continueIterate(iterate, y);
	  });
	}

	function continueIterate(iterate, x) {
	  return !iterate.active ? iterate.value : stepIterate(iterate, x);
	}

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.generate = generate;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Compute a stream using an *async* generator, which yields promises
	 * to control event times.
	 * @param f
	 * @returns {Stream}
	 */
	/** @license MIT License (c) copyright 2010-2014 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function generate(f /*, ...args */) {
	  return new _Stream2.default(new GenerateSource(f, base.tail(arguments)));
	}

	function GenerateSource(f, args) {
	  this.f = f;
	  this.args = args;
	}

	GenerateSource.prototype.run = function (sink, scheduler) {
	  return new Generate(this.f.apply(void 0, this.args), sink, scheduler);
	};

	function Generate(iterator, sink, scheduler) {
	  this.iterator = iterator;
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.active = true;

	  var self = this;
	  function err(e) {
	    self.sink.error(self.scheduler.now(), e);
	  }

	  Promise.resolve(this).then(next).catch(err);
	}

	function next(generate, x) {
	  return generate.active ? handle(generate, generate.iterator.next(x)) : x;
	}

	function handle(generate, result) {
	  if (result.done) {
	    return generate.sink.end(generate.scheduler.now(), result.value);
	  }

	  return Promise.resolve(result.value).then(function (x) {
	    return emit(generate, x);
	  }, function (e) {
	    return error(generate, e);
	  });
	}

	function emit(generate, x) {
	  generate.sink.event(generate.scheduler.now(), x);
	  return next(generate, x);
	}

	function error(generate, e) {
	  return handle(generate, generate.iterator.throw(e));
	}

	Generate.prototype.dispose = function () {
	  this.active = false;
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.of = of;
	exports.empty = empty;
	exports.never = never;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Stream containing only x
	 * @param {*} x
	 * @returns {Stream}
	 */
	function of(x) {
	  return new _Stream2.default(new Just(x));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function Just(x) {
	  this.value = x;
	}

	Just.prototype.run = function (sink, scheduler) {
	  return scheduler.asap(new _PropagateTask2.default(runJust, this.value, sink));
	};

	function runJust(t, x, sink) {
	  sink.event(t, x);
	  sink.end(t, void 0);
	}

	/**
	 * Stream containing no events and ends immediately
	 * @returns {Stream}
	 */
	function empty() {
	  return EMPTY;
	}

	function EmptySource() {}

	EmptySource.prototype.run = function (sink, scheduler) {
	  var task = _PropagateTask2.default.end(void 0, sink);
	  scheduler.asap(task);

	  return dispose.create(disposeEmpty, task);
	};

	function disposeEmpty(task) {
	  return task.dispose();
	}

	var EMPTY = new _Stream2.default(new EmptySource());

	/**
	 * Stream containing no events and never ends
	 * @returns {Stream}
	 */
	function never() {
	  return NEVER;
	}

	function NeverSource() {}

	NeverSource.prototype.run = function () {
	  return dispose.empty();
	};

	var NEVER = new _Stream2.default(new NeverSource());

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = PropagateTask;

	var _fatalError = __webpack_require__(20);

	var _fatalError2 = _interopRequireDefault(_fatalError);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function PropagateTask(run, value, sink) {
	  this._run = run;
	  this.value = value;
	  this.sink = sink;
	  this.active = true;
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	PropagateTask.event = function (value, sink) {
	  return new PropagateTask(emit, value, sink);
	};

	PropagateTask.end = function (value, sink) {
	  return new PropagateTask(end, value, sink);
	};

	PropagateTask.error = function (value, sink) {
	  return new PropagateTask(error, value, sink);
	};

	PropagateTask.prototype.dispose = function () {
	  this.active = false;
	};

	PropagateTask.prototype.run = function (t) {
	  if (!this.active) {
	    return;
	  }
	  this._run(t, this.value, this.sink);
	};

	PropagateTask.prototype.error = function (t, e) {
	  if (!this.active) {
	    return (0, _fatalError2.default)(e);
	  }
	  this.sink.error(t, e);
	};

	function error(t, e, sink) {
	  sink.error(t, e);
	}

	function emit(t, x, sink) {
	  sink.event(t, x);
	}

	function end(t, x, sink) {
	  sink.end(t, x);
	}

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = fatalError;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function fatalError(e) {
	  setTimeout(function () {
	    throw e;
	  }, 0);
	}

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.from = from;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _fromArray = __webpack_require__(22);

	var _iterable = __webpack_require__(23);

	var _fromIterable = __webpack_require__(24);

	var _getObservable = __webpack_require__(25);

	var _getObservable2 = _interopRequireDefault(_getObservable);

	var _fromObservable = __webpack_require__(30);

	var _prelude = __webpack_require__(10);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function from(a) {
	  // eslint-disable-line complexity
	  if (a instanceof _Stream2.default) {
	    return a;
	  }

	  var observable = (0, _getObservable2.default)(a);
	  if (observable != null) {
	    return (0, _fromObservable.fromObservable)(observable);
	  }

	  if (Array.isArray(a) || (0, _prelude.isArrayLike)(a)) {
	    return (0, _fromArray.fromArray)(a);
	  }

	  if ((0, _iterable.isIterable)(a)) {
	    return (0, _fromIterable.fromIterable)(a);
	  }

	  throw new TypeError('from(x) must be observable, iterable, or array-like: ' + a);
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fromArray = fromArray;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function fromArray(a) {
	  return new _Stream2.default(new ArraySource(a));
	}

	function ArraySource(a) {
	  this.array = a;
	}

	ArraySource.prototype.run = function (sink, scheduler) {
	  return scheduler.asap(new _PropagateTask2.default(runProducer, this.array, sink));
	};

	function runProducer(t, array, sink) {
	  for (var i = 0, l = array.length; i < l && this.active; ++i) {
	    sink.event(t, array[i]);
	  }

	  this.active && end(t);

	  function end(t) {
	    sink.end(t);
	  }
	}

/***/ },
/* 23 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isIterable = isIterable;
	exports.getIterator = getIterator;
	exports.makeIterable = makeIterable;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	/*global Set, Symbol*/
	var iteratorSymbol;
	// Firefox ships a partial implementation using the name @@iterator.
	// https://bugzilla.mozilla.org/show_bug.cgi?id=907077#c14
	if (typeof Set === 'function' && typeof new Set()['@@iterator'] === 'function') {
	  iteratorSymbol = '@@iterator';
	} else {
	  iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator || '_es6shim_iterator_';
	}

	function isIterable(o) {
	  return typeof o[iteratorSymbol] === 'function';
	}

	function getIterator(o) {
	  return o[iteratorSymbol]();
	}

	function makeIterable(f, o) {
	  o[iteratorSymbol] = f;
	  return o;
	}

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fromIterable = fromIterable;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _iterable = __webpack_require__(23);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function fromIterable(iterable) {
	  return new _Stream2.default(new IterableSource(iterable));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function IterableSource(iterable) {
	  this.iterable = iterable;
	}

	IterableSource.prototype.run = function (sink, scheduler) {
	  return new IteratorProducer((0, _iterable.getIterator)(this.iterable), sink, scheduler);
	};

	function IteratorProducer(iterator, sink, scheduler) {
	  this.scheduler = scheduler;
	  this.iterator = iterator;
	  this.task = new _PropagateTask2.default(runProducer, this, sink);
	  scheduler.asap(this.task);
	}

	IteratorProducer.prototype.dispose = function () {
	  return this.task.dispose();
	};

	function runProducer(t, producer, sink) {
	  var x = producer.iterator.next();
	  if (x.done) {
	    sink.end(t, x.value);
	  } else {
	    sink.event(t, x.value);
	  }

	  producer.scheduler.asap(producer.task);
	}

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getObservable;

	var _symbolObservable = __webpack_require__(26);

	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getObservable(o) {
	  // eslint-disable-line complexity
	  var obs = null;
	  if (o) {
	    // Access foreign method only once
	    var method = o[_symbolObservable2.default];
	    if (typeof method === 'function') {
	      obs = method.call(o);
	      if (!(obs && typeof obs.subscribe === 'function')) {
	        throw new TypeError('invalid observable ' + obs);
	      }
	    }
	  }

	  return obs;
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(27);


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ponyfill = __webpack_require__(29);

	var _ponyfill2 = _interopRequireDefault(_ponyfill);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var root; /* global window */


	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(28)(module)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 29 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fromObservable = fromObservable;
	exports.ObservableSource = ObservableSource;
	exports.SubscriberSink = SubscriberSink;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function fromObservable(observable) {
	  return new _Stream2.default(new ObservableSource(observable));
	}

	function ObservableSource(observable) {
	  this.observable = observable;
	}

	ObservableSource.prototype.run = function (sink, scheduler) {
	  var sub = this.observable.subscribe(new SubscriberSink(sink, scheduler));
	  if (typeof sub === 'function') {
	    return dispose.create(sub);
	  } else if (sub && typeof sub.unsubscribe === 'function') {
	    return dispose.create(unsubscribe, sub);
	  }

	  throw new TypeError('Observable returned invalid subscription ' + String(sub));
	};

	function SubscriberSink(sink, scheduler) {
	  this.sink = sink;
	  this.scheduler = scheduler;
	}

	SubscriberSink.prototype.next = function (x) {
	  this.sink.event(this.scheduler.now(), x);
	};

	SubscriberSink.prototype.complete = function (x) {
	  this.sink.end(this.scheduler.now(), x);
	};

	SubscriberSink.prototype.error = function (e) {
	  this.sink.error(this.scheduler.now(), e);
	};

	function unsubscribe(subscription) {
	  return subscription.unsubscribe();
	}

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.periodic = periodic;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Create a stream that emits the current time periodically
	 * @param {Number} period periodicity of events in millis
	 * @param {*} value value to emit each period
	 * @returns {Stream} new stream that emits the current time every period
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function periodic(period, value) {
	  return new _Stream2.default(new Periodic(period, value));
	}

	function Periodic(period, value) {
	  this.period = period;
	  this.value = value;
	}

	Periodic.prototype.run = function (sink, scheduler) {
	  return scheduler.periodic(this.period, _PropagateTask2.default.event(this.value, sink));
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.subscribe = subscribe;
	exports.SubscribeObserver = SubscribeObserver;
	exports.Subscription = Subscription;

	var _defaultScheduler = __webpack_require__(33);

	var _defaultScheduler2 = _interopRequireDefault(_defaultScheduler);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _fatalError = __webpack_require__(20);

	var _fatalError2 = _interopRequireDefault(_fatalError);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function subscribe(subscriber, stream) {
	  if (subscriber == null || typeof subscriber !== 'object') {
	    throw new TypeError('subscriber must be an object');
	  }

	  var disposable = dispose.settable();
	  var observer = new SubscribeObserver(_fatalError2.default, subscriber, disposable);

	  disposable.setDisposable(stream.source.run(observer, _defaultScheduler2.default));

	  return new Subscription(disposable);
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function SubscribeObserver(fatalError, subscriber, disposable) {
	  this.fatalError = fatalError;
	  this.subscriber = subscriber;
	  this.disposable = disposable;
	}

	SubscribeObserver.prototype.event = function (t, x) {
	  if (typeof this.subscriber.next === 'function') {
	    this.subscriber.next(x);
	  }
	};

	SubscribeObserver.prototype.end = function (t, x) {
	  var s = this.subscriber;
	  doDispose(this.fatalError, s, s.complete, s.error, this.disposable, x);
	};

	SubscribeObserver.prototype.error = function (t, e) {
	  var s = this.subscriber;
	  doDispose(this.fatalError, s, s.error, s.error, this.disposable, e);
	};

	function Subscription(disposable) {
	  this.disposable = disposable;
	}

	Subscription.prototype.unsubscribe = function () {
	  this.disposable.dispose();
	};

	function doDispose(fatal, subscriber, complete, error, disposable, x) {
	  Promise.resolve(disposable.dispose()).then(function () {
	    if (typeof complete === 'function') {
	      complete.call(subscriber, x);
	    }
	  }).catch(function (e) {
	    if (typeof error === 'function') {
	      error.call(subscriber, e);
	    }
	  }).catch(fatal);
	}

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Scheduler = __webpack_require__(34);

	var _Scheduler2 = _interopRequireDefault(_Scheduler);

	var _ClockTimer = __webpack_require__(36);

	var _ClockTimer2 = _interopRequireDefault(_ClockTimer);

	var _Timeline = __webpack_require__(37);

	var _Timeline2 = _interopRequireDefault(_Timeline);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultScheduler = new _Scheduler2.default(new _ClockTimer2.default(), new _Timeline2.default()); /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	exports.default = defaultScheduler;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Scheduler;

	var _ScheduledTask = __webpack_require__(35);

	var _ScheduledTask2 = _interopRequireDefault(_ScheduledTask);

	var _task = __webpack_require__(14);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function Scheduler(timer, timeline) {
	  this.timer = timer;
	  this.timeline = timeline;

	  this._timer = null;
	  this._nextArrival = Infinity;

	  var self = this;
	  this._runReadyTasksBound = function () {
	    self._runReadyTasks(self.now());
	  };
	}

	Scheduler.prototype.now = function () {
	  return this.timer.now();
	};

	Scheduler.prototype.asap = function (task) {
	  return this.schedule(0, -1, task);
	};

	Scheduler.prototype.delay = function (delay, task) {
	  return this.schedule(delay, -1, task);
	};

	Scheduler.prototype.periodic = function (period, task) {
	  return this.schedule(0, period, task);
	};

	Scheduler.prototype.schedule = function (delay, period, task) {
	  var now = this.now();
	  var st = new _ScheduledTask2.default(now + Math.max(0, delay), period, task, this);

	  this.timeline.add(st);
	  this._scheduleNextRun(now);
	  return st;
	};

	Scheduler.prototype.cancel = function (task) {
	  task.active = false;
	  if (this.timeline.remove(task)) {
	    this._reschedule();
	  }
	};

	Scheduler.prototype.cancelAll = function (f) {
	  this.timeline.removeAll(f);
	  this._reschedule();
	};

	Scheduler.prototype._reschedule = function () {
	  if (this.timeline.isEmpty()) {
	    this._unschedule();
	  } else {
	    this._scheduleNextRun(this.now());
	  }
	};

	Scheduler.prototype._unschedule = function () {
	  this.timer.clearTimer(this._timer);
	  this._timer = null;
	};

	Scheduler.prototype._scheduleNextRun = function (now) {
	  // eslint-disable-line complexity
	  if (this.timeline.isEmpty()) {
	    return;
	  }

	  var nextArrival = this.timeline.nextArrival();

	  if (this._timer === null) {
	    this._scheduleNextArrival(nextArrival, now);
	  } else if (nextArrival < this._nextArrival) {
	    this._unschedule();
	    this._scheduleNextArrival(nextArrival, now);
	  }
	};

	Scheduler.prototype._scheduleNextArrival = function (nextArrival, now) {
	  this._nextArrival = nextArrival;
	  var delay = Math.max(0, nextArrival - now);
	  this._timer = this.timer.setTimer(this._runReadyTasksBound, delay);
	};

	Scheduler.prototype._runReadyTasks = function (now) {
	  this._timer = null;
	  this.timeline.runTasks(now, _task.runTask);
	  this._scheduleNextRun(this.now());
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ScheduledTask;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function ScheduledTask(delay, period, task, scheduler) {
	  this.time = delay;
	  this.period = period;
	  this.task = task;
	  this.scheduler = scheduler;
	  this.active = true;
	}

	ScheduledTask.prototype.run = function () {
	  return this.task.run(this.time);
	};

	ScheduledTask.prototype.error = function (e) {
	  return this.task.error(this.time, e);
	};

	ScheduledTask.prototype.dispose = function () {
	  this.scheduler.cancel(this);
	  return this.task.dispose();
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ClockTimer;

	var _task = __webpack_require__(14);

	/*global setTimeout, clearTimeout*/

	function ClockTimer() {} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	ClockTimer.prototype.now = Date.now;

	ClockTimer.prototype.setTimer = function (f, dt) {
	  return dt <= 0 ? runAsap(f) : setTimeout(f, dt);
	};

	ClockTimer.prototype.clearTimer = function (t) {
	  return t instanceof Asap ? t.cancel() : clearTimeout(t);
	};

	function Asap(f) {
	  this.f = f;
	  this.active = true;
	}

	Asap.prototype.run = function () {
	  return this.active && this.f();
	};

	Asap.prototype.error = function (e) {
	  throw e;
	};

	Asap.prototype.cancel = function () {
	  this.active = false;
	};

	function runAsap(f) {
	  var task = new Asap(f);
	  (0, _task.defer)(task);
	  return task;
	}

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Timeline;

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function Timeline() {
	  this.tasks = [];
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	Timeline.prototype.nextArrival = function () {
	  return this.isEmpty() ? Infinity : this.tasks[0].time;
	};

	Timeline.prototype.isEmpty = function () {
	  return this.tasks.length === 0;
	};

	Timeline.prototype.add = function (st) {
	  insertByTime(st, this.tasks);
	};

	Timeline.prototype.remove = function (st) {
	  var i = binarySearch(st.time, this.tasks);

	  if (i >= 0 && i < this.tasks.length) {
	    var at = base.findIndex(st, this.tasks[i].events);
	    if (at >= 0) {
	      this.tasks[i].events.splice(at, 1);
	      return true;
	    }
	  }

	  return false;
	};

	Timeline.prototype.removeAll = function (f) {
	  var this$1 = this;

	  for (var i = 0, l = this.tasks.length; i < l; ++i) {
	    removeAllFrom(f, this$1.tasks[i]);
	  }
	};

	Timeline.prototype.runTasks = function (t, runTask) {
	  var this$1 = this;

	  var tasks = this.tasks;
	  var l = tasks.length;
	  var i = 0;

	  while (i < l && tasks[i].time <= t) {
	    ++i;
	  }

	  this.tasks = tasks.slice(i);

	  // Run all ready tasks
	  for (var j = 0; j < i; ++j) {
	    this$1.tasks = runTasks(runTask, tasks[j], this$1.tasks);
	  }
	};

	function runTasks(runTask, timeslot, tasks) {
	  // eslint-disable-line complexity
	  var events = timeslot.events;
	  for (var i = 0; i < events.length; ++i) {
	    var task = events[i];

	    if (task.active) {
	      runTask(task);

	      // Reschedule periodic repeating tasks
	      // Check active again, since a task may have canceled itself
	      if (task.period >= 0 && task.active) {
	        task.time = task.time + task.period;
	        insertByTime(task, tasks);
	      }
	    }
	  }

	  return tasks;
	}

	function insertByTime(task, timeslots) {
	  // eslint-disable-line complexity
	  var l = timeslots.length;

	  if (l === 0) {
	    timeslots.push(newTimeslot(task.time, [task]));
	    return;
	  }

	  var i = binarySearch(task.time, timeslots);

	  if (i >= l) {
	    timeslots.push(newTimeslot(task.time, [task]));
	  } else if (task.time === timeslots[i].time) {
	    timeslots[i].events.push(task);
	  } else {
	    timeslots.splice(i, 0, newTimeslot(task.time, [task]));
	  }
	}

	function removeAllFrom(f, timeslot) {
	  timeslot.events = base.removeAll(f, timeslot.events);
	}

	function binarySearch(t, sortedArray) {
	  // eslint-disable-line complexity
	  var lo = 0;
	  var hi = sortedArray.length;
	  var mid, y;

	  while (lo < hi) {
	    mid = Math.floor((lo + hi) / 2);
	    y = sortedArray[mid];

	    if (t === y.time) {
	      return mid;
	    } else if (t < y.time) {
	      hi = mid;
	    } else {
	      lo = mid + 1;
	    }
	  }
	  return hi;
	}

	function newTimeslot(t, events) {
	  return { time: t, events: events };
	}

/***/ },
/* 38 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.thru = thru;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function thru(f, stream) {
	  return f(stream);
	}

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.observe = observe;
	exports.drain = drain;

	var _runSource = __webpack_require__(40);

	var _transform = __webpack_require__(41);

	/**
	 * Observe all the event values in the stream in time order. The
	 * provided function `f` will be called for each event value
	 * @param {function(x:T):*} f function to call with each event value
	 * @param {Stream<T>} stream stream to observe
	 * @return {Promise} promise that fulfills after the stream ends without
	 *  an error, or rejects if the stream ends with an error.
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function observe(f, stream) {
	  return drain((0, _transform.tap)(f, stream));
	}

	/**
	 * "Run" a stream by creating demand and consuming all events
	 * @param {Stream<T>} stream stream to drain
	 * @return {Promise} promise that fulfills after the stream ends without
	 *  an error, or rejects if the stream ends with an error.
	 */
	function drain(stream) {
	  return (0, _runSource.withDefaultScheduler)(stream.source);
	}

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.withDefaultScheduler = withDefaultScheduler;
	exports.withScheduler = withScheduler;

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _defaultScheduler = __webpack_require__(33);

	var _defaultScheduler2 = _interopRequireDefault(_defaultScheduler);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function withDefaultScheduler(source) {
	  return withScheduler(source, _defaultScheduler2.default);
	}

	function withScheduler(source, scheduler) {
	  return new Promise(function (resolve, reject) {
	    runSource(source, scheduler, resolve, reject);
	  });
	}

	function runSource(source, scheduler, resolve, reject) {
	  var disposable = dispose.settable();
	  var observer = new Drain(resolve, reject, disposable);

	  disposable.setDisposable(source.run(observer, scheduler));
	}

	function Drain(end, error, disposable) {
	  this._end = end;
	  this._error = error;
	  this._disposable = disposable;
	  this.active = true;
	}

	Drain.prototype.event = function (t, x) {};

	Drain.prototype.end = function (t, x) {
	  if (!this.active) {
	    return;
	  }
	  this.active = false;
	  disposeThen(this._end, this._error, this._disposable, x);
	};

	Drain.prototype.error = function (t, e) {
	  this.active = false;
	  disposeThen(this._error, this._error, this._disposable, e);
	};

	function disposeThen(end, error, disposable, x) {
	  Promise.resolve(disposable.dispose()).then(function () {
	    end(x);
	  }, error);
	}

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.map = map;
	exports.constant = constant;
	exports.tap = tap;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Map = __webpack_require__(42);

	var _Map2 = _interopRequireDefault(_Map);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Transform each value in the stream by applying f to each
	 * @param {function(*):*} f mapping function
	 * @param {Stream} stream stream to map
	 * @returns {Stream} stream containing items transformed by f
	 */
	function map(f, stream) {
	  return new _Stream2.default(_Map2.default.create(f, stream.source));
	}

	/**
	* Replace each value in the stream with x
	* @param {*} x
	* @param {Stream} stream
	* @returns {Stream} stream containing items replaced with x
	*/
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function constant(x, stream) {
	  return map(function () {
	    return x;
	  }, stream);
	}

	/**
	* Perform a side effect for each item in the stream
	* @param {function(x:*):*} f side effect to execute for each item. The
	*  return value will be discarded.
	* @param {Stream} stream stream to tap
	* @returns {Stream} new stream containing the same items as this stream
	*/
	function tap(f, stream) {
	  return new _Stream2.default(new Tap(f, stream.source));
	}

	function Tap(f, source) {
	  this.source = source;
	  this.f = f;
	}

	Tap.prototype.run = function (sink, scheduler) {
	  return this.source.run(new TapSink(this.f, sink), scheduler);
	};

	function TapSink(f, sink) {
	  this.sink = sink;
	  this.f = f;
	}

	TapSink.prototype.end = _Pipe2.default.prototype.end;
	TapSink.prototype.error = _Pipe2.default.prototype.error;

	TapSink.prototype.event = function (t, x) {
	  var f = this.f;
	  f(x);
	  this.sink.event(t, x);
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Map;

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _Filter = __webpack_require__(44);

	var _Filter2 = _interopRequireDefault(_Filter);

	var _FilterMap = __webpack_require__(45);

	var _FilterMap2 = _interopRequireDefault(_FilterMap);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function Map(f, source) {
	  this.f = f;
	  this.source = source;
	}

	/**
	 * Create a mapped source, fusing adjacent map.map, filter.map,
	 * and filter.map.map if possible
	 * @param {function(*):*} f mapping function
	 * @param {{run:function}} source source to map
	 * @returns {Map|FilterMap} mapped source, possibly fused
	 */
	Map.create = function createMap(f, source) {
	  if (source instanceof Map) {
	    return new Map(base.compose(f, source.f), source.source);
	  }

	  if (source instanceof _Filter2.default) {
	    return new _FilterMap2.default(source.p, f, source.source);
	  }

	  return new Map(f, source);
	};

	Map.prototype.run = function (sink, scheduler) {
	  // eslint-disable-line no-extend-native
	  return this.source.run(new MapSink(this.f, sink), scheduler);
	};

	function MapSink(f, sink) {
	  this.f = f;
	  this.sink = sink;
	}

	MapSink.prototype.end = _Pipe2.default.prototype.end;
	MapSink.prototype.error = _Pipe2.default.prototype.error;

	MapSink.prototype.event = function (t, x) {
	  var f = this.f;
	  this.sink.event(t, f(x));
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Pipe;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	/**
	 * A sink mixin that simply forwards event, end, and error to
	 * another sink.
	 * @param sink
	 * @constructor
	 */
	function Pipe(sink) {
	  this.sink = sink;
	}

	Pipe.prototype.event = function (t, x) {
	  return this.sink.event(t, x);
	};

	Pipe.prototype.end = function (t, x) {
	  return this.sink.end(t, x);
	};

	Pipe.prototype.error = function (t, e) {
	  return this.sink.error(t, e);
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Filter;

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function Filter(p, source) {
	  this.p = p;
	  this.source = source;
	}

	/**
	 * Create a filtered source, fusing adjacent filter.filter if possible
	 * @param {function(x:*):boolean} p filtering predicate
	 * @param {{run:function}} source source to filter
	 * @returns {Filter} filtered source
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	Filter.create = function createFilter(p, source) {
	  if (source instanceof Filter) {
	    return new Filter(and(source.p, p), source.source);
	  }

	  return new Filter(p, source);
	};

	Filter.prototype.run = function (sink, scheduler) {
	  return this.source.run(new FilterSink(this.p, sink), scheduler);
	};

	function FilterSink(p, sink) {
	  this.p = p;
	  this.sink = sink;
	}

	FilterSink.prototype.end = _Pipe2.default.prototype.end;
	FilterSink.prototype.error = _Pipe2.default.prototype.error;

	FilterSink.prototype.event = function (t, x) {
	  var p = this.p;
	  p(x) && this.sink.event(t, x);
	};

	function and(p, q) {
	  return function (x) {
	    return p(x) && q(x);
	  };
	}

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = FilterMap;

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function FilterMap(p, f, source) {
	  this.p = p;
	  this.f = f;
	  this.source = source;
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	FilterMap.prototype.run = function (sink, scheduler) {
	  return this.source.run(new FilterMapSink(this.p, this.f, sink), scheduler);
	};

	function FilterMapSink(p, f, sink) {
	  this.p = p;
	  this.f = f;
	  this.sink = sink;
	}

	FilterMapSink.prototype.event = function (t, x) {
	  var f = this.f;
	  var p = this.p;
	  p(x) && this.sink.event(t, f(x));
	};

	FilterMapSink.prototype.end = _Pipe2.default.prototype.end;
	FilterMapSink.prototype.error = _Pipe2.default.prototype.error;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.loop = loop;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Generalized feedback loop. Call a stepper function for each event. The stepper
	 * will be called with 2 params: the current seed and the an event value.  It must
	 * return a new { seed, value } pair. The `seed` will be fed back into the next
	 * invocation of stepper, and the `value` will be propagated as the event value.
	 * @param {function(seed:*, value:*):{seed:*, value:*}} stepper loop step function
	 * @param {*} seed initial seed value passed to first stepper call
	 * @param {Stream} stream event stream
	 * @returns {Stream} new stream whose values are the `value` field of the objects
	 * returned by the stepper
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function loop(stepper, seed, stream) {
	  return new _Stream2.default(new Loop(stepper, seed, stream.source));
	}

	function Loop(stepper, seed, source) {
	  this.step = stepper;
	  this.seed = seed;
	  this.source = source;
	}

	Loop.prototype.run = function (sink, scheduler) {
	  return this.source.run(new LoopSink(this.step, this.seed, sink), scheduler);
	};

	function LoopSink(stepper, seed, sink) {
	  this.step = stepper;
	  this.seed = seed;
	  this.sink = sink;
	}

	LoopSink.prototype.error = _Pipe2.default.prototype.error;

	LoopSink.prototype.event = function (t, x) {
	  var result = this.step(this.seed, x);
	  this.seed = result.seed;
	  this.sink.event(t, result.value);
	};

	LoopSink.prototype.end = function (t) {
	  this.sink.end(t, this.seed);
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.scan = scan;
	exports.reduce = reduce;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _runSource = __webpack_require__(40);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Create a stream containing successive reduce results of applying f to
	 * the previous reduce result and the current stream item.
	 * @param {function(result:*, x:*):*} f reducer function
	 * @param {*} initial initial value
	 * @param {Stream} stream stream to scan
	 * @returns {Stream} new stream containing successive reduce results
	 */
	function scan(f, initial, stream) {
	  return new _Stream2.default(new Scan(f, initial, stream.source));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function Scan(f, z, source) {
	  this.source = source;
	  this.f = f;
	  this.value = z;
	}

	Scan.prototype.run = function (sink, scheduler) {
	  var d1 = scheduler.asap(_PropagateTask2.default.event(this.value, sink));
	  var d2 = this.source.run(new ScanSink(this.f, this.value, sink), scheduler);
	  return dispose.all([d1, d2]);
	};

	function ScanSink(f, z, sink) {
	  this.f = f;
	  this.value = z;
	  this.sink = sink;
	}

	ScanSink.prototype.event = function (t, x) {
	  var f = this.f;
	  this.value = f(this.value, x);
	  this.sink.event(t, this.value);
	};

	ScanSink.prototype.error = _Pipe2.default.prototype.error;
	ScanSink.prototype.end = _Pipe2.default.prototype.end;

	/**
	* Reduce a stream to produce a single result.  Note that reducing an infinite
	* stream will return a Promise that never fulfills, but that may reject if an error
	* occurs.
	* @param {function(result:*, x:*):*} f reducer function
	* @param {*} initial initial value
	* @param {Stream} stream to reduce
	* @returns {Promise} promise for the file result of the reduce
	*/
	function reduce(f, initial, stream) {
	  return (0, _runSource.withDefaultScheduler)(new Reduce(f, initial, stream.source));
	}

	function Reduce(f, z, source) {
	  this.source = source;
	  this.f = f;
	  this.value = z;
	}

	Reduce.prototype.run = function (sink, scheduler) {
	  return this.source.run(new ReduceSink(this.f, this.value, sink), scheduler);
	};

	function ReduceSink(f, z, sink) {
	  this.f = f;
	  this.value = z;
	  this.sink = sink;
	}

	ReduceSink.prototype.event = function (t, x) {
	  var f = this.f;
	  this.value = f(this.value, x);
	  this.sink.event(t, this.value);
	};

	ReduceSink.prototype.error = _Pipe2.default.prototype.error;

	ReduceSink.prototype.end = function (t) {
	  this.sink.end(t, this.value);
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.cons = cons;
	exports.concat = concat;

	var _core = __webpack_require__(18);

	var _continueWith = __webpack_require__(49);

	/**
	 * @param {*} x value to prepend
	 * @param {Stream} stream
	 * @returns {Stream} new stream with x prepended
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function cons(x, stream) {
	  return concat((0, _core.of)(x), stream);
	}

	/**
	* @param {Stream} left
	* @param {Stream} right
	* @returns {Stream} new stream containing all events in left followed by all
	*  events in right.  This *timeshifts* right to the end of left.
	*/
	function concat(left, right) {
	  return (0, _continueWith.continueWith)(function () {
	    return right;
	  }, left);
	}

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.continueWith = continueWith;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function continueWith(f, stream) {
	  return new _Stream2.default(new ContinueWith(f, stream.source));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function ContinueWith(f, source) {
	  this.f = f;
	  this.source = source;
	}

	ContinueWith.prototype.run = function (sink, scheduler) {
	  return new ContinueWithSink(this.f, this.source, sink, scheduler);
	};

	function ContinueWithSink(f, source, sink, scheduler) {
	  this.f = f;
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.active = true;
	  this.disposable = dispose.once(source.run(this, scheduler));
	}

	ContinueWithSink.prototype.error = _Pipe2.default.prototype.error;

	ContinueWithSink.prototype.event = function (t, x) {
	  if (!this.active) {
	    return;
	  }
	  this.sink.event(t, x);
	};

	ContinueWithSink.prototype.end = function (t, x) {
	  if (!this.active) {
	    return;
	  }

	  dispose.tryDispose(t, this.disposable, this.sink);
	  this._startNext(t, x, this.sink);
	};

	ContinueWithSink.prototype._startNext = function (t, x, sink) {
	  try {
	    this.disposable = this._continue(this.f, x, sink);
	  } catch (e) {
	    sink.error(t, e);
	  }
	};

	ContinueWithSink.prototype._continue = function (f, x, sink) {
	  return f(x).source.run(sink, this.scheduler);
	};

	ContinueWithSink.prototype.dispose = function () {
	  this.active = false;
	  return this.disposable.dispose();
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ap = ap;

	var _combine = __webpack_require__(51);

	var _prelude = __webpack_require__(10);

	/**
	 * Assume fs is a stream containing functions, and apply the latest function
	 * in fs to the latest value in xs.
	 * fs:         --f---------g--------h------>
	 * xs:         -a-------b-------c-------d-->
	 * ap(fs, xs): --fa-----fb-gb---gc--hc--hd->
	 * @param {Stream} fs stream of functions to apply to the latest x
	 * @param {Stream} xs stream of values to which to apply all the latest f
	 * @returns {Stream} stream containing all the applications of fs to xs
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function ap(fs, xs) {
	  return (0, _combine.combine)(_prelude.apply, fs, xs);
	}

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.combine = combine;
	exports.combineArray = combineArray;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _transform = __webpack_require__(41);

	var transform = _interopRequireWildcard(_transform);

	var _core = __webpack_require__(18);

	var core = _interopRequireWildcard(_core);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _IndexSink = __webpack_require__(52);

	var _IndexSink2 = _interopRequireDefault(_IndexSink);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	var _invoke = __webpack_require__(53);

	var _invoke2 = _interopRequireDefault(_invoke);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	var map = base.map;
	var tail = base.tail;

	/**
	 * Combine latest events from all input streams
	 * @param {function(...events):*} f function to combine most recent events
	 * @returns {Stream} stream containing the result of applying f to the most recent
	 *  event of each input stream, whenever a new event arrives on any stream.
	 */
	function combine(f /*, ...streams */) {
	  return combineArray(f, tail(arguments));
	}

	/**
	* Combine latest events from all input streams
	* @param {function(...events):*} f function to combine most recent events
	* @param {[Stream]} streams most recent events
	* @returns {Stream} stream containing the result of applying f to the most recent
	*  event of each input stream, whenever a new event arrives on any stream.
	*/
	function combineArray(f, streams) {
	  var l = streams.length;
	  return l === 0 ? core.empty() : l === 1 ? transform.map(f, streams[0]) : new _Stream2.default(combineSources(f, streams));
	}

	function combineSources(f, streams) {
	  return new Combine(f, map(getSource, streams));
	}

	function getSource(stream) {
	  return stream.source;
	}

	function Combine(f, sources) {
	  this.f = f;
	  this.sources = sources;
	}

	Combine.prototype.run = function (sink, scheduler) {
	  var this$1 = this;

	  var l = this.sources.length;
	  var disposables = new Array(l);
	  var sinks = new Array(l);

	  var mergeSink = new CombineSink(disposables, sinks, sink, this.f);

	  for (var indexSink, i = 0; i < l; ++i) {
	    indexSink = sinks[i] = new _IndexSink2.default(i, mergeSink);
	    disposables[i] = this$1.sources[i].run(indexSink, scheduler);
	  }

	  return dispose.all(disposables);
	};

	function CombineSink(disposables, sinks, sink, f) {
	  var this$1 = this;

	  this.sink = sink;
	  this.disposables = disposables;
	  this.sinks = sinks;
	  this.f = f;

	  var l = sinks.length;
	  this.awaiting = l;
	  this.values = new Array(l);
	  this.hasValue = new Array(l);
	  for (var i = 0; i < l; ++i) {
	    this$1.hasValue[i] = false;
	  }

	  this.activeCount = sinks.length;
	}

	CombineSink.prototype.error = _Pipe2.default.prototype.error;

	CombineSink.prototype.event = function (t, indexedValue) {
	  var i = indexedValue.index;
	  var awaiting = this._updateReady(i);

	  this.values[i] = indexedValue.value;
	  if (awaiting === 0) {
	    this.sink.event(t, (0, _invoke2.default)(this.f, this.values));
	  }
	};

	CombineSink.prototype._updateReady = function (index) {
	  if (this.awaiting > 0) {
	    if (!this.hasValue[index]) {
	      this.hasValue[index] = true;
	      this.awaiting -= 1;
	    }
	  }
	  return this.awaiting;
	};

	CombineSink.prototype.end = function (t, indexedValue) {
	  dispose.tryDispose(t, this.disposables[indexedValue.index], this.sink);
	  if (--this.activeCount === 0) {
	    this.sink.end(t, indexedValue.value);
	  }
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = IndexSink;

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function IndexSink(i, sink) {
	  this.sink = sink;
	  this.index = i;
	  this.active = true;
	  this.value = void 0;
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	IndexSink.prototype.event = function (t, x) {
	  if (!this.active) {
	    return;
	  }
	  this.value = x;
	  this.sink.event(t, this);
	};

	IndexSink.prototype.end = function (t, x) {
	  if (!this.active) {
	    return;
	  }
	  this.active = false;
	  this.sink.end(t, { index: this.index, value: x });
	};

	IndexSink.prototype.error = _Pipe2.default.prototype.error;

/***/ },
/* 53 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = invoke;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function invoke(f, args) {
	  /*eslint complexity: [2,7]*/
	  switch (args.length) {
	    case 0:
	      return f();
	    case 1:
	      return f(args[0]);
	    case 2:
	      return f(args[0], args[1]);
	    case 3:
	      return f(args[0], args[1], args[2]);
	    case 4:
	      return f(args[0], args[1], args[2], args[3]);
	    case 5:
	      return f(args[0], args[1], args[2], args[3], args[4]);
	    default:
	      return f.apply(void 0, args);
	  }
	}

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.transduce = transduce;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Transform a stream by passing its events through a transducer.
	 * @param  {function} transducer transducer function
	 * @param  {Stream} stream stream whose events will be passed through the
	 *  transducer
	 * @return {Stream} stream of events transformed by the transducer
	 */
	function transduce(transducer, stream) {
	  return new _Stream2.default(new Transduce(transducer, stream.source));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function Transduce(transducer, source) {
	  this.transducer = transducer;
	  this.source = source;
	}

	Transduce.prototype.run = function (sink, scheduler) {
	  var xf = this.transducer(new Transformer(sink));
	  return this.source.run(new TransduceSink(getTxHandler(xf), sink), scheduler);
	};

	function TransduceSink(adapter, sink) {
	  this.xf = adapter;
	  this.sink = sink;
	}

	TransduceSink.prototype.event = function (t, x) {
	  var next = this.xf.step(t, x);

	  return this.xf.isReduced(next) ? this.sink.end(t, this.xf.getResult(next)) : next;
	};

	TransduceSink.prototype.end = function (t, x) {
	  return this.xf.result(x);
	};

	TransduceSink.prototype.error = function (t, e) {
	  return this.sink.error(t, e);
	};

	function Transformer(sink) {
	  this.time = -Infinity;
	  this.sink = sink;
	}

	Transformer.prototype['@@transducer/init'] = Transformer.prototype.init = function () {};

	Transformer.prototype['@@transducer/step'] = Transformer.prototype.step = function (t, x) {
	  if (!isNaN(t)) {
	    this.time = Math.max(t, this.time);
	  }
	  return this.sink.event(this.time, x);
	};

	Transformer.prototype['@@transducer/result'] = Transformer.prototype.result = function (x) {
	  return this.sink.end(this.time, x);
	};

	/**
	* Given an object supporting the new or legacy transducer protocol,
	* create an adapter for it.
	* @param {object} tx transform
	* @returns {TxAdapter|LegacyTxAdapter}
	*/
	function getTxHandler(tx) {
	  return typeof tx['@@transducer/step'] === 'function' ? new TxAdapter(tx) : new LegacyTxAdapter(tx);
	}

	/**
	* Adapter for new official transducer protocol
	* @param {object} tx transform
	* @constructor
	*/
	function TxAdapter(tx) {
	  this.tx = tx;
	}

	TxAdapter.prototype.step = function (t, x) {
	  return this.tx['@@transducer/step'](t, x);
	};
	TxAdapter.prototype.result = function (x) {
	  return this.tx['@@transducer/result'](x);
	};
	TxAdapter.prototype.isReduced = function (x) {
	  return x != null && x['@@transducer/reduced'];
	};
	TxAdapter.prototype.getResult = function (x) {
	  return x['@@transducer/value'];
	};

	/**
	* Adapter for older transducer protocol
	* @param {object} tx transform
	* @constructor
	*/
	function LegacyTxAdapter(tx) {
	  this.tx = tx;
	}

	LegacyTxAdapter.prototype.step = function (t, x) {
	  return this.tx.step(t, x);
	};
	LegacyTxAdapter.prototype.result = function (x) {
	  return this.tx.result(x);
	};
	LegacyTxAdapter.prototype.isReduced = function (x) {
	  return x != null && x.__transducers_reduced__;
	};
	LegacyTxAdapter.prototype.getResult = function (x) {
	  return x.value;
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.flatMap = flatMap;
	exports.join = join;

	var _mergeConcurrently = __webpack_require__(56);

	/**
	 * Map each value in the stream to a new stream, and merge it into the
	 * returned outer stream. Event arrival times are preserved.
	 * @param {function(x:*):Stream} f chaining function, must return a Stream
	 * @param {Stream} stream
	 * @returns {Stream} new stream containing all events from each stream returned by f
	 */
	function flatMap(f, stream) {
	  return (0, _mergeConcurrently.mergeMapConcurrently)(f, Infinity, stream);
	}

	/**
	 * Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner
	 * streams to the outer. Event arrival times are preserved.
	 * @param {Stream<Stream<X>>} stream stream of streams
	 * @returns {Stream<X>} new stream containing all events of all inner streams
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function join(stream) {
	  return (0, _mergeConcurrently.mergeConcurrently)(Infinity, stream);
	}

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.mergeConcurrently = mergeConcurrently;
	exports.mergeMapConcurrently = mergeMapConcurrently;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _LinkedList = __webpack_require__(57);

	var _LinkedList2 = _interopRequireDefault(_LinkedList);

	var _prelude = __webpack_require__(10);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function mergeConcurrently(concurrency, stream) {
	  return mergeMapConcurrently(_prelude.id, concurrency, stream);
	}

	function mergeMapConcurrently(f, concurrency, stream) {
	  return new _Stream2.default(new MergeConcurrently(f, concurrency, stream.source));
	}

	function MergeConcurrently(f, concurrency, source) {
	  this.f = f;
	  this.concurrency = concurrency;
	  this.source = source;
	}

	MergeConcurrently.prototype.run = function (sink, scheduler) {
	  return new Outer(this.f, this.concurrency, this.source, sink, scheduler);
	};

	function Outer(f, concurrency, source, sink, scheduler) {
	  this.f = f;
	  this.concurrency = concurrency;
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.pending = [];
	  this.current = new _LinkedList2.default();
	  this.disposable = dispose.once(source.run(this, scheduler));
	  this.active = true;
	}

	Outer.prototype.event = function (t, x) {
	  this._addInner(t, x);
	};

	Outer.prototype._addInner = function (t, x) {
	  if (this.current.length < this.concurrency) {
	    this._startInner(t, x);
	  } else {
	    this.pending.push(x);
	  }
	};

	Outer.prototype._startInner = function (t, x) {
	  try {
	    this._initInner(t, x);
	  } catch (e) {
	    this.error(t, e);
	  }
	};

	Outer.prototype._initInner = function (t, x) {
	  var innerSink = new Inner(t, this, this.sink);
	  innerSink.disposable = mapAndRun(this.f, x, innerSink, this.scheduler);
	  this.current.add(innerSink);
	};

	function mapAndRun(f, x, sink, scheduler) {
	  return f(x).source.run(sink, scheduler);
	}

	Outer.prototype.end = function (t, x) {
	  this.active = false;
	  dispose.tryDispose(t, this.disposable, this.sink);
	  this._checkEnd(t, x);
	};

	Outer.prototype.error = function (t, e) {
	  this.active = false;
	  this.sink.error(t, e);
	};

	Outer.prototype.dispose = function () {
	  this.active = false;
	  this.pending.length = 0;
	  return Promise.all([this.disposable.dispose(), this.current.dispose()]);
	};

	Outer.prototype._endInner = function (t, x, inner) {
	  this.current.remove(inner);
	  dispose.tryDispose(t, inner, this);

	  if (this.pending.length === 0) {
	    this._checkEnd(t, x);
	  } else {
	    this._startInner(t, this.pending.shift());
	  }
	};

	Outer.prototype._checkEnd = function (t, x) {
	  if (!this.active && this.current.isEmpty()) {
	    this.sink.end(t, x);
	  }
	};

	function Inner(time, outer, sink) {
	  this.prev = this.next = null;
	  this.time = time;
	  this.outer = outer;
	  this.sink = sink;
	  this.disposable = void 0;
	}

	Inner.prototype.event = function (t, x) {
	  this.sink.event(Math.max(t, this.time), x);
	};

	Inner.prototype.end = function (t, x) {
	  this.outer._endInner(Math.max(t, this.time), x, this);
	};

	Inner.prototype.error = function (t, e) {
	  this.outer.error(Math.max(t, this.time), e);
	};

	Inner.prototype.dispose = function () {
	  return this.disposable.dispose();
	};

/***/ },
/* 57 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = LinkedList;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	/**
	 * Doubly linked list
	 * @constructor
	 */
	function LinkedList() {
	  this.head = null;
	  this.length = 0;
	}

	/**
	 * Add a node to the end of the list
	 * @param {{prev:Object|null, next:Object|null, dispose:function}} x node to add
	 */
	LinkedList.prototype.add = function (x) {
	  if (this.head !== null) {
	    this.head.prev = x;
	    x.next = this.head;
	  }
	  this.head = x;
	  ++this.length;
	};

	/**
	 * Remove the provided node from the list
	 * @param {{prev:Object|null, next:Object|null, dispose:function}} x node to remove
	 */
	LinkedList.prototype.remove = function (x) {
	  // eslint-disable-line  complexity
	  --this.length;
	  if (x === this.head) {
	    this.head = this.head.next;
	  }
	  if (x.next !== null) {
	    x.next.prev = x.prev;
	    x.next = null;
	  }
	  if (x.prev !== null) {
	    x.prev.next = x.next;
	    x.prev = null;
	  }
	};

	/**
	 * @returns {boolean} true iff there are no nodes in the list
	 */
	LinkedList.prototype.isEmpty = function () {
	  return this.length === 0;
	};

	/**
	 * Dispose all nodes
	 * @returns {Promise} promise that fulfills when all nodes have been disposed,
	 *  or rejects if an error occurs while disposing
	 */
	LinkedList.prototype.dispose = function () {
	  if (this.isEmpty()) {
	    return Promise.resolve();
	  }

	  var promises = [];
	  var x = this.head;
	  this.head = null;
	  this.length = 0;

	  while (x !== null) {
	    promises.push(x.dispose());
	    x = x.next;
	  }

	  return Promise.all(promises);
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.concatMap = concatMap;

	var _mergeConcurrently = __webpack_require__(56);

	/**
	 * Map each value in stream to a new stream, and concatenate them all
	 * stream:              -a---b---cX
	 * f(a):                 1-1-1-1X
	 * f(b):                        -2-2-2-2X
	 * f(c):                                -3-3-3-3X
	 * stream.concatMap(f): -1-1-1-1-2-2-2-2-3-3-3-3X
	 * @param {function(x:*):Stream} f function to map each value to a stream
	 * @param {Stream} stream
	 * @returns {Stream} new stream containing all events from each stream returned by f
	 */
	function concatMap(f, stream) {
	  return (0, _mergeConcurrently.mergeMapConcurrently)(f, 1, stream);
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.merge = merge;
	exports.mergeArray = mergeArray;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _IndexSink = __webpack_require__(52);

	var _IndexSink2 = _interopRequireDefault(_IndexSink);

	var _core = __webpack_require__(18);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	var copy = base.copy;
	var reduce = base.reduce;

	/**
	 * @returns {Stream} stream containing events from all streams in the argument
	 * list in time order.  If two events are simultaneous they will be merged in
	 * arbitrary order.
	 */
	function merge() /* ...streams*/{
	  return mergeArray(copy(arguments));
	}

	/**
	 * @param {Array} streams array of stream to merge
	 * @returns {Stream} stream containing events from all input observables
	 * in time order.  If two events are simultaneous they will be merged in
	 * arbitrary order.
	 */
	function mergeArray(streams) {
	  var l = streams.length;
	  return l === 0 ? (0, _core.empty)() : l === 1 ? streams[0] : new _Stream2.default(mergeSources(streams));
	}

	/**
	 * This implements fusion/flattening for merge.  It will
	 * fuse adjacent merge operations.  For example:
	 * - a.merge(b).merge(c) effectively becomes merge(a, b, c)
	 * - merge(a, merge(b, c)) effectively becomes merge(a, b, c)
	 * It does this by concatenating the sources arrays of
	 * any nested Merge sources, in effect "flattening" nested
	 * merge operations into a single merge.
	 */
	function mergeSources(streams) {
	  return new Merge(reduce(appendSources, [], streams));
	}

	function appendSources(sources, stream) {
	  var source = stream.source;
	  return source instanceof Merge ? sources.concat(source.sources) : sources.concat(source);
	}

	function Merge(sources) {
	  this.sources = sources;
	}

	Merge.prototype.run = function (sink, scheduler) {
	  var this$1 = this;

	  var l = this.sources.length;
	  var disposables = new Array(l);
	  var sinks = new Array(l);

	  var mergeSink = new MergeSink(disposables, sinks, sink);

	  for (var indexSink, i = 0; i < l; ++i) {
	    indexSink = sinks[i] = new _IndexSink2.default(i, mergeSink);
	    disposables[i] = this$1.sources[i].run(indexSink, scheduler);
	  }

	  return dispose.all(disposables);
	};

	function MergeSink(disposables, sinks, sink) {
	  this.sink = sink;
	  this.disposables = disposables;
	  this.activeCount = sinks.length;
	}

	MergeSink.prototype.error = _Pipe2.default.prototype.error;

	MergeSink.prototype.event = function (t, indexValue) {
	  this.sink.event(t, indexValue.value);
	};

	MergeSink.prototype.end = function (t, indexedValue) {
	  dispose.tryDispose(t, this.disposables[indexedValue.index], this.sink);
	  if (--this.activeCount === 0) {
	    this.sink.end(t, indexedValue.value);
	  }
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.sample = sample;
	exports.sampleWith = sampleWith;
	exports.sampleArray = sampleArray;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	var _invoke = __webpack_require__(53);

	var _invoke2 = _interopRequireDefault(_invoke);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * When an event arrives on sampler, emit the result of calling f with the latest
	 * values of all streams being sampled
	 * @param {function(...values):*} f function to apply to each set of sampled values
	 * @param {Stream} sampler streams will be sampled whenever an event arrives
	 *  on sampler
	 * @returns {Stream} stream of sampled and transformed values
	 */
	function sample(f, sampler /*, ...streams */) {
	  return sampleArray(f, sampler, base.drop(2, arguments));
	}

	/**
	 * When an event arrives on sampler, emit the latest event value from stream.
	 * @param {Stream} sampler stream of events at whose arrival time
	 *  stream's latest value will be propagated
	 * @param {Stream} stream stream of values
	 * @returns {Stream} sampled stream of values
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function sampleWith(sampler, stream) {
	  return new _Stream2.default(new Sampler(base.id, sampler.source, [stream.source]));
	}

	function sampleArray(f, sampler, streams) {
	  return new _Stream2.default(new Sampler(f, sampler.source, base.map(getSource, streams)));
	}

	function getSource(stream) {
	  return stream.source;
	}

	function Sampler(f, sampler, sources) {
	  this.f = f;
	  this.sampler = sampler;
	  this.sources = sources;
	}

	Sampler.prototype.run = function (sink, scheduler) {
	  var this$1 = this;

	  var l = this.sources.length;
	  var disposables = new Array(l + 1);
	  var sinks = new Array(l);

	  var sampleSink = new SampleSink(this.f, sinks, sink);

	  for (var hold, i = 0; i < l; ++i) {
	    hold = sinks[i] = new Hold(sampleSink);
	    disposables[i] = this$1.sources[i].run(hold, scheduler);
	  }

	  disposables[i] = this.sampler.run(sampleSink, scheduler);

	  return dispose.all(disposables);
	};

	function Hold(sink) {
	  this.sink = sink;
	  this.hasValue = false;
	}

	Hold.prototype.event = function (t, x) {
	  this.value = x;
	  this.hasValue = true;
	  this.sink._notify(this);
	};

	Hold.prototype.end = function () {};
	Hold.prototype.error = _Pipe2.default.prototype.error;

	function SampleSink(f, sinks, sink) {
	  this.f = f;
	  this.sinks = sinks;
	  this.sink = sink;
	  this.active = false;
	}

	SampleSink.prototype._notify = function () {
	  if (!this.active) {
	    this.active = this.sinks.every(hasValue);
	  }
	};

	SampleSink.prototype.event = function (t) {
	  if (this.active) {
	    this.sink.event(t, (0, _invoke2.default)(this.f, base.map(getValue, this.sinks)));
	  }
	};

	SampleSink.prototype.end = _Pipe2.default.prototype.end;
	SampleSink.prototype.error = _Pipe2.default.prototype.error;

	function hasValue(hold) {
	  return hold.hasValue;
	}

	function getValue(hold) {
	  return hold.value;
	}

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.zip = zip;
	exports.zipArray = zipArray;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _transform = __webpack_require__(41);

	var transform = _interopRequireWildcard(_transform);

	var _core = __webpack_require__(18);

	var core = _interopRequireWildcard(_core);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _IndexSink = __webpack_require__(52);

	var _IndexSink2 = _interopRequireDefault(_IndexSink);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _prelude = __webpack_require__(10);

	var base = _interopRequireWildcard(_prelude);

	var _invoke = __webpack_require__(53);

	var _invoke2 = _interopRequireDefault(_invoke);

	var _Queue = __webpack_require__(62);

	var _Queue2 = _interopRequireDefault(_Queue);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var map = base.map; /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	var tail = base.tail;

	/**
	 * Combine streams pairwise (or tuple-wise) by index by applying f to values
	 * at corresponding indices.  The returned stream ends when any of the input
	 * streams ends.
	 * @param {function} f function to combine values
	 * @returns {Stream} new stream with items at corresponding indices combined
	 *  using f
	 */
	function zip(f /*, ...streams */) {
	  return zipArray(f, tail(arguments));
	}

	/**
	* Combine streams pairwise (or tuple-wise) by index by applying f to values
	* at corresponding indices.  The returned stream ends when any of the input
	* streams ends.
	* @param {function} f function to combine values
	* @param {[Stream]} streams streams to zip using f
	* @returns {Stream} new stream with items at corresponding indices combined
	*  using f
	*/
	function zipArray(f, streams) {
	  return streams.length === 0 ? core.empty() : streams.length === 1 ? transform.map(f, streams[0]) : new _Stream2.default(new Zip(f, map(getSource, streams)));
	}

	function getSource(stream) {
	  return stream.source;
	}

	function Zip(f, sources) {
	  this.f = f;
	  this.sources = sources;
	}

	Zip.prototype.run = function (sink, scheduler) {
	  var this$1 = this;

	  var l = this.sources.length;
	  var disposables = new Array(l);
	  var sinks = new Array(l);
	  var buffers = new Array(l);

	  var zipSink = new ZipSink(this.f, buffers, sinks, sink);

	  for (var indexSink, i = 0; i < l; ++i) {
	    buffers[i] = new _Queue2.default();
	    indexSink = sinks[i] = new _IndexSink2.default(i, zipSink);
	    disposables[i] = this$1.sources[i].run(indexSink, scheduler);
	  }

	  return dispose.all(disposables);
	};

	function ZipSink(f, buffers, sinks, sink) {
	  this.f = f;
	  this.sinks = sinks;
	  this.sink = sink;
	  this.buffers = buffers;
	}

	ZipSink.prototype.event = function (t, indexedValue) {
	  // eslint-disable-line complexity
	  var buffers = this.buffers;
	  var buffer = buffers[indexedValue.index];

	  buffer.push(indexedValue.value);

	  if (buffer.length() === 1) {
	    if (!ready(this.buffers)) {
	      return;
	    }

	    emitZipped(this.f, t, buffers, this.sink);

	    if (ended(this.buffers, this.sinks)) {
	      this.sink.end(t, void 0);
	    }
	  }
	};

	ZipSink.prototype.end = function (t, indexedValue) {
	  var buffer = this.buffers[indexedValue.index];
	  if (buffer.isEmpty()) {
	    this.sink.end(t, indexedValue.value);
	  }
	};

	ZipSink.prototype.error = _Pipe2.default.prototype.error;

	function emitZipped(f, t, buffers, sink) {
	  sink.event(t, (0, _invoke2.default)(f, map(head, buffers)));
	}

	function head(buffer) {
	  return buffer.shift();
	}

	function ended(buffers, sinks) {
	  for (var i = 0, l = buffers.length; i < l; ++i) {
	    if (buffers[i].isEmpty() && !sinks[i].active) {
	      return true;
	    }
	  }
	  return false;
	}

	function ready(buffers) {
	  for (var i = 0, l = buffers.length; i < l; ++i) {
	    if (buffers[i].isEmpty()) {
	      return false;
	    }
	  }
	  return true;
	}

/***/ },
/* 62 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Queue;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	// Based on https://github.com/petkaantonov/deque

	function Queue(capPow2) {
	  this._capacity = capPow2 || 32;
	  this._length = 0;
	  this._head = 0;
	}

	Queue.prototype.push = function (x) {
	  var len = this._length;
	  this._checkCapacity(len + 1);

	  var i = this._head + len & this._capacity - 1;
	  this[i] = x;
	  this._length = len + 1;
	};

	Queue.prototype.shift = function () {
	  var head = this._head;
	  var x = this[head];

	  this[head] = void 0;
	  this._head = head + 1 & this._capacity - 1;
	  this._length--;
	  return x;
	};

	Queue.prototype.isEmpty = function () {
	  return this._length === 0;
	};

	Queue.prototype.length = function () {
	  return this._length;
	};

	Queue.prototype._checkCapacity = function (size) {
	  if (this._capacity < size) {
	    this._ensureCapacity(this._capacity << 1);
	  }
	};

	Queue.prototype._ensureCapacity = function (capacity) {
	  var oldCapacity = this._capacity;
	  this._capacity = capacity;

	  var last = this._head + this._length;

	  if (last > oldCapacity) {
	    copy(this, 0, this, oldCapacity, last & oldCapacity - 1);
	  }
	};

	function copy(src, srcIndex, dst, dstIndex, len) {
	  for (var j = 0; j < len; ++j) {
	    dst[j + dstIndex] = src[j + srcIndex];
	    src[j + srcIndex] = void 0;
	  }
	}

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.switch = undefined;
	exports.switchLatest = switchLatest;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Given a stream of streams, return a new stream that adopts the behavior
	 * of the most recent inner stream.
	 * @param {Stream} stream of streams on which to switch
	 * @returns {Stream} switching stream
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function switchLatest(stream) {
	  return new _Stream2.default(new Switch(stream.source));
	}

	exports.switch = switchLatest;


	function Switch(source) {
	  this.source = source;
	}

	Switch.prototype.run = function (sink, scheduler) {
	  var switchSink = new SwitchSink(sink, scheduler);
	  return dispose.all([switchSink, this.source.run(switchSink, scheduler)]);
	};

	function SwitchSink(sink, scheduler) {
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.current = null;
	  this.ended = false;
	}

	SwitchSink.prototype.event = function (t, stream) {
	  this._disposeCurrent(t); // TODO: capture the result of this dispose
	  this.current = new Segment(t, Infinity, this, this.sink);
	  this.current.disposable = stream.source.run(this.current, this.scheduler);
	};

	SwitchSink.prototype.end = function (t, x) {
	  this.ended = true;
	  this._checkEnd(t, x);
	};

	SwitchSink.prototype.error = function (t, e) {
	  this.ended = true;
	  this.sink.error(t, e);
	};

	SwitchSink.prototype.dispose = function () {
	  return this._disposeCurrent(this.scheduler.now());
	};

	SwitchSink.prototype._disposeCurrent = function (t) {
	  if (this.current !== null) {
	    return this.current._dispose(t);
	  }
	};

	SwitchSink.prototype._disposeInner = function (t, inner) {
	  inner._dispose(t); // TODO: capture the result of this dispose
	  if (inner === this.current) {
	    this.current = null;
	  }
	};

	SwitchSink.prototype._checkEnd = function (t, x) {
	  if (this.ended && this.current === null) {
	    this.sink.end(t, x);
	  }
	};

	SwitchSink.prototype._endInner = function (t, x, inner) {
	  this._disposeInner(t, inner);
	  this._checkEnd(t, x);
	};

	SwitchSink.prototype._errorInner = function (t, e, inner) {
	  this._disposeInner(t, inner);
	  this.sink.error(t, e);
	};

	function Segment(min, max, outer, sink) {
	  this.min = min;
	  this.max = max;
	  this.outer = outer;
	  this.sink = sink;
	  this.disposable = dispose.empty();
	}

	Segment.prototype.event = function (t, x) {
	  if (t < this.max) {
	    this.sink.event(Math.max(t, this.min), x);
	  }
	};

	Segment.prototype.end = function (t, x) {
	  this.outer._endInner(Math.max(t, this.min), x, this);
	};

	Segment.prototype.error = function (t, e) {
	  this.outer._errorInner(Math.max(t, this.min), e, this);
	};

	Segment.prototype._dispose = function (t) {
	  this.max = t;
	  dispose.tryDispose(t, this.disposable, this.sink);
	};

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.filter = filter;
	exports.skipRepeats = skipRepeats;
	exports.skipRepeatsWith = skipRepeatsWith;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _Filter = __webpack_require__(44);

	var _Filter2 = _interopRequireDefault(_Filter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Retain only items matching a predicate
	 * @param {function(x:*):boolean} p filtering predicate called for each item
	 * @param {Stream} stream stream to filter
	 * @returns {Stream} stream containing only items for which predicate returns truthy
	 */
	function filter(p, stream) {
	  return new _Stream2.default(_Filter2.default.create(p, stream.source));
	}

	/**
	 * Skip repeated events, using === to detect duplicates
	 * @param {Stream} stream stream from which to omit repeated events
	 * @returns {Stream} stream without repeated events
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function skipRepeats(stream) {
	  return skipRepeatsWith(same, stream);
	}

	/**
	 * Skip repeated events using the provided equals function to detect duplicates
	 * @param {function(a:*, b:*):boolean} equals optional function to compare items
	 * @param {Stream} stream stream from which to omit repeated events
	 * @returns {Stream} stream without repeated events
	 */
	function skipRepeatsWith(equals, stream) {
	  return new _Stream2.default(new SkipRepeats(equals, stream.source));
	}

	function SkipRepeats(equals, source) {
	  this.equals = equals;
	  this.source = source;
	}

	SkipRepeats.prototype.run = function (sink, scheduler) {
	  return this.source.run(new SkipRepeatsSink(this.equals, sink), scheduler);
	};

	function SkipRepeatsSink(equals, sink) {
	  this.equals = equals;
	  this.sink = sink;
	  this.value = void 0;
	  this.init = true;
	}

	SkipRepeatsSink.prototype.end = _Pipe2.default.prototype.end;
	SkipRepeatsSink.prototype.error = _Pipe2.default.prototype.error;

	SkipRepeatsSink.prototype.event = function (t, x) {
	  if (this.init) {
	    this.init = false;
	    this.value = x;
	    this.sink.event(t, x);
	  } else if (!this.equals(this.value, x)) {
	    this.value = x;
	    this.sink.event(t, x);
	  }
	};

	function same(a, b) {
	  return a === b;
	}

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.take = take;
	exports.skip = skip;
	exports.slice = slice;
	exports.takeWhile = takeWhile;
	exports.skipWhile = skipWhile;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _core = __webpack_require__(18);

	var core = _interopRequireWildcard(_core);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _Map = __webpack_require__(42);

	var _Map2 = _interopRequireDefault(_Map);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @param {number} n
	 * @param {Stream} stream
	 * @returns {Stream} new stream containing only up to the first n items from stream
	 */
	function take(n, stream) {
	  return slice(0, n, stream);
	}

	/**
	 * @param {number} n
	 * @param {Stream} stream
	 * @returns {Stream} new stream with the first n items removed
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function skip(n, stream) {
	  return slice(n, Infinity, stream);
	}

	/**
	 * Slice a stream by index. Negative start/end indexes are not supported
	 * @param {number} start
	 * @param {number} end
	 * @param {Stream} stream
	 * @returns {Stream} stream containing items where start <= index < end
	 */
	function slice(start, end, stream) {
	  return end <= start ? core.empty() : new _Stream2.default(sliceSource(start, end, stream.source));
	}

	function sliceSource(start, end, source) {
	  return source instanceof _Map2.default ? commuteMapSlice(start, end, source) : source instanceof Slice ? fuseSlice(start, end, source) : new Slice(start, end, source);
	}

	function commuteMapSlice(start, end, source) {
	  return _Map2.default.create(source.f, sliceSource(start, end, source.source));
	}

	function fuseSlice(start, end, source) {
	  start += source.min;
	  end = Math.min(end + source.min, source.max);
	  return new Slice(start, end, source.source);
	}

	function Slice(min, max, source) {
	  this.source = source;
	  this.min = min;
	  this.max = max;
	}

	Slice.prototype.run = function (sink, scheduler) {
	  return new SliceSink(this.min, this.max - this.min, this.source, sink, scheduler);
	};

	function SliceSink(skip, take, source, sink, scheduler) {
	  this.sink = sink;
	  this.skip = skip;
	  this.take = take;
	  this.disposable = dispose.once(source.run(this, scheduler));
	}

	SliceSink.prototype.end = _Pipe2.default.prototype.end;
	SliceSink.prototype.error = _Pipe2.default.prototype.error;

	SliceSink.prototype.event = function (t, x) {
	  // eslint-disable-line complexity
	  if (this.skip > 0) {
	    this.skip -= 1;
	    return;
	  }

	  if (this.take === 0) {
	    return;
	  }

	  this.take -= 1;
	  this.sink.event(t, x);
	  if (this.take === 0) {
	    this.dispose();
	    this.sink.end(t, x);
	  }
	};

	SliceSink.prototype.dispose = function () {
	  return this.disposable.dispose();
	};

	function takeWhile(p, stream) {
	  return new _Stream2.default(new TakeWhile(p, stream.source));
	}

	function TakeWhile(p, source) {
	  this.p = p;
	  this.source = source;
	}

	TakeWhile.prototype.run = function (sink, scheduler) {
	  return new TakeWhileSink(this.p, this.source, sink, scheduler);
	};

	function TakeWhileSink(p, source, sink, scheduler) {
	  this.p = p;
	  this.sink = sink;
	  this.active = true;
	  this.disposable = dispose.once(source.run(this, scheduler));
	}

	TakeWhileSink.prototype.end = _Pipe2.default.prototype.end;
	TakeWhileSink.prototype.error = _Pipe2.default.prototype.error;

	TakeWhileSink.prototype.event = function (t, x) {
	  if (!this.active) {
	    return;
	  }

	  var p = this.p;
	  this.active = p(x);
	  if (this.active) {
	    this.sink.event(t, x);
	  } else {
	    this.dispose();
	    this.sink.end(t, x);
	  }
	};

	TakeWhileSink.prototype.dispose = function () {
	  return this.disposable.dispose();
	};

	function skipWhile(p, stream) {
	  return new _Stream2.default(new SkipWhile(p, stream.source));
	}

	function SkipWhile(p, source) {
	  this.p = p;
	  this.source = source;
	}

	SkipWhile.prototype.run = function (sink, scheduler) {
	  return this.source.run(new SkipWhileSink(this.p, sink), scheduler);
	};

	function SkipWhileSink(p, sink) {
	  this.p = p;
	  this.sink = sink;
	  this.skipping = true;
	}

	SkipWhileSink.prototype.end = _Pipe2.default.prototype.end;
	SkipWhileSink.prototype.error = _Pipe2.default.prototype.error;

	SkipWhileSink.prototype.event = function (t, x) {
	  if (this.skipping) {
	    var p = this.p;
	    this.skipping = p(x);
	    if (this.skipping) {
	      return;
	    }
	  }

	  this.sink.event(t, x);
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.takeUntil = takeUntil;
	exports.skipUntil = skipUntil;
	exports.during = during;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _flatMap = __webpack_require__(55);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function takeUntil(signal, stream) {
	  return new _Stream2.default(new Until(signal.source, stream.source));
	}

	function skipUntil(signal, stream) {
	  return new _Stream2.default(new Since(signal.source, stream.source));
	}

	function during(timeWindow, stream) {
	  return takeUntil((0, _flatMap.join)(timeWindow), skipUntil(timeWindow, stream));
	}

	function Until(maxSignal, source) {
	  this.maxSignal = maxSignal;
	  this.source = source;
	}

	Until.prototype.run = function (sink, scheduler) {
	  var min = new Bound(-Infinity, sink);
	  var max = new UpperBound(this.maxSignal, sink, scheduler);
	  var disposable = this.source.run(new TimeWindowSink(min, max, sink), scheduler);

	  return dispose.all([min, max, disposable]);
	};

	function Since(minSignal, source) {
	  this.minSignal = minSignal;
	  this.source = source;
	}

	Since.prototype.run = function (sink, scheduler) {
	  var min = new LowerBound(this.minSignal, sink, scheduler);
	  var max = new Bound(Infinity, sink);
	  var disposable = this.source.run(new TimeWindowSink(min, max, sink), scheduler);

	  return dispose.all([min, max, disposable]);
	};

	function Bound(value, sink) {
	  this.value = value;
	  this.sink = sink;
	}

	Bound.prototype.error = _Pipe2.default.prototype.error;
	Bound.prototype.event = noop;
	Bound.prototype.end = noop;
	Bound.prototype.dispose = noop;

	function TimeWindowSink(min, max, sink) {
	  this.min = min;
	  this.max = max;
	  this.sink = sink;
	}

	TimeWindowSink.prototype.event = function (t, x) {
	  if (t >= this.min.value && t < this.max.value) {
	    this.sink.event(t, x);
	  }
	};

	TimeWindowSink.prototype.error = _Pipe2.default.prototype.error;
	TimeWindowSink.prototype.end = _Pipe2.default.prototype.end;

	function LowerBound(signal, sink, scheduler) {
	  this.value = Infinity;
	  this.sink = sink;
	  this.disposable = signal.run(this, scheduler);
	}

	LowerBound.prototype.event = function (t /*, x */) {
	  if (t < this.value) {
	    this.value = t;
	  }
	};

	LowerBound.prototype.end = noop;
	LowerBound.prototype.error = _Pipe2.default.prototype.error;

	LowerBound.prototype.dispose = function () {
	  return this.disposable.dispose();
	};

	function UpperBound(signal, sink, scheduler) {
	  this.value = Infinity;
	  this.sink = sink;
	  this.disposable = signal.run(this, scheduler);
	}

	UpperBound.prototype.event = function (t, x) {
	  if (t < this.value) {
	    this.value = t;
	    this.sink.end(t, x);
	  }
	};

	UpperBound.prototype.end = noop;
	UpperBound.prototype.error = _Pipe2.default.prototype.error;

	UpperBound.prototype.dispose = function () {
	  return this.disposable.dispose();
	};

	function noop() {}

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.delay = delay;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @param {Number} delayTime milliseconds to delay each item
	 * @param {Stream} stream
	 * @returns {Stream} new stream containing the same items, but delayed by ms
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function delay(delayTime, stream) {
	  return delayTime <= 0 ? stream : new _Stream2.default(new Delay(delayTime, stream.source));
	}

	function Delay(dt, source) {
	  this.dt = dt;
	  this.source = source;
	}

	Delay.prototype.run = function (sink, scheduler) {
	  var delaySink = new DelaySink(this.dt, sink, scheduler);
	  return dispose.all([delaySink, this.source.run(delaySink, scheduler)]);
	};

	function DelaySink(dt, sink, scheduler) {
	  this.dt = dt;
	  this.sink = sink;
	  this.scheduler = scheduler;
	}

	DelaySink.prototype.dispose = function () {
	  var self = this;
	  this.scheduler.cancelAll(function (task) {
	    return task.sink === self.sink;
	  });
	};

	DelaySink.prototype.event = function (t, x) {
	  this.scheduler.delay(this.dt, _PropagateTask2.default.event(x, this.sink));
	};

	DelaySink.prototype.end = function (t, x) {
	  this.scheduler.delay(this.dt, _PropagateTask2.default.end(x, this.sink));
	};

	DelaySink.prototype.error = _Pipe2.default.prototype.error;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.timestamp = timestamp;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function timestamp(stream) {
	  return new _Stream2.default(new Timestamp(stream.source));
	}

	function Timestamp(source) {
	  this.source = source;
	}

	Timestamp.prototype.run = function (sink, scheduler) {
	  return this.source.run(new TimestampSink(sink), scheduler);
	};

	function TimestampSink(sink) {
	  this.sink = sink;
	}

	TimestampSink.prototype.end = _Pipe2.default.prototype.end;
	TimestampSink.prototype.error = _Pipe2.default.prototype.error;

	TimestampSink.prototype.event = function (t, x) {
	  this.sink.event(t, { time: t, value: x });
	};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.throttle = throttle;
	exports.debounce = debounce;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _Pipe = __webpack_require__(43);

	var _Pipe2 = _interopRequireDefault(_Pipe);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	var _Map = __webpack_require__(42);

	var _Map2 = _interopRequireDefault(_Map);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Limit the rate of events by suppressing events that occur too often
	 * @param {Number} period time to suppress events
	 * @param {Stream} stream
	 * @returns {Stream}
	 */
	function throttle(period, stream) {
	  return new _Stream2.default(throttleSource(period, stream.source));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function throttleSource(period, source) {
	  return source instanceof _Map2.default ? commuteMapThrottle(period, source) : source instanceof Throttle ? fuseThrottle(period, source) : new Throttle(period, source);
	}

	function commuteMapThrottle(period, source) {
	  return _Map2.default.create(source.f, throttleSource(period, source.source));
	}

	function fuseThrottle(period, source) {
	  return new Throttle(Math.max(period, source.period), source.source);
	}

	function Throttle(period, source) {
	  this.period = period;
	  this.source = source;
	}

	Throttle.prototype.run = function (sink, scheduler) {
	  return this.source.run(new ThrottleSink(this.period, sink), scheduler);
	};

	function ThrottleSink(period, sink) {
	  this.time = 0;
	  this.period = period;
	  this.sink = sink;
	}

	ThrottleSink.prototype.event = function (t, x) {
	  if (t >= this.time) {
	    this.time = t + this.period;
	    this.sink.event(t, x);
	  }
	};

	ThrottleSink.prototype.end = _Pipe2.default.prototype.end;

	ThrottleSink.prototype.error = _Pipe2.default.prototype.error;

	/**
	 * Wait for a burst of events to subside and emit only the last event in the burst
	 * @param {Number} period events occuring more frequently than this
	 *  will be suppressed
	 * @param {Stream} stream stream to debounce
	 * @returns {Stream} new debounced stream
	 */
	function debounce(period, stream) {
	  return new _Stream2.default(new Debounce(period, stream.source));
	}

	function Debounce(dt, source) {
	  this.dt = dt;
	  this.source = source;
	}

	Debounce.prototype.run = function (sink, scheduler) {
	  return new DebounceSink(this.dt, this.source, sink, scheduler);
	};

	function DebounceSink(dt, source, sink, scheduler) {
	  this.dt = dt;
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.value = void 0;
	  this.timer = null;

	  var sourceDisposable = source.run(this, scheduler);
	  this.disposable = dispose.all([this, sourceDisposable]);
	}

	DebounceSink.prototype.event = function (t, x) {
	  this._clearTimer();
	  this.value = x;
	  this.timer = this.scheduler.delay(this.dt, _PropagateTask2.default.event(x, this.sink));
	};

	DebounceSink.prototype.end = function (t, x) {
	  if (this._clearTimer()) {
	    this.sink.event(t, this.value);
	    this.value = void 0;
	  }
	  this.sink.end(t, x);
	};

	DebounceSink.prototype.error = function (t, x) {
	  this._clearTimer();
	  this.sink.error(t, x);
	};

	DebounceSink.prototype.dispose = function () {
	  this._clearTimer();
	};

	DebounceSink.prototype._clearTimer = function () {
	  if (this.timer === null) {
	    return false;
	  }
	  this.timer.dispose();
	  this.timer = null;
	  return true;
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fromPromise = fromPromise;
	exports.awaitPromises = awaitPromises;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _fatalError = __webpack_require__(20);

	var _fatalError2 = _interopRequireDefault(_fatalError);

	var _core = __webpack_require__(18);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Create a stream containing only the promise's fulfillment
	 * value at the time it fulfills.
	 * @param {Promise<T>} p promise
	 * @return {Stream<T>} stream containing promise's fulfillment value.
	 *  If the promise rejects, the stream will error
	 */
	function fromPromise(p) {
	  return awaitPromises((0, _core.of)(p));
	}

	/**
	 * Turn a Stream<Promise<T>> into Stream<T> by awaiting each promise.
	 * Event order is preserved.
	 * @param {Stream<Promise<T>>} stream
	 * @return {Stream<T>} stream of fulfillment values.  The stream will
	 * error if any promise rejects.
	 */
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function awaitPromises(stream) {
	  return new _Stream2.default(new Await(stream.source));
	}

	function Await(source) {
	  this.source = source;
	}

	Await.prototype.run = function (sink, scheduler) {
	  return this.source.run(new AwaitSink(sink, scheduler), scheduler);
	};

	function AwaitSink(sink, scheduler) {
	  this.sink = sink;
	  this.scheduler = scheduler;
	  this.queue = Promise.resolve();
	  var self = this;

	  // Pre-create closures, to avoid creating them per event
	  this._eventBound = function (x) {
	    self.sink.event(self.scheduler.now(), x);
	  };

	  this._endBound = function (x) {
	    self.sink.end(self.scheduler.now(), x);
	  };

	  this._errorBound = function (e) {
	    self.sink.error(self.scheduler.now(), e);
	  };
	}

	AwaitSink.prototype.event = function (t, promise) {
	  var self = this;
	  this.queue = this.queue.then(function () {
	    return self._event(promise);
	  }).catch(this._errorBound);
	};

	AwaitSink.prototype.end = function (t, x) {
	  var self = this;
	  this.queue = this.queue.then(function () {
	    return self._end(x);
	  }).catch(this._errorBound);
	};

	AwaitSink.prototype.error = function (t, e) {
	  var self = this;
	  // Don't resolve error values, propagate directly
	  this.queue = this.queue.then(function () {
	    return self._errorBound(e);
	  }).catch(_fatalError2.default);
	};

	AwaitSink.prototype._event = function (promise) {
	  return promise.then(this._eventBound);
	};

	AwaitSink.prototype._end = function (x) {
	  return Promise.resolve(x).then(this._endBound);
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.flatMapError = undefined;
	exports.recoverWith = recoverWith;
	exports.throwError = throwError;

	var _Stream = __webpack_require__(4);

	var _Stream2 = _interopRequireDefault(_Stream);

	var _SafeSink = __webpack_require__(72);

	var _SafeSink2 = _interopRequireDefault(_SafeSink);

	var _dispose = __webpack_require__(6);

	var dispose = _interopRequireWildcard(_dispose);

	var _tryEvent = __webpack_require__(11);

	var tryEvent = _interopRequireWildcard(_tryEvent);

	var _PropagateTask = __webpack_require__(19);

	var _PropagateTask2 = _interopRequireDefault(_PropagateTask);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * If stream encounters an error, recover and continue with items from stream
	 * returned by f.
	 * @param {function(error:*):Stream} f function which returns a new stream
	 * @param {Stream} stream
	 * @returns {Stream} new stream which will recover from an error by calling f
	 */
	function recoverWith(f, stream) {
	  return new _Stream2.default(new RecoverWith(f, stream.source));
	} /** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	var flatMapError = exports.flatMapError = recoverWith;

	/**
	 * Create a stream containing only an error
	 * @param {*} e error value, preferably an Error or Error subtype
	 * @returns {Stream} new stream containing only an error
	 */
	function throwError(e) {
	  return new _Stream2.default(new ErrorSource(e));
	}

	function ErrorSource(e) {
	  this.value = e;
	}

	ErrorSource.prototype.run = function (sink, scheduler) {
	  return scheduler.asap(new _PropagateTask2.default(runError, this.value, sink));
	};

	function runError(t, e, sink) {
	  sink.error(t, e);
	}

	function RecoverWith(f, source) {
	  this.f = f;
	  this.source = source;
	}

	RecoverWith.prototype.run = function (sink, scheduler) {
	  return new RecoverWithSink(this.f, this.source, sink, scheduler);
	};

	function RecoverWithSink(f, source, sink, scheduler) {
	  this.f = f;
	  this.sink = new _SafeSink2.default(sink);
	  this.scheduler = scheduler;
	  this.disposable = source.run(this, scheduler);
	}

	RecoverWithSink.prototype.event = function (t, x) {
	  tryEvent.tryEvent(t, x, this.sink);
	};

	RecoverWithSink.prototype.end = function (t, x) {
	  tryEvent.tryEnd(t, x, this.sink);
	};

	RecoverWithSink.prototype.error = function (t, e) {
	  var nextSink = this.sink.disable();

	  dispose.tryDispose(t, this.disposable, this.sink);
	  this._startNext(t, e, nextSink);
	};

	RecoverWithSink.prototype._startNext = function (t, x, sink) {
	  try {
	    this.disposable = this._continue(this.f, x, sink);
	  } catch (e) {
	    sink.error(t, e);
	  }
	};

	RecoverWithSink.prototype._continue = function (f, x, sink) {
	  var stream = f(x);
	  return stream.source.run(sink, this.scheduler);
	};

	RecoverWithSink.prototype.dispose = function () {
	  return this.disposable.dispose();
	};

/***/ },
/* 72 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = SafeSink;
	/** @license MIT License (c) copyright 2010-2016 original author or authors */
	/** @author Brian Cavalier */
	/** @author John Hann */

	function SafeSink(sink) {
	  this.sink = sink;
	  this.active = true;
	}

	SafeSink.prototype.event = function (t, x) {
	  if (!this.active) {
	    return;
	  }
	  this.sink.event(t, x);
	};

	SafeSink.prototype.end = function (t, x) {
	  if (!this.active) {
	    return;
	  }
	  this.disable();
	  this.sink.end(t, x);
	};

	SafeSink.prototype.error = function (t, e) {
	  this.disable();
	  this.sink.error(t, e);
	};

	SafeSink.prototype.disable = function () {
	  this.active = false;
	  return this.sink;
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(10)) :
	  typeof define === 'function' && define.amd ? define(['exports', '@most/prelude'], factory) :
	  (factory((global.mostMulticast = global.mostMulticast || {}),global.mostPrelude));
	}(this, (function (exports,_most_prelude) { 'use strict';

	var MulticastDisposable = function MulticastDisposable (source, sink) {
	  this.source = source
	  this.sink = sink
	  this.disposed = false
	};

	MulticastDisposable.prototype.dispose = function dispose () {
	  if (this.disposed) {
	    return
	  }
	  this.disposed = true
	  var remaining = this.source.remove(this.sink)
	  return remaining === 0 && this.source._dispose()
	};

	function tryEvent (t, x, sink) {
	  try {
	    sink.event(t, x)
	  } catch (e) {
	    sink.error(t, e)
	  }
	}

	function tryEnd (t, x, sink) {
	  try {
	    sink.end(t, x)
	  } catch (e) {
	    sink.error(t, e)
	  }
	}

	var dispose = function (disposable) { return disposable.dispose(); }

	var emptyDisposable = {
	  dispose: function dispose$1 () {}
	}

	var MulticastSource = function MulticastSource (source) {
	  this.source = source
	  this.sinks = []
	  this._disposable = emptyDisposable
	};

	MulticastSource.prototype.run = function run (sink, scheduler) {
	  var n = this.add(sink)
	  if (n === 1) {
	    this._disposable = this.source.run(this, scheduler)
	  }
	  return new MulticastDisposable(this, sink)
	};

	MulticastSource.prototype._dispose = function _dispose () {
	  var disposable = this._disposable
	  this._disposable = emptyDisposable
	  return Promise.resolve(disposable).then(dispose)
	};

	MulticastSource.prototype.add = function add (sink) {
	  this.sinks = _most_prelude.append(sink, this.sinks)
	  return this.sinks.length
	};

	MulticastSource.prototype.remove = function remove$1 (sink) {
	  var i = _most_prelude.findIndex(sink, this.sinks)
	  // istanbul ignore next
	  if (i >= 0) {
	    this.sinks = _most_prelude.remove(i, this.sinks)
	  }

	  return this.sinks.length
	};

	MulticastSource.prototype.event = function event (time, value) {
	  var s = this.sinks
	  if (s.length === 1) {
	    return s[0].event(time, value)
	  }
	  for (var i = 0; i < s.length; ++i) {
	    tryEvent(time, value, s[i])
	  }
	};

	MulticastSource.prototype.end = function end (time, value) {
	  var s = this.sinks
	  for (var i = 0; i < s.length; ++i) {
	    tryEnd(time, value, s[i])
	  }
	};

	MulticastSource.prototype.error = function error (time, err) {
	  var s = this.sinks
	  for (var i = 0; i < s.length; ++i) {
	    s[i].error(time, err)
	  }
	};

	function multicast (stream) {
	  var source = stream.source
	  return source instanceof MulticastSource
	    ? stream
	    : new stream.constructor(new MulticastSource(source))
	}

	exports['default'] = multicast;
	exports.MulticastSource = MulticastSource;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));
	//# sourceMappingURL=multicast.js.map


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _ramda = __webpack_require__(1);

	var _ramda2 = _interopRequireDefault(_ramda);

	var _three = __webpack_require__(75);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // lib


	/**
	 * Constructor for peppers ghost effect renderer
	 * @param {THREE.WebGLRenderer} renderer
	 */
	var pepper = function pepper(renderer) {
	  var _this = this;

	  // Public vars
	  this.pos = new _three.Vector3(); // Position
	  this.quat = new _three.Quaternion(); // Quaternion
	  this.scale = new _three.Vector3(); // Scale :P
	  this.viewDistance = 10;

	  this.renderer = renderer;
	  // Allow for rendering multiple times in single frame
	  this.renderer.autoClear = false;

	  // Private vars
	  // Cameras
	  var cameras = [new _three.PerspectiveCamera(), new _three.PerspectiveCamera(), new _three.PerspectiveCamera(), new _three.PerspectiveCamera()];

	  // Sizing
	  var halfWidth = void 0;
	  var height = void 0;
	  var width = void 0;

	  /**
	   * Sets effect height and widht
	   * @param {int} w : width of viewport
	   * @param {int} h : height of viewport
	   * @return this
	   */
	  this.setSize = function (w, h) {
	    renderer.setSize(w, h);
	    halfWidth = w / 2;

	    width = w > h ? height = h / 3 : height = w / 3;
	  };

	  /**
	   * Sets effect properties from camera object
	   * @param {THREE.PerspectiveCamera} camera
	   * @return this
	   */
	  this.setFromCamera = function (camera) {
	    if (_ramda2.default.isNil(camera.parent)) camera.updateMatrixWorld();else camera.parent.updateMatrixWorld();

	    // apply camera transforms to pepper effect
	    camera.matrixWorld.decompose(_this.pos, _this.quat, _this.scale);
	  };

	  /**
	   * Updated camera position and sets look at
	   * @param {THREE.Vector3} center : center of scene
	   * @return {object} cameras : all updated cameras
	   */
	  var updateCameras = function updateCameras(center) {
	    _ramda2.default.forEach(function (camera) {
	      camera.position.copy(_this.pos);
	      camera.quaternion.copy(_this.quat);
	    }, cameras);

	    var front = cameras[0];
	    var back = cameras[1];
	    var left = cameras[2];
	    var right = cameras[3];


	    front.translateZ(_this.viewDistance);
	    front.lookAt(center);

	    back.translateZ(-_this.viewDistance);
	    back.lookAt(center);
	    back.rotation.z += Math.PI;

	    left.translateX(-_this.viewDistance);
	    left.lookAt(center);
	    left.rotation.x += Math.PI / 2;

	    right.translateX(_this.viewDistance);
	    right.lookAt(center);
	    right.rotation.x += Math.PI / 2;

	    return cameras;
	  };

	  /**
	   * Updated camera position and sets look at
	   * @param {THREE.Scene} scene : scene to render
	   * @param {THREE.PerspectiveCamera} camera : camera to render with
	   * @param {Array[float]} cutParams : 4 length array for renderer scissor
	   */
	  var renderCut = function renderCut(scene, camera, cutParams) {
	    renderer.setScissor.apply(renderer, _toConsumableArray(cutParams));
	    renderer.setViewport.apply(renderer, _toConsumableArray(cutParams));
	    renderer.render(scene, camera);
	  };

	  /**
	   * Renders split view of scene
	   * @param {THREE.Scene} scene : scene to render
	   * @return this
	   */
	  this.render = function (scene) {
	    // Update and get reference to cameras
	    var _updateCameras = updateCameras(scene.position);

	    var _updateCameras2 = _slicedToArray(_updateCameras, 4);

	    var front = _updateCameras2[0];
	    var back = _updateCameras2[1];
	    var left = _updateCameras2[2];
	    var right = _updateCameras2[3];


	    _this.renderer.clear();
	    _this.renderer.setScissorTest(true);

	    var cutScene = _ramda2.default.curry(renderCut)(scene);

	    var cutStart = halfWidth - width / 2;
	    // cut front
	    cutScene(front, [cutStart, height * 2, width, height]);
	    // cut back
	    cutScene(back, [cutStart, 0, width, height]);
	    // cut left
	    cutScene(left, [cutStart - width, height, width, height]);
	    // cut right
	    cutScene(right, [halfWidth + width / 2, height, width, height]);

	    renderer.setScissorTest(false);
	  };
	};

	exports.default = pepper;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
	     true ? factory(exports) :
	    typeof define === 'function' && define.amd ? define(['exports'], factory) :
	    (factory((global.THREE = global.THREE || {})));
	}(this, (function (exports) { 'use strict';

	    // Polyfills

	    if ( Number.EPSILON === undefined ) {

	    	Number.EPSILON = Math.pow( 2, - 52 );

	    }

	    //

	    if ( Math.sign === undefined ) {

	    	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

	    	Math.sign = function ( x ) {

	    		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

	    	};

	    }

	    if ( Function.prototype.name === undefined ) {

	    	// Missing in IE9-11.
	    	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

	    	Object.defineProperty( Function.prototype, 'name', {

	    		get: function () {

	    			return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

	    		}

	    	} );

	    }

	    if ( Object.assign === undefined ) {

	    	// Missing in IE.
	    	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

	    	( function () {

	    		Object.assign = function ( target ) {

	    			'use strict';

	    			if ( target === undefined || target === null ) {

	    				throw new TypeError( 'Cannot convert undefined or null to object' );

	    			}

	    			var output = Object( target );

	    			for ( var index = 1; index < arguments.length; index ++ ) {

	    				var source = arguments[ index ];

	    				if ( source !== undefined && source !== null ) {

	    					for ( var nextKey in source ) {

	    						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

	    							output[ nextKey ] = source[ nextKey ];

	    						}

	    					}

	    				}

	    			}

	    			return output;

	    		};

	    	} )();

	    }

	    /**
	     * https://github.com/mrdoob/eventdispatcher.js/
	     */

	    function EventDispatcher() {}

	    Object.assign( EventDispatcher.prototype, {

	    	addEventListener: function ( type, listener ) {

	    		if ( this._listeners === undefined ) this._listeners = {};

	    		var listeners = this._listeners;

	    		if ( listeners[ type ] === undefined ) {

	    			listeners[ type ] = [];

	    		}

	    		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

	    			listeners[ type ].push( listener );

	    		}

	    	},

	    	hasEventListener: function ( type, listener ) {

	    		if ( this._listeners === undefined ) return false;

	    		var listeners = this._listeners;

	    		if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

	    			return true;

	    		}

	    		return false;

	    	},

	    	removeEventListener: function ( type, listener ) {

	    		if ( this._listeners === undefined ) return;

	    		var listeners = this._listeners;
	    		var listenerArray = listeners[ type ];

	    		if ( listenerArray !== undefined ) {

	    			var index = listenerArray.indexOf( listener );

	    			if ( index !== - 1 ) {

	    				listenerArray.splice( index, 1 );

	    			}

	    		}

	    	},

	    	dispatchEvent: function ( event ) {

	    		if ( this._listeners === undefined ) return;

	    		var listeners = this._listeners;
	    		var listenerArray = listeners[ event.type ];

	    		if ( listenerArray !== undefined ) {

	    			event.target = this;

	    			var array = [], i = 0;
	    			var length = listenerArray.length;

	    			for ( i = 0; i < length; i ++ ) {

	    				array[ i ] = listenerArray[ i ];

	    			}

	    			for ( i = 0; i < length; i ++ ) {

	    				array[ i ].call( this, event );

	    			}

	    		}

	    	}

	    } );

	    var REVISION = '81';
	    var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
	    var CullFaceNone = 0;
	    var CullFaceBack = 1;
	    var CullFaceFront = 2;
	    var CullFaceFrontBack = 3;
	    var FrontFaceDirectionCW = 0;
	    var FrontFaceDirectionCCW = 1;
	    var BasicShadowMap = 0;
	    var PCFShadowMap = 1;
	    var PCFSoftShadowMap = 2;
	    var FrontSide = 0;
	    var BackSide = 1;
	    var DoubleSide = 2;
	    var FlatShading = 1;
	    var SmoothShading = 2;
	    var NoColors = 0;
	    var FaceColors = 1;
	    var VertexColors = 2;
	    var NoBlending = 0;
	    var NormalBlending = 1;
	    var AdditiveBlending = 2;
	    var SubtractiveBlending = 3;
	    var MultiplyBlending = 4;
	    var CustomBlending = 5;
	    var BlendingMode = {
	        NoBlending: NoBlending,
	        NormalBlending: NormalBlending,
	        AdditiveBlending: AdditiveBlending,
	        SubtractiveBlending: SubtractiveBlending,
	        MultiplyBlending: MultiplyBlending,
	        CustomBlending: CustomBlending
	    };
	    var AddEquation = 100;
	    var SubtractEquation = 101;
	    var ReverseSubtractEquation = 102;
	    var MinEquation = 103;
	    var MaxEquation = 104;
	    var ZeroFactor = 200;
	    var OneFactor = 201;
	    var SrcColorFactor = 202;
	    var OneMinusSrcColorFactor = 203;
	    var SrcAlphaFactor = 204;
	    var OneMinusSrcAlphaFactor = 205;
	    var DstAlphaFactor = 206;
	    var OneMinusDstAlphaFactor = 207;
	    var DstColorFactor = 208;
	    var OneMinusDstColorFactor = 209;
	    var SrcAlphaSaturateFactor = 210;
	    var NeverDepth = 0;
	    var AlwaysDepth = 1;
	    var LessDepth = 2;
	    var LessEqualDepth = 3;
	    var EqualDepth = 4;
	    var GreaterEqualDepth = 5;
	    var GreaterDepth = 6;
	    var NotEqualDepth = 7;
	    var MultiplyOperation = 0;
	    var MixOperation = 1;
	    var AddOperation = 2;
	    var NoToneMapping = 0;
	    var LinearToneMapping = 1;
	    var ReinhardToneMapping = 2;
	    var Uncharted2ToneMapping = 3;
	    var CineonToneMapping = 4;
	    var UVMapping = 300;
	    var CubeReflectionMapping = 301;
	    var CubeRefractionMapping = 302;
	    var EquirectangularReflectionMapping = 303;
	    var EquirectangularRefractionMapping = 304;
	    var SphericalReflectionMapping = 305;
	    var CubeUVReflectionMapping = 306;
	    var CubeUVRefractionMapping = 307;
	    var TextureMapping = {
	        UVMapping: UVMapping,
	        CubeReflectionMapping: CubeReflectionMapping,
	        CubeRefractionMapping: CubeRefractionMapping,
	        EquirectangularReflectionMapping: EquirectangularReflectionMapping,
	        EquirectangularRefractionMapping: EquirectangularRefractionMapping,
	        SphericalReflectionMapping: SphericalReflectionMapping,
	        CubeUVReflectionMapping: CubeUVReflectionMapping,
	        CubeUVRefractionMapping: CubeUVRefractionMapping
	    };
	    var RepeatWrapping = 1000;
	    var ClampToEdgeWrapping = 1001;
	    var MirroredRepeatWrapping = 1002;
	    var TextureWrapping = {
	        RepeatWrapping: RepeatWrapping,
	        ClampToEdgeWrapping: ClampToEdgeWrapping,
	        MirroredRepeatWrapping: MirroredRepeatWrapping
	    };
	    var NearestFilter = 1003;
	    var NearestMipMapNearestFilter = 1004;
	    var NearestMipMapLinearFilter = 1005;
	    var LinearFilter = 1006;
	    var LinearMipMapNearestFilter = 1007;
	    var LinearMipMapLinearFilter = 1008;
	    var TextureFilter = {
	        NearestFilter: NearestFilter,
	        NearestMipMapNearestFilter: NearestMipMapNearestFilter,
	        NearestMipMapLinearFilter: NearestMipMapLinearFilter,
	        LinearFilter: LinearFilter,
	        LinearMipMapNearestFilter: LinearMipMapNearestFilter,
	        LinearMipMapLinearFilter: LinearMipMapLinearFilter
	    };
	    var UnsignedByteType = 1009;
	    var ByteType = 1010;
	    var ShortType = 1011;
	    var UnsignedShortType = 1012;
	    var IntType = 1013;
	    var UnsignedIntType = 1014;
	    var FloatType = 1015;
	    var HalfFloatType = 1016;
	    var UnsignedShort4444Type = 1017;
	    var UnsignedShort5551Type = 1018;
	    var UnsignedShort565Type = 1019;
	    var UnsignedInt248Type = 1020;
	    var AlphaFormat = 1021;
	    var RGBFormat = 1022;
	    var RGBAFormat = 1023;
	    var LuminanceFormat = 1024;
	    var LuminanceAlphaFormat = 1025;
	    var RGBEFormat = RGBAFormat;
	    var DepthFormat = 1026;
	    var DepthStencilFormat = 1027;
	    var RGB_S3TC_DXT1_Format = 2001;
	    var RGBA_S3TC_DXT1_Format = 2002;
	    var RGBA_S3TC_DXT3_Format = 2003;
	    var RGBA_S3TC_DXT5_Format = 2004;
	    var RGB_PVRTC_4BPPV1_Format = 2100;
	    var RGB_PVRTC_2BPPV1_Format = 2101;
	    var RGBA_PVRTC_4BPPV1_Format = 2102;
	    var RGBA_PVRTC_2BPPV1_Format = 2103;
	    var RGB_ETC1_Format = 2151;
	    var LoopOnce = 2200;
	    var LoopRepeat = 2201;
	    var LoopPingPong = 2202;
	    var InterpolateDiscrete = 2300;
	    var InterpolateLinear = 2301;
	    var InterpolateSmooth = 2302;
	    var ZeroCurvatureEnding = 2400;
	    var ZeroSlopeEnding = 2401;
	    var WrapAroundEnding = 2402;
	    var TrianglesDrawMode = 0;
	    var TriangleStripDrawMode = 1;
	    var TriangleFanDrawMode = 2;
	    var LinearEncoding = 3000;
	    var sRGBEncoding = 3001;
	    var GammaEncoding = 3007;
	    var RGBEEncoding = 3002;
	    var LogLuvEncoding = 3003;
	    var RGBM7Encoding = 3004;
	    var RGBM16Encoding = 3005;
	    var RGBDEncoding = 3006;
	    var BasicDepthPacking = 3200;
	    var RGBADepthPacking = 3201;

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     */

	    exports.Math = {

	    	DEG2RAD: Math.PI / 180,
	    	RAD2DEG: 180 / Math.PI,

	    	generateUUID: function () {

	    		// http://www.broofa.com/Tools/Math.uuid.htm

	    		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
	    		var uuid = new Array( 36 );
	    		var rnd = 0, r;

	    		return function generateUUID() {

	    			for ( var i = 0; i < 36; i ++ ) {

	    				if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

	    					uuid[ i ] = '-';

	    				} else if ( i === 14 ) {

	    					uuid[ i ] = '4';

	    				} else {

	    					if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
	    					r = rnd & 0xf;
	    					rnd = rnd >> 4;
	    					uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

	    				}

	    			}

	    			return uuid.join( '' );

	    		};

	    	}(),

	    	clamp: function ( value, min, max ) {

	    		return Math.max( min, Math.min( max, value ) );

	    	},

	    	// compute euclidian modulo of m % n
	    	// https://en.wikipedia.org/wiki/Modulo_operation

	    	euclideanModulo: function ( n, m ) {

	    		return ( ( n % m ) + m ) % m;

	    	},

	    	// Linear mapping from range <a1, a2> to range <b1, b2>

	    	mapLinear: function ( x, a1, a2, b1, b2 ) {

	    		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	    	},

	    	// http://en.wikipedia.org/wiki/Smoothstep

	    	smoothstep: function ( x, min, max ) {

	    		if ( x <= min ) return 0;
	    		if ( x >= max ) return 1;

	    		x = ( x - min ) / ( max - min );

	    		return x * x * ( 3 - 2 * x );

	    	},

	    	smootherstep: function ( x, min, max ) {

	    		if ( x <= min ) return 0;
	    		if ( x >= max ) return 1;

	    		x = ( x - min ) / ( max - min );

	    		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	    	},

	    	random16: function () {

	    		console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
	    		return Math.random();

	    	},

	    	// Random integer from <low, high> interval

	    	randInt: function ( low, high ) {

	    		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	    	},

	    	// Random float from <low, high> interval

	    	randFloat: function ( low, high ) {

	    		return low + Math.random() * ( high - low );

	    	},

	    	// Random float from <-range/2, range/2> interval

	    	randFloatSpread: function ( range ) {

	    		return range * ( 0.5 - Math.random() );

	    	},

	    	degToRad: function ( degrees ) {

	    		return degrees * exports.Math.DEG2RAD;

	    	},

	    	radToDeg: function ( radians ) {

	    		return radians * exports.Math.RAD2DEG;

	    	},

	    	isPowerOfTwo: function ( value ) {

	    		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	    	},

	    	nearestPowerOfTwo: function ( value ) {

	    		return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

	    	},

	    	nextPowerOfTwo: function ( value ) {

	    		value --;
	    		value |= value >> 1;
	    		value |= value >> 2;
	    		value |= value >> 4;
	    		value |= value >> 8;
	    		value |= value >> 16;
	    		value ++;

	    		return value;

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author philogb / http://blog.thejit.org/
	     * @author egraether / http://egraether.com/
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     */

	    function Vector2( x, y ) {

	    	this.x = x || 0;
	    	this.y = y || 0;

	    }

	    Vector2.prototype = {

	    	constructor: Vector2,

	    	isVector2: true,

	    	get width() {

	    		return this.x;

	    	},

	    	set width( value ) {

	    		this.x = value;

	    	},

	    	get height() {

	    		return this.y;

	    	},

	    	set height( value ) {

	    		this.y = value;

	    	},

	    	//

	    	set: function ( x, y ) {

	    		this.x = x;
	    		this.y = y;

	    		return this;

	    	},

	    	setScalar: function ( scalar ) {

	    		this.x = scalar;
	    		this.y = scalar;

	    		return this;

	    	},

	    	setX: function ( x ) {

	    		this.x = x;

	    		return this;

	    	},

	    	setY: function ( y ) {

	    		this.y = y;

	    		return this;

	    	},

	    	setComponent: function ( index, value ) {

	    		switch ( index ) {

	    			case 0: this.x = value; break;
	    			case 1: this.y = value; break;
	    			default: throw new Error( 'index is out of range: ' + index );

	    		}

	    	},

	    	getComponent: function ( index ) {

	    		switch ( index ) {

	    			case 0: return this.x;
	    			case 1: return this.y;
	    			default: throw new Error( 'index is out of range: ' + index );

	    		}

	    	},

	    	clone: function () {

	    		return new this.constructor( this.x, this.y );

	    	},

	    	copy: function ( v ) {

	    		this.x = v.x;
	    		this.y = v.y;

	    		return this;

	    	},

	    	add: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
	    			return this.addVectors( v, w );

	    		}

	    		this.x += v.x;
	    		this.y += v.y;

	    		return this;

	    	},

	    	addScalar: function ( s ) {

	    		this.x += s;
	    		this.y += s;

	    		return this;

	    	},

	    	addVectors: function ( a, b ) {

	    		this.x = a.x + b.x;
	    		this.y = a.y + b.y;

	    		return this;

	    	},

	    	addScaledVector: function ( v, s ) {

	    		this.x += v.x * s;
	    		this.y += v.y * s;

	    		return this;

	    	},

	    	sub: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
	    			return this.subVectors( v, w );

	    		}

	    		this.x -= v.x;
	    		this.y -= v.y;

	    		return this;

	    	},

	    	subScalar: function ( s ) {

	    		this.x -= s;
	    		this.y -= s;

	    		return this;

	    	},

	    	subVectors: function ( a, b ) {

	    		this.x = a.x - b.x;
	    		this.y = a.y - b.y;

	    		return this;

	    	},

	    	multiply: function ( v ) {

	    		this.x *= v.x;
	    		this.y *= v.y;

	    		return this;

	    	},

	    	multiplyScalar: function ( scalar ) {

	    		if ( isFinite( scalar ) ) {

	    			this.x *= scalar;
	    			this.y *= scalar;

	    		} else {

	    			this.x = 0;
	    			this.y = 0;

	    		}

	    		return this;

	    	},

	    	divide: function ( v ) {

	    		this.x /= v.x;
	    		this.y /= v.y;

	    		return this;

	    	},

	    	divideScalar: function ( scalar ) {

	    		return this.multiplyScalar( 1 / scalar );

	    	},

	    	min: function ( v ) {

	    		this.x = Math.min( this.x, v.x );
	    		this.y = Math.min( this.y, v.y );

	    		return this;

	    	},

	    	max: function ( v ) {

	    		this.x = Math.max( this.x, v.x );
	    		this.y = Math.max( this.y, v.y );

	    		return this;

	    	},

	    	clamp: function ( min, max ) {

	    		// This function assumes min < max, if this assumption isn't true it will not operate correctly

	    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
	    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

	    		return this;

	    	},

	    	clampScalar: function () {

	    		var min, max;

	    		return function clampScalar( minVal, maxVal ) {

	    			if ( min === undefined ) {

	    				min = new Vector2();
	    				max = new Vector2();

	    			}

	    			min.set( minVal, minVal );
	    			max.set( maxVal, maxVal );

	    			return this.clamp( min, max );

	    		};

	    	}(),

	    	clampLength: function ( min, max ) {

	    		var length = this.length();

	    		return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

	    	},

	    	floor: function () {

	    		this.x = Math.floor( this.x );
	    		this.y = Math.floor( this.y );

	    		return this;

	    	},

	    	ceil: function () {

	    		this.x = Math.ceil( this.x );
	    		this.y = Math.ceil( this.y );

	    		return this;

	    	},

	    	round: function () {

	    		this.x = Math.round( this.x );
	    		this.y = Math.round( this.y );

	    		return this;

	    	},

	    	roundToZero: function () {

	    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
	    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

	    		return this;

	    	},

	    	negate: function () {

	    		this.x = - this.x;
	    		this.y = - this.y;

	    		return this;

	    	},

	    	dot: function ( v ) {

	    		return this.x * v.x + this.y * v.y;

	    	},

	    	lengthSq: function () {

	    		return this.x * this.x + this.y * this.y;

	    	},

	    	length: function () {

	    		return Math.sqrt( this.x * this.x + this.y * this.y );

	    	},

	    	lengthManhattan: function() {

	    		return Math.abs( this.x ) + Math.abs( this.y );

	    	},

	    	normalize: function () {

	    		return this.divideScalar( this.length() );

	    	},

	    	angle: function () {

	    		// computes the angle in radians with respect to the positive x-axis

	    		var angle = Math.atan2( this.y, this.x );

	    		if ( angle < 0 ) angle += 2 * Math.PI;

	    		return angle;

	    	},

	    	distanceTo: function ( v ) {

	    		return Math.sqrt( this.distanceToSquared( v ) );

	    	},

	    	distanceToSquared: function ( v ) {

	    		var dx = this.x - v.x, dy = this.y - v.y;
	    		return dx * dx + dy * dy;

	    	},

	    	distanceToManhattan: function ( v ) {

	    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	    	},

	    	setLength: function ( length ) {

	    		return this.multiplyScalar( length / this.length() );

	    	},

	    	lerp: function ( v, alpha ) {

	    		this.x += ( v.x - this.x ) * alpha;
	    		this.y += ( v.y - this.y ) * alpha;

	    		return this;

	    	},

	    	lerpVectors: function ( v1, v2, alpha ) {

	    		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	    	},

	    	equals: function ( v ) {

	    		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	    	},

	    	fromArray: function ( array, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		this.x = array[ offset ];
	    		this.y = array[ offset + 1 ];

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		array[ offset ] = this.x;
	    		array[ offset + 1 ] = this.y;

	    		return array;

	    	},

	    	fromAttribute: function ( attribute, index, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		index = index * attribute.itemSize + offset;

	    		this.x = attribute.array[ index ];
	    		this.y = attribute.array[ index + 1 ];

	    		return this;

	    	},

	    	rotateAround: function ( center, angle ) {

	    		var c = Math.cos( angle ), s = Math.sin( angle );

	    		var x = this.x - center.x;
	    		var y = this.y - center.y;

	    		this.x = x * c - y * s + center.x;
	    		this.y = x * s + y * c + center.y;

	    		return this;

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     * @author szimek / https://github.com/szimek/
	     */

	    function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	    	Object.defineProperty( this, 'id', { value: TextureIdCount() } );

	    	this.uuid = exports.Math.generateUUID();

	    	this.name = '';
	    	this.sourceFile = '';

	    	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
	    	this.mipmaps = [];

	    	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

	    	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
	    	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

	    	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
	    	this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

	    	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	    	this.format = format !== undefined ? format : RGBAFormat;
	    	this.type = type !== undefined ? type : UnsignedByteType;

	    	this.offset = new Vector2( 0, 0 );
	    	this.repeat = new Vector2( 1, 1 );

	    	this.generateMipmaps = true;
	    	this.premultiplyAlpha = false;
	    	this.flipY = true;
	    	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)


	    	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
	    	//
	    	// Also changing the encoding after already used by a Material will not automatically make the Material
	    	// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
	    	this.encoding = encoding !== undefined ? encoding :  LinearEncoding;

	    	this.version = 0;
	    	this.onUpdate = null;

	    }

	    Texture.DEFAULT_IMAGE = undefined;
	    Texture.DEFAULT_MAPPING = UVMapping;

	    Texture.prototype = {

	    	constructor: Texture,

	    	isTexture: true,

	    	set needsUpdate( value ) {

	    		if ( value === true ) this.version ++;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( source ) {

	    		this.image = source.image;
	    		this.mipmaps = source.mipmaps.slice( 0 );

	    		this.mapping = source.mapping;

	    		this.wrapS = source.wrapS;
	    		this.wrapT = source.wrapT;

	    		this.magFilter = source.magFilter;
	    		this.minFilter = source.minFilter;

	    		this.anisotropy = source.anisotropy;

	    		this.format = source.format;
	    		this.type = source.type;

	    		this.offset.copy( source.offset );
	    		this.repeat.copy( source.repeat );

	    		this.generateMipmaps = source.generateMipmaps;
	    		this.premultiplyAlpha = source.premultiplyAlpha;
	    		this.flipY = source.flipY;
	    		this.unpackAlignment = source.unpackAlignment;
	    		this.encoding = source.encoding;

	    		return this;

	    	},

	    	toJSON: function ( meta ) {

	    		if ( meta.textures[ this.uuid ] !== undefined ) {

	    			return meta.textures[ this.uuid ];

	    		}

	    		function getDataURL( image ) {

	    			var canvas;

	    			if ( image.toDataURL !== undefined ) {

	    				canvas = image;

	    			} else {

	    				canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	    				canvas.width = image.width;
	    				canvas.height = image.height;

	    				canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

	    			}

	    			if ( canvas.width > 2048 || canvas.height > 2048 ) {

	    				return canvas.toDataURL( 'image/jpeg', 0.6 );

	    			} else {

	    				return canvas.toDataURL( 'image/png' );

	    			}

	    		}

	    		var output = {
	    			metadata: {
	    				version: 4.4,
	    				type: 'Texture',
	    				generator: 'Texture.toJSON'
	    			},

	    			uuid: this.uuid,
	    			name: this.name,

	    			mapping: this.mapping,

	    			repeat: [ this.repeat.x, this.repeat.y ],
	    			offset: [ this.offset.x, this.offset.y ],
	    			wrap: [ this.wrapS, this.wrapT ],

	    			minFilter: this.minFilter,
	    			magFilter: this.magFilter,
	    			anisotropy: this.anisotropy,

	    			flipY: this.flipY
	    		};

	    		if ( this.image !== undefined ) {

	    			// TODO: Move to THREE.Image

	    			var image = this.image;

	    			if ( image.uuid === undefined ) {

	    				image.uuid = exports.Math.generateUUID(); // UGH

	    			}

	    			if ( meta.images[ image.uuid ] === undefined ) {

	    				meta.images[ image.uuid ] = {
	    					uuid: image.uuid,
	    					url: getDataURL( image )
	    				};

	    			}

	    			output.image = image.uuid;

	    		}

	    		meta.textures[ this.uuid ] = output;

	    		return output;

	    	},

	    	dispose: function () {

	    		this.dispatchEvent( { type: 'dispose' } );

	    	},

	    	transformUv: function ( uv ) {

	    		if ( this.mapping !== UVMapping )  return;

	    		uv.multiply( this.repeat );
	    		uv.add( this.offset );

	    		if ( uv.x < 0 || uv.x > 1 ) {

	    			switch ( this.wrapS ) {

	    				case RepeatWrapping:

	    					uv.x = uv.x - Math.floor( uv.x );
	    					break;

	    				case ClampToEdgeWrapping:

	    					uv.x = uv.x < 0 ? 0 : 1;
	    					break;

	    				case MirroredRepeatWrapping:

	    					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

	    						uv.x = Math.ceil( uv.x ) - uv.x;

	    					} else {

	    						uv.x = uv.x - Math.floor( uv.x );

	    					}
	    					break;

	    			}

	    		}

	    		if ( uv.y < 0 || uv.y > 1 ) {

	    			switch ( this.wrapT ) {

	    				case RepeatWrapping:

	    					uv.y = uv.y - Math.floor( uv.y );
	    					break;

	    				case ClampToEdgeWrapping:

	    					uv.y = uv.y < 0 ? 0 : 1;
	    					break;

	    				case MirroredRepeatWrapping:

	    					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

	    						uv.y = Math.ceil( uv.y ) - uv.y;

	    					} else {

	    						uv.y = uv.y - Math.floor( uv.y );

	    					}
	    					break;

	    			}

	    		}

	    		if ( this.flipY ) {

	    			uv.y = 1 - uv.y;

	    		}

	    	}

	    };

	    Object.assign( Texture.prototype, EventDispatcher.prototype );

	    var count = 0;
	    function TextureIdCount() { return count++; };

	    /**
	     * @author supereggbert / http://www.paulbrunt.co.uk/
	     * @author philogb / http://blog.thejit.org/
	     * @author mikael emtinger / http://gomo.se/
	     * @author egraether / http://egraether.com/
	     * @author WestLangley / http://github.com/WestLangley
	     */

	    function Vector4( x, y, z, w ) {

	    	this.x = x || 0;
	    	this.y = y || 0;
	    	this.z = z || 0;
	    	this.w = ( w !== undefined ) ? w : 1;

	    }

	    Vector4.prototype = {

	    	constructor: Vector4,

	    	isVector4: true,

	    	set: function ( x, y, z, w ) {

	    		this.x = x;
	    		this.y = y;
	    		this.z = z;
	    		this.w = w;

	    		return this;

	    	},

	    	setScalar: function ( scalar ) {

	    		this.x = scalar;
	    		this.y = scalar;
	    		this.z = scalar;
	    		this.w = scalar;

	    		return this;

	    	},

	    	setX: function ( x ) {

	    		this.x = x;

	    		return this;

	    	},

	    	setY: function ( y ) {

	    		this.y = y;

	    		return this;

	    	},

	    	setZ: function ( z ) {

	    		this.z = z;

	    		return this;

	    	},

	    	setW: function ( w ) {

	    		this.w = w;

	    		return this;

	    	},

	    	setComponent: function ( index, value ) {

	    		switch ( index ) {

	    			case 0: this.x = value; break;
	    			case 1: this.y = value; break;
	    			case 2: this.z = value; break;
	    			case 3: this.w = value; break;
	    			default: throw new Error( 'index is out of range: ' + index );

	    		}

	    	},

	    	getComponent: function ( index ) {

	    		switch ( index ) {

	    			case 0: return this.x;
	    			case 1: return this.y;
	    			case 2: return this.z;
	    			case 3: return this.w;
	    			default: throw new Error( 'index is out of range: ' + index );

	    		}

	    	},

	    	clone: function () {

	    		return new this.constructor( this.x, this.y, this.z, this.w );

	    	},

	    	copy: function ( v ) {

	    		this.x = v.x;
	    		this.y = v.y;
	    		this.z = v.z;
	    		this.w = ( v.w !== undefined ) ? v.w : 1;

	    		return this;

	    	},

	    	add: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
	    			return this.addVectors( v, w );

	    		}

	    		this.x += v.x;
	    		this.y += v.y;
	    		this.z += v.z;
	    		this.w += v.w;

	    		return this;

	    	},

	    	addScalar: function ( s ) {

	    		this.x += s;
	    		this.y += s;
	    		this.z += s;
	    		this.w += s;

	    		return this;

	    	},

	    	addVectors: function ( a, b ) {

	    		this.x = a.x + b.x;
	    		this.y = a.y + b.y;
	    		this.z = a.z + b.z;
	    		this.w = a.w + b.w;

	    		return this;

	    	},

	    	addScaledVector: function ( v, s ) {

	    		this.x += v.x * s;
	    		this.y += v.y * s;
	    		this.z += v.z * s;
	    		this.w += v.w * s;

	    		return this;

	    	},

	    	sub: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
	    			return this.subVectors( v, w );

	    		}

	    		this.x -= v.x;
	    		this.y -= v.y;
	    		this.z -= v.z;
	    		this.w -= v.w;

	    		return this;

	    	},

	    	subScalar: function ( s ) {

	    		this.x -= s;
	    		this.y -= s;
	    		this.z -= s;
	    		this.w -= s;

	    		return this;

	    	},

	    	subVectors: function ( a, b ) {

	    		this.x = a.x - b.x;
	    		this.y = a.y - b.y;
	    		this.z = a.z - b.z;
	    		this.w = a.w - b.w;

	    		return this;

	    	},

	    	multiplyScalar: function ( scalar ) {

	    		if ( isFinite( scalar ) ) {

	    			this.x *= scalar;
	    			this.y *= scalar;
	    			this.z *= scalar;
	    			this.w *= scalar;

	    		} else {

	    			this.x = 0;
	    			this.y = 0;
	    			this.z = 0;
	    			this.w = 0;

	    		}

	    		return this;

	    	},

	    	applyMatrix4: function ( m ) {

	    		var x = this.x, y = this.y, z = this.z, w = this.w;
	    		var e = m.elements;

	    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
	    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
	    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
	    		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

	    		return this;

	    	},

	    	divideScalar: function ( scalar ) {

	    		return this.multiplyScalar( 1 / scalar );

	    	},

	    	setAxisAngleFromQuaternion: function ( q ) {

	    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

	    		// q is assumed to be normalized

	    		this.w = 2 * Math.acos( q.w );

	    		var s = Math.sqrt( 1 - q.w * q.w );

	    		if ( s < 0.0001 ) {

	    			 this.x = 1;
	    			 this.y = 0;
	    			 this.z = 0;

	    		} else {

	    			 this.x = q.x / s;
	    			 this.y = q.y / s;
	    			 this.z = q.z / s;

	    		}

	    		return this;

	    	},

	    	setAxisAngleFromRotationMatrix: function ( m ) {

	    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

	    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

	    		var angle, x, y, z,		// variables for result
	    			epsilon = 0.01,		// margin to allow for rounding errors
	    			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

	    			te = m.elements,

	    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
	    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
	    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

	    		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
	    		     ( Math.abs( m13 - m31 ) < epsilon ) &&
	    		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

	    			// singularity found
	    			// first check for identity matrix which must have +1 for all terms
	    			// in leading diagonal and zero in other terms

	    			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
	    			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
	    			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
	    			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

	    				// this singularity is identity matrix so angle = 0

	    				this.set( 1, 0, 0, 0 );

	    				return this; // zero angle, arbitrary axis

	    			}

	    			// otherwise this singularity is angle = 180

	    			angle = Math.PI;

	    			var xx = ( m11 + 1 ) / 2;
	    			var yy = ( m22 + 1 ) / 2;
	    			var zz = ( m33 + 1 ) / 2;
	    			var xy = ( m12 + m21 ) / 4;
	    			var xz = ( m13 + m31 ) / 4;
	    			var yz = ( m23 + m32 ) / 4;

	    			if ( ( xx > yy ) && ( xx > zz ) ) {

	    				// m11 is the largest diagonal term

	    				if ( xx < epsilon ) {

	    					x = 0;
	    					y = 0.707106781;
	    					z = 0.707106781;

	    				} else {

	    					x = Math.sqrt( xx );
	    					y = xy / x;
	    					z = xz / x;

	    				}

	    			} else if ( yy > zz ) {

	    				// m22 is the largest diagonal term

	    				if ( yy < epsilon ) {

	    					x = 0.707106781;
	    					y = 0;
	    					z = 0.707106781;

	    				} else {

	    					y = Math.sqrt( yy );
	    					x = xy / y;
	    					z = yz / y;

	    				}

	    			} else {

	    				// m33 is the largest diagonal term so base result on this

	    				if ( zz < epsilon ) {

	    					x = 0.707106781;
	    					y = 0.707106781;
	    					z = 0;

	    				} else {

	    					z = Math.sqrt( zz );
	    					x = xz / z;
	    					y = yz / z;

	    				}

	    			}

	    			this.set( x, y, z, angle );

	    			return this; // return 180 deg rotation

	    		}

	    		// as we have reached here there are no singularities so we can handle normally

	    		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
	    		                   ( m13 - m31 ) * ( m13 - m31 ) +
	    		                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

	    		if ( Math.abs( s ) < 0.001 ) s = 1;

	    		// prevent divide by zero, should not happen if matrix is orthogonal and should be
	    		// caught by singularity test above, but I've left it in just in case

	    		this.x = ( m32 - m23 ) / s;
	    		this.y = ( m13 - m31 ) / s;
	    		this.z = ( m21 - m12 ) / s;
	    		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

	    		return this;

	    	},

	    	min: function ( v ) {

	    		this.x = Math.min( this.x, v.x );
	    		this.y = Math.min( this.y, v.y );
	    		this.z = Math.min( this.z, v.z );
	    		this.w = Math.min( this.w, v.w );

	    		return this;

	    	},

	    	max: function ( v ) {

	    		this.x = Math.max( this.x, v.x );
	    		this.y = Math.max( this.y, v.y );
	    		this.z = Math.max( this.z, v.z );
	    		this.w = Math.max( this.w, v.w );

	    		return this;

	    	},

	    	clamp: function ( min, max ) {

	    		// This function assumes min < max, if this assumption isn't true it will not operate correctly

	    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
	    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
	    		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
	    		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

	    		return this;

	    	},

	    	clampScalar: function () {

	    		var min, max;

	    		return function clampScalar( minVal, maxVal ) {

	    			if ( min === undefined ) {

	    				min = new Vector4();
	    				max = new Vector4();

	    			}

	    			min.set( minVal, minVal, minVal, minVal );
	    			max.set( maxVal, maxVal, maxVal, maxVal );

	    			return this.clamp( min, max );

	    		};

	    	}(),

	    	floor: function () {

	    		this.x = Math.floor( this.x );
	    		this.y = Math.floor( this.y );
	    		this.z = Math.floor( this.z );
	    		this.w = Math.floor( this.w );

	    		return this;

	    	},

	    	ceil: function () {

	    		this.x = Math.ceil( this.x );
	    		this.y = Math.ceil( this.y );
	    		this.z = Math.ceil( this.z );
	    		this.w = Math.ceil( this.w );

	    		return this;

	    	},

	    	round: function () {

	    		this.x = Math.round( this.x );
	    		this.y = Math.round( this.y );
	    		this.z = Math.round( this.z );
	    		this.w = Math.round( this.w );

	    		return this;

	    	},

	    	roundToZero: function () {

	    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
	    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
	    		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
	    		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

	    		return this;

	    	},

	    	negate: function () {

	    		this.x = - this.x;
	    		this.y = - this.y;
	    		this.z = - this.z;
	    		this.w = - this.w;

	    		return this;

	    	},

	    	dot: function ( v ) {

	    		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	    	},

	    	lengthSq: function () {

	    		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	    	},

	    	length: function () {

	    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	    	},

	    	lengthManhattan: function () {

	    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	    	},

	    	normalize: function () {

	    		return this.divideScalar( this.length() );

	    	},

	    	setLength: function ( length ) {

	    		return this.multiplyScalar( length / this.length() );

	    	},

	    	lerp: function ( v, alpha ) {

	    		this.x += ( v.x - this.x ) * alpha;
	    		this.y += ( v.y - this.y ) * alpha;
	    		this.z += ( v.z - this.z ) * alpha;
	    		this.w += ( v.w - this.w ) * alpha;

	    		return this;

	    	},

	    	lerpVectors: function ( v1, v2, alpha ) {

	    		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	    	},

	    	equals: function ( v ) {

	    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	    	},

	    	fromArray: function ( array, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		this.x = array[ offset ];
	    		this.y = array[ offset + 1 ];
	    		this.z = array[ offset + 2 ];
	    		this.w = array[ offset + 3 ];

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		array[ offset ] = this.x;
	    		array[ offset + 1 ] = this.y;
	    		array[ offset + 2 ] = this.z;
	    		array[ offset + 3 ] = this.w;

	    		return array;

	    	},

	    	fromAttribute: function ( attribute, index, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		index = index * attribute.itemSize + offset;

	    		this.x = attribute.array[ index ];
	    		this.y = attribute.array[ index + 1 ];
	    		this.z = attribute.array[ index + 2 ];
	    		this.w = attribute.array[ index + 3 ];

	    		return this;

	    	}

	    };

	    /**
	     * @author szimek / https://github.com/szimek/
	     * @author alteredq / http://alteredqualia.com/
	     * @author Marius Kintel / https://github.com/kintel
	     */

	    /*
	     In options, we can specify:
	     * Texture parameters for an auto-generated target texture
	     * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	    */
	    function WebGLRenderTarget( width, height, options ) {

	    	this.uuid = exports.Math.generateUUID();

	    	this.width = width;
	    	this.height = height;

	    	this.scissor = new Vector4( 0, 0, width, height );
	    	this.scissorTest = false;

	    	this.viewport = new Vector4( 0, 0, width, height );

	    	options = options || {};

	    	if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

	    	this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

	    	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	    	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
	    	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	    }

	    Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

	    	isWebGLRenderTarget: true,

	    	setSize: function ( width, height ) {

	    		if ( this.width !== width || this.height !== height ) {

	    			this.width = width;
	    			this.height = height;

	    			this.dispose();

	    		}

	    		this.viewport.set( 0, 0, width, height );
	    		this.scissor.set( 0, 0, width, height );

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( source ) {

	    		this.width = source.width;
	    		this.height = source.height;

	    		this.viewport.copy( source.viewport );

	    		this.texture = source.texture.clone();

	    		this.depthBuffer = source.depthBuffer;
	    		this.stencilBuffer = source.stencilBuffer;
	    		this.depthTexture = source.depthTexture;

	    		return this;

	    	},

	    	dispose: function () {

	    		this.dispatchEvent( { type: 'dispose' } );

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com
	     */

	    function WebGLRenderTargetCube( width, height, options ) {

	    	WebGLRenderTarget.call( this, width, height, options );

	    	this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
	    	this.activeMipMapLevel = 0;

	    }

	    WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	    WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	    WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     * @author WestLangley / http://github.com/WestLangley
	     * @author bhouston / http://clara.io
	     */

	    function Quaternion( x, y, z, w ) {

	    	this._x = x || 0;
	    	this._y = y || 0;
	    	this._z = z || 0;
	    	this._w = ( w !== undefined ) ? w : 1;

	    }

	    Quaternion.prototype = {

	    	constructor: Quaternion,

	    	get x () {

	    		return this._x;

	    	},

	    	set x ( value ) {

	    		this._x = value;
	    		this.onChangeCallback();

	    	},

	    	get y () {

	    		return this._y;

	    	},

	    	set y ( value ) {

	    		this._y = value;
	    		this.onChangeCallback();

	    	},

	    	get z () {

	    		return this._z;

	    	},

	    	set z ( value ) {

	    		this._z = value;
	    		this.onChangeCallback();

	    	},

	    	get w () {

	    		return this._w;

	    	},

	    	set w ( value ) {

	    		this._w = value;
	    		this.onChangeCallback();

	    	},

	    	set: function ( x, y, z, w ) {

	    		this._x = x;
	    		this._y = y;
	    		this._z = z;
	    		this._w = w;

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor( this._x, this._y, this._z, this._w );

	    	},

	    	copy: function ( quaternion ) {

	    		this._x = quaternion.x;
	    		this._y = quaternion.y;
	    		this._z = quaternion.z;
	    		this._w = quaternion.w;

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	setFromEuler: function ( euler, update ) {

	    		if ( (euler && euler.isEuler) === false ) {

	    			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

	    		}

	    		// http://www.mathworks.com/matlabcentral/fileexchange/
	    		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
	    		//	content/SpinCalc.m

	    		var c1 = Math.cos( euler._x / 2 );
	    		var c2 = Math.cos( euler._y / 2 );
	    		var c3 = Math.cos( euler._z / 2 );
	    		var s1 = Math.sin( euler._x / 2 );
	    		var s2 = Math.sin( euler._y / 2 );
	    		var s3 = Math.sin( euler._z / 2 );

	    		var order = euler.order;

	    		if ( order === 'XYZ' ) {

	    			this._x = s1 * c2 * c3 + c1 * s2 * s3;
	    			this._y = c1 * s2 * c3 - s1 * c2 * s3;
	    			this._z = c1 * c2 * s3 + s1 * s2 * c3;
	    			this._w = c1 * c2 * c3 - s1 * s2 * s3;

	    		} else if ( order === 'YXZ' ) {

	    			this._x = s1 * c2 * c3 + c1 * s2 * s3;
	    			this._y = c1 * s2 * c3 - s1 * c2 * s3;
	    			this._z = c1 * c2 * s3 - s1 * s2 * c3;
	    			this._w = c1 * c2 * c3 + s1 * s2 * s3;

	    		} else if ( order === 'ZXY' ) {

	    			this._x = s1 * c2 * c3 - c1 * s2 * s3;
	    			this._y = c1 * s2 * c3 + s1 * c2 * s3;
	    			this._z = c1 * c2 * s3 + s1 * s2 * c3;
	    			this._w = c1 * c2 * c3 - s1 * s2 * s3;

	    		} else if ( order === 'ZYX' ) {

	    			this._x = s1 * c2 * c3 - c1 * s2 * s3;
	    			this._y = c1 * s2 * c3 + s1 * c2 * s3;
	    			this._z = c1 * c2 * s3 - s1 * s2 * c3;
	    			this._w = c1 * c2 * c3 + s1 * s2 * s3;

	    		} else if ( order === 'YZX' ) {

	    			this._x = s1 * c2 * c3 + c1 * s2 * s3;
	    			this._y = c1 * s2 * c3 + s1 * c2 * s3;
	    			this._z = c1 * c2 * s3 - s1 * s2 * c3;
	    			this._w = c1 * c2 * c3 - s1 * s2 * s3;

	    		} else if ( order === 'XZY' ) {

	    			this._x = s1 * c2 * c3 - c1 * s2 * s3;
	    			this._y = c1 * s2 * c3 - s1 * c2 * s3;
	    			this._z = c1 * c2 * s3 + s1 * s2 * c3;
	    			this._w = c1 * c2 * c3 + s1 * s2 * s3;

	    		}

	    		if ( update !== false ) this.onChangeCallback();

	    		return this;

	    	},

	    	setFromAxisAngle: function ( axis, angle ) {

	    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

	    		// assumes axis is normalized

	    		var halfAngle = angle / 2, s = Math.sin( halfAngle );

	    		this._x = axis.x * s;
	    		this._y = axis.y * s;
	    		this._z = axis.z * s;
	    		this._w = Math.cos( halfAngle );

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	setFromRotationMatrix: function ( m ) {

	    		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

	    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

	    		var te = m.elements,

	    			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
	    			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
	    			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

	    			trace = m11 + m22 + m33,
	    			s;

	    		if ( trace > 0 ) {

	    			s = 0.5 / Math.sqrt( trace + 1.0 );

	    			this._w = 0.25 / s;
	    			this._x = ( m32 - m23 ) * s;
	    			this._y = ( m13 - m31 ) * s;
	    			this._z = ( m21 - m12 ) * s;

	    		} else if ( m11 > m22 && m11 > m33 ) {

	    			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

	    			this._w = ( m32 - m23 ) / s;
	    			this._x = 0.25 * s;
	    			this._y = ( m12 + m21 ) / s;
	    			this._z = ( m13 + m31 ) / s;

	    		} else if ( m22 > m33 ) {

	    			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

	    			this._w = ( m13 - m31 ) / s;
	    			this._x = ( m12 + m21 ) / s;
	    			this._y = 0.25 * s;
	    			this._z = ( m23 + m32 ) / s;

	    		} else {

	    			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

	    			this._w = ( m21 - m12 ) / s;
	    			this._x = ( m13 + m31 ) / s;
	    			this._y = ( m23 + m32 ) / s;
	    			this._z = 0.25 * s;

	    		}

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	setFromUnitVectors: function () {

	    		// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

	    		// assumes direction vectors vFrom and vTo are normalized

	    		var v1, r;

	    		var EPS = 0.000001;

	    		return function setFromUnitVectors( vFrom, vTo ) {

	    			if ( v1 === undefined ) v1 = new Vector3();

	    			r = vFrom.dot( vTo ) + 1;

	    			if ( r < EPS ) {

	    				r = 0;

	    				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

	    					v1.set( - vFrom.y, vFrom.x, 0 );

	    				} else {

	    					v1.set( 0, - vFrom.z, vFrom.y );

	    				}

	    			} else {

	    				v1.crossVectors( vFrom, vTo );

	    			}

	    			this._x = v1.x;
	    			this._y = v1.y;
	    			this._z = v1.z;
	    			this._w = r;

	    			return this.normalize();

	    		};

	    	}(),

	    	inverse: function () {

	    		return this.conjugate().normalize();

	    	},

	    	conjugate: function () {

	    		this._x *= - 1;
	    		this._y *= - 1;
	    		this._z *= - 1;

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	dot: function ( v ) {

	    		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	    	},

	    	lengthSq: function () {

	    		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	    	},

	    	length: function () {

	    		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	    	},

	    	normalize: function () {

	    		var l = this.length();

	    		if ( l === 0 ) {

	    			this._x = 0;
	    			this._y = 0;
	    			this._z = 0;
	    			this._w = 1;

	    		} else {

	    			l = 1 / l;

	    			this._x = this._x * l;
	    			this._y = this._y * l;
	    			this._z = this._z * l;
	    			this._w = this._w * l;

	    		}

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	multiply: function ( q, p ) {

	    		if ( p !== undefined ) {

	    			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
	    			return this.multiplyQuaternions( q, p );

	    		}

	    		return this.multiplyQuaternions( this, q );

	    	},

	    	premultiply: function ( q ) {

	    		return this.multiplyQuaternions( q, this );

	    	},

	    	multiplyQuaternions: function ( a, b ) {

	    		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

	    		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
	    		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

	    		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
	    		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
	    		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
	    		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	slerp: function ( qb, t ) {

	    		if ( t === 0 ) return this;
	    		if ( t === 1 ) return this.copy( qb );

	    		var x = this._x, y = this._y, z = this._z, w = this._w;

	    		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

	    		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

	    		if ( cosHalfTheta < 0 ) {

	    			this._w = - qb._w;
	    			this._x = - qb._x;
	    			this._y = - qb._y;
	    			this._z = - qb._z;

	    			cosHalfTheta = - cosHalfTheta;

	    		} else {

	    			this.copy( qb );

	    		}

	    		if ( cosHalfTheta >= 1.0 ) {

	    			this._w = w;
	    			this._x = x;
	    			this._y = y;
	    			this._z = z;

	    			return this;

	    		}

	    		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

	    		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

	    			this._w = 0.5 * ( w + this._w );
	    			this._x = 0.5 * ( x + this._x );
	    			this._y = 0.5 * ( y + this._y );
	    			this._z = 0.5 * ( z + this._z );

	    			return this;

	    		}

	    		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
	    		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
	    		ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

	    		this._w = ( w * ratioA + this._w * ratioB );
	    		this._x = ( x * ratioA + this._x * ratioB );
	    		this._y = ( y * ratioA + this._y * ratioB );
	    		this._z = ( z * ratioA + this._z * ratioB );

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	equals: function ( quaternion ) {

	    		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	    	},

	    	fromArray: function ( array, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		this._x = array[ offset ];
	    		this._y = array[ offset + 1 ];
	    		this._z = array[ offset + 2 ];
	    		this._w = array[ offset + 3 ];

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		array[ offset ] = this._x;
	    		array[ offset + 1 ] = this._y;
	    		array[ offset + 2 ] = this._z;
	    		array[ offset + 3 ] = this._w;

	    		return array;

	    	},

	    	onChange: function ( callback ) {

	    		this.onChangeCallback = callback;

	    		return this;

	    	},

	    	onChangeCallback: function () {}

	    };

	    Object.assign( Quaternion, {

	    	slerp: function( qa, qb, qm, t ) {

	    		return qm.copy( qa ).slerp( qb, t );

	    	},

	    	slerpFlat: function(
	    			dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

	    		// fuzz-free, array-based Quaternion SLERP operation

	    		var x0 = src0[ srcOffset0 + 0 ],
	    			y0 = src0[ srcOffset0 + 1 ],
	    			z0 = src0[ srcOffset0 + 2 ],
	    			w0 = src0[ srcOffset0 + 3 ],

	    			x1 = src1[ srcOffset1 + 0 ],
	    			y1 = src1[ srcOffset1 + 1 ],
	    			z1 = src1[ srcOffset1 + 2 ],
	    			w1 = src1[ srcOffset1 + 3 ];

	    		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

	    			var s = 1 - t,

	    				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

	    				dir = ( cos >= 0 ? 1 : - 1 ),
	    				sqrSin = 1 - cos * cos;

	    			// Skip the Slerp for tiny steps to avoid numeric problems:
	    			if ( sqrSin > Number.EPSILON ) {

	    				var sin = Math.sqrt( sqrSin ),
	    					len = Math.atan2( sin, cos * dir );

	    				s = Math.sin( s * len ) / sin;
	    				t = Math.sin( t * len ) / sin;

	    			}

	    			var tDir = t * dir;

	    			x0 = x0 * s + x1 * tDir;
	    			y0 = y0 * s + y1 * tDir;
	    			z0 = z0 * s + z1 * tDir;
	    			w0 = w0 * s + w1 * tDir;

	    			// Normalize in case we just did a lerp:
	    			if ( s === 1 - t ) {

	    				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

	    				x0 *= f;
	    				y0 *= f;
	    				z0 *= f;
	    				w0 *= f;

	    			}

	    		}

	    		dst[ dstOffset ] = x0;
	    		dst[ dstOffset + 1 ] = y0;
	    		dst[ dstOffset + 2 ] = z0;
	    		dst[ dstOffset + 3 ] = w0;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author *kile / http://kile.stravaganza.org/
	     * @author philogb / http://blog.thejit.org/
	     * @author mikael emtinger / http://gomo.se/
	     * @author egraether / http://egraether.com/
	     * @author WestLangley / http://github.com/WestLangley
	     */

	    function Vector3( x, y, z ) {

	    	this.x = x || 0;
	    	this.y = y || 0;
	    	this.z = z || 0;

	    }

	    Vector3.prototype = {

	    	constructor: Vector3,

	    	isVector3: true,

	    	set: function ( x, y, z ) {

	    		this.x = x;
	    		this.y = y;
	    		this.z = z;

	    		return this;

	    	},

	    	setScalar: function ( scalar ) {

	    		this.x = scalar;
	    		this.y = scalar;
	    		this.z = scalar;

	    		return this;

	    	},

	    	setX: function ( x ) {

	    		this.x = x;

	    		return this;

	    	},

	    	setY: function ( y ) {

	    		this.y = y;

	    		return this;

	    	},

	    	setZ: function ( z ) {

	    		this.z = z;

	    		return this;

	    	},

	    	setComponent: function ( index, value ) {

	    		switch ( index ) {

	    			case 0: this.x = value; break;
	    			case 1: this.y = value; break;
	    			case 2: this.z = value; break;
	    			default: throw new Error( 'index is out of range: ' + index );

	    		}

	    	},

	    	getComponent: function ( index ) {

	    		switch ( index ) {

	    			case 0: return this.x;
	    			case 1: return this.y;
	    			case 2: return this.z;
	    			default: throw new Error( 'index is out of range: ' + index );

	    		}

	    	},

	    	clone: function () {

	    		return new this.constructor( this.x, this.y, this.z );

	    	},

	    	copy: function ( v ) {

	    		this.x = v.x;
	    		this.y = v.y;
	    		this.z = v.z;

	    		return this;

	    	},

	    	add: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
	    			return this.addVectors( v, w );

	    		}

	    		this.x += v.x;
	    		this.y += v.y;
	    		this.z += v.z;

	    		return this;

	    	},

	    	addScalar: function ( s ) {

	    		this.x += s;
	    		this.y += s;
	    		this.z += s;

	    		return this;

	    	},

	    	addVectors: function ( a, b ) {

	    		this.x = a.x + b.x;
	    		this.y = a.y + b.y;
	    		this.z = a.z + b.z;

	    		return this;

	    	},

	    	addScaledVector: function ( v, s ) {

	    		this.x += v.x * s;
	    		this.y += v.y * s;
	    		this.z += v.z * s;

	    		return this;

	    	},

	    	sub: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
	    			return this.subVectors( v, w );

	    		}

	    		this.x -= v.x;
	    		this.y -= v.y;
	    		this.z -= v.z;

	    		return this;

	    	},

	    	subScalar: function ( s ) {

	    		this.x -= s;
	    		this.y -= s;
	    		this.z -= s;

	    		return this;

	    	},

	    	subVectors: function ( a, b ) {

	    		this.x = a.x - b.x;
	    		this.y = a.y - b.y;
	    		this.z = a.z - b.z;

	    		return this;

	    	},

	    	multiply: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
	    			return this.multiplyVectors( v, w );

	    		}

	    		this.x *= v.x;
	    		this.y *= v.y;
	    		this.z *= v.z;

	    		return this;

	    	},

	    	multiplyScalar: function ( scalar ) {

	    		if ( isFinite( scalar ) ) {

	    			this.x *= scalar;
	    			this.y *= scalar;
	    			this.z *= scalar;

	    		} else {

	    			this.x = 0;
	    			this.y = 0;
	    			this.z = 0;

	    		}

	    		return this;

	    	},

	    	multiplyVectors: function ( a, b ) {

	    		this.x = a.x * b.x;
	    		this.y = a.y * b.y;
	    		this.z = a.z * b.z;

	    		return this;

	    	},

	    	applyEuler: function () {

	    		var quaternion;

	    		return function applyEuler( euler ) {

	    			if ( (euler && euler.isEuler) === false ) {

	    				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

	    			}

	    			if ( quaternion === undefined ) quaternion = new Quaternion();

	    			return this.applyQuaternion( quaternion.setFromEuler( euler ) );

	    		};

	    	}(),

	    	applyAxisAngle: function () {

	    		var quaternion;

	    		return function applyAxisAngle( axis, angle ) {

	    			if ( quaternion === undefined ) quaternion = new Quaternion();

	    			return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

	    		};

	    	}(),

	    	applyMatrix3: function ( m ) {

	    		var x = this.x, y = this.y, z = this.z;
	    		var e = m.elements;

	    		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
	    		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
	    		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

	    		return this;

	    	},

	    	applyMatrix4: function ( m ) {

	    		// input: THREE.Matrix4 affine matrix

	    		var x = this.x, y = this.y, z = this.z;
	    		var e = m.elements;

	    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
	    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
	    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

	    		return this;

	    	},

	    	applyProjection: function ( m ) {

	    		// input: THREE.Matrix4 projection matrix

	    		var x = this.x, y = this.y, z = this.z;
	    		var e = m.elements;
	    		var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

	    		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
	    		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
	    		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

	    		return this;

	    	},

	    	applyQuaternion: function ( q ) {

	    		var x = this.x, y = this.y, z = this.z;
	    		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

	    		// calculate quat * vector

	    		var ix =  qw * x + qy * z - qz * y;
	    		var iy =  qw * y + qz * x - qx * z;
	    		var iz =  qw * z + qx * y - qy * x;
	    		var iw = - qx * x - qy * y - qz * z;

	    		// calculate result * inverse quat

	    		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
	    		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
	    		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

	    		return this;

	    	},

	    	project: function () {

	    		var matrix;

	    		return function project( camera ) {

	    			if ( matrix === undefined ) matrix = new Matrix4();

	    			matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
	    			return this.applyProjection( matrix );

	    		};

	    	}(),

	    	unproject: function () {

	    		var matrix;

	    		return function unproject( camera ) {

	    			if ( matrix === undefined ) matrix = new Matrix4();

	    			matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
	    			return this.applyProjection( matrix );

	    		};

	    	}(),

	    	transformDirection: function ( m ) {

	    		// input: THREE.Matrix4 affine matrix
	    		// vector interpreted as a direction

	    		var x = this.x, y = this.y, z = this.z;
	    		var e = m.elements;

	    		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
	    		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
	    		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

	    		return this.normalize();

	    	},

	    	divide: function ( v ) {

	    		this.x /= v.x;
	    		this.y /= v.y;
	    		this.z /= v.z;

	    		return this;

	    	},

	    	divideScalar: function ( scalar ) {

	    		return this.multiplyScalar( 1 / scalar );

	    	},

	    	min: function ( v ) {

	    		this.x = Math.min( this.x, v.x );
	    		this.y = Math.min( this.y, v.y );
	    		this.z = Math.min( this.z, v.z );

	    		return this;

	    	},

	    	max: function ( v ) {

	    		this.x = Math.max( this.x, v.x );
	    		this.y = Math.max( this.y, v.y );
	    		this.z = Math.max( this.z, v.z );

	    		return this;

	    	},

	    	clamp: function ( min, max ) {

	    		// This function assumes min < max, if this assumption isn't true it will not operate correctly

	    		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
	    		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
	    		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

	    		return this;

	    	},

	    	clampScalar: function () {

	    		var min, max;

	    		return function clampScalar( minVal, maxVal ) {

	    			if ( min === undefined ) {

	    				min = new Vector3();
	    				max = new Vector3();

	    			}

	    			min.set( minVal, minVal, minVal );
	    			max.set( maxVal, maxVal, maxVal );

	    			return this.clamp( min, max );

	    		};

	    	}(),

	    	clampLength: function ( min, max ) {

	    		var length = this.length();

	    		return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

	    	},

	    	floor: function () {

	    		this.x = Math.floor( this.x );
	    		this.y = Math.floor( this.y );
	    		this.z = Math.floor( this.z );

	    		return this;

	    	},

	    	ceil: function () {

	    		this.x = Math.ceil( this.x );
	    		this.y = Math.ceil( this.y );
	    		this.z = Math.ceil( this.z );

	    		return this;

	    	},

	    	round: function () {

	    		this.x = Math.round( this.x );
	    		this.y = Math.round( this.y );
	    		this.z = Math.round( this.z );

	    		return this;

	    	},

	    	roundToZero: function () {

	    		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
	    		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
	    		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

	    		return this;

	    	},

	    	negate: function () {

	    		this.x = - this.x;
	    		this.y = - this.y;
	    		this.z = - this.z;

	    		return this;

	    	},

	    	dot: function ( v ) {

	    		return this.x * v.x + this.y * v.y + this.z * v.z;

	    	},

	    	lengthSq: function () {

	    		return this.x * this.x + this.y * this.y + this.z * this.z;

	    	},

	    	length: function () {

	    		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	    	},

	    	lengthManhattan: function () {

	    		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	    	},

	    	normalize: function () {

	    		return this.divideScalar( this.length() );

	    	},

	    	setLength: function ( length ) {

	    		return this.multiplyScalar( length / this.length() );

	    	},

	    	lerp: function ( v, alpha ) {

	    		this.x += ( v.x - this.x ) * alpha;
	    		this.y += ( v.y - this.y ) * alpha;
	    		this.z += ( v.z - this.z ) * alpha;

	    		return this;

	    	},

	    	lerpVectors: function ( v1, v2, alpha ) {

	    		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	    	},

	    	cross: function ( v, w ) {

	    		if ( w !== undefined ) {

	    			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
	    			return this.crossVectors( v, w );

	    		}

	    		var x = this.x, y = this.y, z = this.z;

	    		this.x = y * v.z - z * v.y;
	    		this.y = z * v.x - x * v.z;
	    		this.z = x * v.y - y * v.x;

	    		return this;

	    	},

	    	crossVectors: function ( a, b ) {

	    		var ax = a.x, ay = a.y, az = a.z;
	    		var bx = b.x, by = b.y, bz = b.z;

	    		this.x = ay * bz - az * by;
	    		this.y = az * bx - ax * bz;
	    		this.z = ax * by - ay * bx;

	    		return this;

	    	},

	    	projectOnVector: function ( vector ) {

	    		var scalar = vector.dot( this ) / vector.lengthSq();

	    		return this.copy( vector ).multiplyScalar( scalar );

	    	},

	    	projectOnPlane: function () {

	    		var v1;

	    		return function projectOnPlane( planeNormal ) {

	    			if ( v1 === undefined ) v1 = new Vector3();

	    			v1.copy( this ).projectOnVector( planeNormal );

	    			return this.sub( v1 );

	    		};

	    	}(),

	    	reflect: function () {

	    		// reflect incident vector off plane orthogonal to normal
	    		// normal is assumed to have unit length

	    		var v1;

	    		return function reflect( normal ) {

	    			if ( v1 === undefined ) v1 = new Vector3();

	    			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

	    		};

	    	}(),

	    	angleTo: function ( v ) {

	    		var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

	    		// clamp, to handle numerical problems

	    		return Math.acos( exports.Math.clamp( theta, - 1, 1 ) );

	    	},

	    	distanceTo: function ( v ) {

	    		return Math.sqrt( this.distanceToSquared( v ) );

	    	},

	    	distanceToSquared: function ( v ) {

	    		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

	    		return dx * dx + dy * dy + dz * dz;

	    	},

	    	distanceToManhattan: function ( v ) {

	    		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	    	},

	    	setFromSpherical: function( s ) {

	    		var sinPhiRadius = Math.sin( s.phi ) * s.radius;

	    		this.x = sinPhiRadius * Math.sin( s.theta );
	    		this.y = Math.cos( s.phi ) * s.radius;
	    		this.z = sinPhiRadius * Math.cos( s.theta );

	    		return this;

	    	},

	    	setFromMatrixPosition: function ( m ) {

	    		return this.setFromMatrixColumn( m, 3 );

	    	},

	    	setFromMatrixScale: function ( m ) {

	    		var sx = this.setFromMatrixColumn( m, 0 ).length();
	    		var sy = this.setFromMatrixColumn( m, 1 ).length();
	    		var sz = this.setFromMatrixColumn( m, 2 ).length();

	    		this.x = sx;
	    		this.y = sy;
	    		this.z = sz;

	    		return this;

	    	},

	    	setFromMatrixColumn: function ( m, index ) {

	    		if ( typeof m === 'number' ) {

	    			console.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );
	    			var temp = m
	    			m = index;
	    			index = temp;

	    		}

	    		return this.fromArray( m.elements, index * 4 );

	    	},

	    	equals: function ( v ) {

	    		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	    	},

	    	fromArray: function ( array, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		this.x = array[ offset ];
	    		this.y = array[ offset + 1 ];
	    		this.z = array[ offset + 2 ];

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		array[ offset ] = this.x;
	    		array[ offset + 1 ] = this.y;
	    		array[ offset + 2 ] = this.z;

	    		return array;

	    	},

	    	fromAttribute: function ( attribute, index, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		index = index * attribute.itemSize + offset;

	    		this.x = attribute.array[ index ];
	    		this.y = attribute.array[ index + 1 ];
	    		this.z = attribute.array[ index + 2 ];

	    		return this;

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author supereggbert / http://www.paulbrunt.co.uk/
	     * @author philogb / http://blog.thejit.org/
	     * @author jordi_ros / http://plattsoft.com
	     * @author D1plo1d / http://github.com/D1plo1d
	     * @author alteredq / http://alteredqualia.com/
	     * @author mikael emtinger / http://gomo.se/
	     * @author timknip / http://www.floorplanner.com/
	     * @author bhouston / http://clara.io
	     * @author WestLangley / http://github.com/WestLangley
	     */

	    function Matrix4() {

	    	this.elements = new Float32Array( [

	    		1, 0, 0, 0,
	    		0, 1, 0, 0,
	    		0, 0, 1, 0,
	    		0, 0, 0, 1

	    	] );

	    	if ( arguments.length > 0 ) {

	    		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	    	}

	    }

	    Matrix4.prototype = {

	    	constructor: Matrix4,

	    	isMatrix4: true,

	    	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

	    		var te = this.elements;

	    		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
	    		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
	    		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
	    		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

	    		return this;

	    	},

	    	identity: function () {

	    		this.set(

	    			1, 0, 0, 0,
	    			0, 1, 0, 0,
	    			0, 0, 1, 0,
	    			0, 0, 0, 1

	    		);

	    		return this;

	    	},

	    	clone: function () {

	    		return new Matrix4().fromArray( this.elements );

	    	},

	    	copy: function ( m ) {

	    		this.elements.set( m.elements );

	    		return this;

	    	},

	    	copyPosition: function ( m ) {

	    		var te = this.elements;
	    		var me = m.elements;

	    		te[ 12 ] = me[ 12 ];
	    		te[ 13 ] = me[ 13 ];
	    		te[ 14 ] = me[ 14 ];

	    		return this;

	    	},

	    	extractBasis: function ( xAxis, yAxis, zAxis ) {

	    		xAxis.setFromMatrixColumn( this, 0 );
	    		yAxis.setFromMatrixColumn( this, 1 );
	    		zAxis.setFromMatrixColumn( this, 2 );

	    		return this;

	    	},

	    	makeBasis: function ( xAxis, yAxis, zAxis ) {

	    		this.set(
	    			xAxis.x, yAxis.x, zAxis.x, 0,
	    			xAxis.y, yAxis.y, zAxis.y, 0,
	    			xAxis.z, yAxis.z, zAxis.z, 0,
	    			0,       0,       0,       1
	    		);

	    		return this;

	    	},

	    	extractRotation: function () {

	    		var v1;

	    		return function extractRotation( m ) {

	    			if ( v1 === undefined ) v1 = new Vector3();

	    			var te = this.elements;
	    			var me = m.elements;

	    			var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
	    			var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
	    			var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

	    			te[ 0 ] = me[ 0 ] * scaleX;
	    			te[ 1 ] = me[ 1 ] * scaleX;
	    			te[ 2 ] = me[ 2 ] * scaleX;

	    			te[ 4 ] = me[ 4 ] * scaleY;
	    			te[ 5 ] = me[ 5 ] * scaleY;
	    			te[ 6 ] = me[ 6 ] * scaleY;

	    			te[ 8 ] = me[ 8 ] * scaleZ;
	    			te[ 9 ] = me[ 9 ] * scaleZ;
	    			te[ 10 ] = me[ 10 ] * scaleZ;

	    			return this;

	    		};

	    	}(),

	    	makeRotationFromEuler: function ( euler ) {

	    		if ( (euler && euler.isEuler) === false ) {

	    			console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

	    		}

	    		var te = this.elements;

	    		var x = euler.x, y = euler.y, z = euler.z;
	    		var a = Math.cos( x ), b = Math.sin( x );
	    		var c = Math.cos( y ), d = Math.sin( y );
	    		var e = Math.cos( z ), f = Math.sin( z );

	    		if ( euler.order === 'XYZ' ) {

	    			var ae = a * e, af = a * f, be = b * e, bf = b * f;

	    			te[ 0 ] = c * e;
	    			te[ 4 ] = - c * f;
	    			te[ 8 ] = d;

	    			te[ 1 ] = af + be * d;
	    			te[ 5 ] = ae - bf * d;
	    			te[ 9 ] = - b * c;

	    			te[ 2 ] = bf - ae * d;
	    			te[ 6 ] = be + af * d;
	    			te[ 10 ] = a * c;

	    		} else if ( euler.order === 'YXZ' ) {

	    			var ce = c * e, cf = c * f, de = d * e, df = d * f;

	    			te[ 0 ] = ce + df * b;
	    			te[ 4 ] = de * b - cf;
	    			te[ 8 ] = a * d;

	    			te[ 1 ] = a * f;
	    			te[ 5 ] = a * e;
	    			te[ 9 ] = - b;

	    			te[ 2 ] = cf * b - de;
	    			te[ 6 ] = df + ce * b;
	    			te[ 10 ] = a * c;

	    		} else if ( euler.order === 'ZXY' ) {

	    			var ce = c * e, cf = c * f, de = d * e, df = d * f;

	    			te[ 0 ] = ce - df * b;
	    			te[ 4 ] = - a * f;
	    			te[ 8 ] = de + cf * b;

	    			te[ 1 ] = cf + de * b;
	    			te[ 5 ] = a * e;
	    			te[ 9 ] = df - ce * b;

	    			te[ 2 ] = - a * d;
	    			te[ 6 ] = b;
	    			te[ 10 ] = a * c;

	    		} else if ( euler.order === 'ZYX' ) {

	    			var ae = a * e, af = a * f, be = b * e, bf = b * f;

	    			te[ 0 ] = c * e;
	    			te[ 4 ] = be * d - af;
	    			te[ 8 ] = ae * d + bf;

	    			te[ 1 ] = c * f;
	    			te[ 5 ] = bf * d + ae;
	    			te[ 9 ] = af * d - be;

	    			te[ 2 ] = - d;
	    			te[ 6 ] = b * c;
	    			te[ 10 ] = a * c;

	    		} else if ( euler.order === 'YZX' ) {

	    			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

	    			te[ 0 ] = c * e;
	    			te[ 4 ] = bd - ac * f;
	    			te[ 8 ] = bc * f + ad;

	    			te[ 1 ] = f;
	    			te[ 5 ] = a * e;
	    			te[ 9 ] = - b * e;

	    			te[ 2 ] = - d * e;
	    			te[ 6 ] = ad * f + bc;
	    			te[ 10 ] = ac - bd * f;

	    		} else if ( euler.order === 'XZY' ) {

	    			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

	    			te[ 0 ] = c * e;
	    			te[ 4 ] = - f;
	    			te[ 8 ] = d * e;

	    			te[ 1 ] = ac * f + bd;
	    			te[ 5 ] = a * e;
	    			te[ 9 ] = ad * f - bc;

	    			te[ 2 ] = bc * f - ad;
	    			te[ 6 ] = b * e;
	    			te[ 10 ] = bd * f + ac;

	    		}

	    		// last column
	    		te[ 3 ] = 0;
	    		te[ 7 ] = 0;
	    		te[ 11 ] = 0;

	    		// bottom row
	    		te[ 12 ] = 0;
	    		te[ 13 ] = 0;
	    		te[ 14 ] = 0;
	    		te[ 15 ] = 1;

	    		return this;

	    	},

	    	makeRotationFromQuaternion: function ( q ) {

	    		var te = this.elements;

	    		var x = q.x, y = q.y, z = q.z, w = q.w;
	    		var x2 = x + x, y2 = y + y, z2 = z + z;
	    		var xx = x * x2, xy = x * y2, xz = x * z2;
	    		var yy = y * y2, yz = y * z2, zz = z * z2;
	    		var wx = w * x2, wy = w * y2, wz = w * z2;

	    		te[ 0 ] = 1 - ( yy + zz );
	    		te[ 4 ] = xy - wz;
	    		te[ 8 ] = xz + wy;

	    		te[ 1 ] = xy + wz;
	    		te[ 5 ] = 1 - ( xx + zz );
	    		te[ 9 ] = yz - wx;

	    		te[ 2 ] = xz - wy;
	    		te[ 6 ] = yz + wx;
	    		te[ 10 ] = 1 - ( xx + yy );

	    		// last column
	    		te[ 3 ] = 0;
	    		te[ 7 ] = 0;
	    		te[ 11 ] = 0;

	    		// bottom row
	    		te[ 12 ] = 0;
	    		te[ 13 ] = 0;
	    		te[ 14 ] = 0;
	    		te[ 15 ] = 1;

	    		return this;

	    	},

	    	lookAt: function () {

	    		var x, y, z;

	    		return function lookAt( eye, target, up ) {

	    			if ( x === undefined ) {

	    				x = new Vector3();
	    				y = new Vector3();
	    				z = new Vector3();

	    			}

	    			var te = this.elements;

	    			z.subVectors( eye, target ).normalize();

	    			if ( z.lengthSq() === 0 ) {

	    				z.z = 1;

	    			}

	    			x.crossVectors( up, z ).normalize();

	    			if ( x.lengthSq() === 0 ) {

	    				z.z += 0.0001;
	    				x.crossVectors( up, z ).normalize();

	    			}

	    			y.crossVectors( z, x );


	    			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
	    			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
	    			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

	    			return this;

	    		};

	    	}(),

	    	multiply: function ( m, n ) {

	    		if ( n !== undefined ) {

	    			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
	    			return this.multiplyMatrices( m, n );

	    		}

	    		return this.multiplyMatrices( this, m );

	    	},

	    	premultiply: function ( m ) {

	    		return this.multiplyMatrices( m, this );

	    	},

	    	multiplyMatrices: function ( a, b ) {

	    		var ae = a.elements;
	    		var be = b.elements;
	    		var te = this.elements;

	    		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
	    		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
	    		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
	    		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

	    		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
	    		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
	    		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
	    		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

	    		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
	    		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
	    		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
	    		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

	    		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
	    		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
	    		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
	    		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

	    		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
	    		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
	    		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
	    		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

	    		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
	    		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
	    		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
	    		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

	    		return this;

	    	},

	    	multiplyToArray: function ( a, b, r ) {

	    		var te = this.elements;

	    		this.multiplyMatrices( a, b );

	    		r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
	    		r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
	    		r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
	    		r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

	    		return this;

	    	},

	    	multiplyScalar: function ( s ) {

	    		var te = this.elements;

	    		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
	    		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
	    		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
	    		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

	    		return this;

	    	},

	    	applyToVector3Array: function () {

	    		var v1;

	    		return function applyToVector3Array( array, offset, length ) {

	    			if ( v1 === undefined ) v1 = new Vector3();
	    			if ( offset === undefined ) offset = 0;
	    			if ( length === undefined ) length = array.length;

	    			for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

	    				v1.fromArray( array, j );
	    				v1.applyMatrix4( this );
	    				v1.toArray( array, j );

	    			}

	    			return array;

	    		};

	    	}(),

	    	applyToBuffer: function () {

	    		var v1;

	    		return function applyToBuffer( buffer, offset, length ) {

	    			if ( v1 === undefined ) v1 = new Vector3();
	    			if ( offset === undefined ) offset = 0;
	    			if ( length === undefined ) length = buffer.length / buffer.itemSize;

	    			for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

	    				v1.x = buffer.getX( j );
	    				v1.y = buffer.getY( j );
	    				v1.z = buffer.getZ( j );

	    				v1.applyMatrix4( this );

	    				buffer.setXYZ( v1.x, v1.y, v1.z );

	    			}

	    			return buffer;

	    		};

	    	}(),

	    	determinant: function () {

	    		var te = this.elements;

	    		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
	    		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
	    		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
	    		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

	    		//TODO: make this more efficient
	    		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

	    		return (
	    			n41 * (
	    				+ n14 * n23 * n32
	    				 - n13 * n24 * n32
	    				 - n14 * n22 * n33
	    				 + n12 * n24 * n33
	    				 + n13 * n22 * n34
	    				 - n12 * n23 * n34
	    			) +
	    			n42 * (
	    				+ n11 * n23 * n34
	    				 - n11 * n24 * n33
	    				 + n14 * n21 * n33
	    				 - n13 * n21 * n34
	    				 + n13 * n24 * n31
	    				 - n14 * n23 * n31
	    			) +
	    			n43 * (
	    				+ n11 * n24 * n32
	    				 - n11 * n22 * n34
	    				 - n14 * n21 * n32
	    				 + n12 * n21 * n34
	    				 + n14 * n22 * n31
	    				 - n12 * n24 * n31
	    			) +
	    			n44 * (
	    				- n13 * n22 * n31
	    				 - n11 * n23 * n32
	    				 + n11 * n22 * n33
	    				 + n13 * n21 * n32
	    				 - n12 * n21 * n33
	    				 + n12 * n23 * n31
	    			)

	    		);

	    	},

	    	transpose: function () {

	    		var te = this.elements;
	    		var tmp;

	    		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
	    		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
	    		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

	    		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
	    		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
	    		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

	    		return this;

	    	},

	    	flattenToArrayOffset: function ( array, offset ) {

	    		console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
	    				"- just use .toArray instead." );

	    		return this.toArray( array, offset );

	    	},

	    	getPosition: function () {

	    		var v1;

	    		return function getPosition() {

	    			if ( v1 === undefined ) v1 = new Vector3();
	    			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

	    			return v1.setFromMatrixColumn( this, 3 );

	    		};

	    	}(),

	    	setPosition: function ( v ) {

	    		var te = this.elements;

	    		te[ 12 ] = v.x;
	    		te[ 13 ] = v.y;
	    		te[ 14 ] = v.z;

	    		return this;

	    	},

	    	getInverse: function ( m, throwOnDegenerate ) {

	    		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
	    		var te = this.elements,
	    			me = m.elements,

	    			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
	    			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
	    			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
	    			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

	    			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
	    			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
	    			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
	    			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

	    		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

	    		if ( det === 0 ) {

	    			var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

	    			if ( throwOnDegenerate === true ) {

	    				throw new Error( msg );

	    			} else {

	    				console.warn( msg );

	    			}

	    			return this.identity();

	    		}

	    		var detInv = 1 / det;

	    		te[ 0 ] = t11 * detInv;
	    		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
	    		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
	    		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

	    		te[ 4 ] = t12 * detInv;
	    		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
	    		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
	    		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

	    		te[ 8 ] = t13 * detInv;
	    		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
	    		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
	    		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

	    		te[ 12 ] = t14 * detInv;
	    		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
	    		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
	    		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

	    		return this;

	    	},

	    	scale: function ( v ) {

	    		var te = this.elements;
	    		var x = v.x, y = v.y, z = v.z;

	    		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
	    		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
	    		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
	    		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

	    		return this;

	    	},

	    	getMaxScaleOnAxis: function () {

	    		var te = this.elements;

	    		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
	    		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
	    		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

	    		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	    	},

	    	makeTranslation: function ( x, y, z ) {

	    		this.set(

	    			1, 0, 0, x,
	    			0, 1, 0, y,
	    			0, 0, 1, z,
	    			0, 0, 0, 1

	    		);

	    		return this;

	    	},

	    	makeRotationX: function ( theta ) {

	    		var c = Math.cos( theta ), s = Math.sin( theta );

	    		this.set(

	    			1, 0,  0, 0,
	    			0, c, - s, 0,
	    			0, s,  c, 0,
	    			0, 0,  0, 1

	    		);

	    		return this;

	    	},

	    	makeRotationY: function ( theta ) {

	    		var c = Math.cos( theta ), s = Math.sin( theta );

	    		this.set(

	    			 c, 0, s, 0,
	    			 0, 1, 0, 0,
	    			- s, 0, c, 0,
	    			 0, 0, 0, 1

	    		);

	    		return this;

	    	},

	    	makeRotationZ: function ( theta ) {

	    		var c = Math.cos( theta ), s = Math.sin( theta );

	    		this.set(

	    			c, - s, 0, 0,
	    			s,  c, 0, 0,
	    			0,  0, 1, 0,
	    			0,  0, 0, 1

	    		);

	    		return this;

	    	},

	    	makeRotationAxis: function ( axis, angle ) {

	    		// Based on http://www.gamedev.net/reference/articles/article1199.asp

	    		var c = Math.cos( angle );
	    		var s = Math.sin( angle );
	    		var t = 1 - c;
	    		var x = axis.x, y = axis.y, z = axis.z;
	    		var tx = t * x, ty = t * y;

	    		this.set(

	    			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
	    			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
	    			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
	    			0, 0, 0, 1

	    		);

	    		 return this;

	    	},

	    	makeScale: function ( x, y, z ) {

	    		this.set(

	    			x, 0, 0, 0,
	    			0, y, 0, 0,
	    			0, 0, z, 0,
	    			0, 0, 0, 1

	    		);

	    		return this;

	    	},

	    	compose: function ( position, quaternion, scale ) {

	    		this.makeRotationFromQuaternion( quaternion );
	    		this.scale( scale );
	    		this.setPosition( position );

	    		return this;

	    	},

	    	decompose: function () {

	    		var vector, matrix;

	    		return function decompose( position, quaternion, scale ) {

	    			if ( vector === undefined ) {

	    				vector = new Vector3();
	    				matrix = new Matrix4();

	    			}

	    			var te = this.elements;

	    			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
	    			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
	    			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

	    			// if determine is negative, we need to invert one scale
	    			var det = this.determinant();
	    			if ( det < 0 ) {

	    				sx = - sx;

	    			}

	    			position.x = te[ 12 ];
	    			position.y = te[ 13 ];
	    			position.z = te[ 14 ];

	    			// scale the rotation part

	    			matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

	    			var invSX = 1 / sx;
	    			var invSY = 1 / sy;
	    			var invSZ = 1 / sz;

	    			matrix.elements[ 0 ] *= invSX;
	    			matrix.elements[ 1 ] *= invSX;
	    			matrix.elements[ 2 ] *= invSX;

	    			matrix.elements[ 4 ] *= invSY;
	    			matrix.elements[ 5 ] *= invSY;
	    			matrix.elements[ 6 ] *= invSY;

	    			matrix.elements[ 8 ] *= invSZ;
	    			matrix.elements[ 9 ] *= invSZ;
	    			matrix.elements[ 10 ] *= invSZ;

	    			quaternion.setFromRotationMatrix( matrix );

	    			scale.x = sx;
	    			scale.y = sy;
	    			scale.z = sz;

	    			return this;

	    		};

	    	}(),

	    	makeFrustum: function ( left, right, bottom, top, near, far ) {

	    		var te = this.elements;
	    		var x = 2 * near / ( right - left );
	    		var y = 2 * near / ( top - bottom );

	    		var a = ( right + left ) / ( right - left );
	    		var b = ( top + bottom ) / ( top - bottom );
	    		var c = - ( far + near ) / ( far - near );
	    		var d = - 2 * far * near / ( far - near );

	    		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
	    		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
	    		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
	    		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

	    		return this;

	    	},

	    	makePerspective: function ( fov, aspect, near, far ) {

	    		var ymax = near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 );
	    		var ymin = - ymax;
	    		var xmin = ymin * aspect;
	    		var xmax = ymax * aspect;

	    		return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

	    	},

	    	makeOrthographic: function ( left, right, top, bottom, near, far ) {

	    		var te = this.elements;
	    		var w = 1.0 / ( right - left );
	    		var h = 1.0 / ( top - bottom );
	    		var p = 1.0 / ( far - near );

	    		var x = ( right + left ) * w;
	    		var y = ( top + bottom ) * h;
	    		var z = ( far + near ) * p;

	    		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
	    		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
	    		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
	    		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

	    		return this;

	    	},

	    	equals: function ( matrix ) {

	    		var te = this.elements;
	    		var me = matrix.elements;

	    		for ( var i = 0; i < 16; i ++ ) {

	    			if ( te[ i ] !== me[ i ] ) return false;

	    		}

	    		return true;

	    	},

	    	fromArray: function ( array, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		for( var i = 0; i < 16; i ++ ) {

	    			this.elements[ i ] = array[ i + offset ];

	    		}

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		var te = this.elements;

	    		array[ offset ] = te[ 0 ];
	    		array[ offset + 1 ] = te[ 1 ];
	    		array[ offset + 2 ] = te[ 2 ];
	    		array[ offset + 3 ] = te[ 3 ];

	    		array[ offset + 4 ] = te[ 4 ];
	    		array[ offset + 5 ] = te[ 5 ];
	    		array[ offset + 6 ] = te[ 6 ];
	    		array[ offset + 7 ] = te[ 7 ];

	    		array[ offset + 8 ]  = te[ 8 ];
	    		array[ offset + 9 ]  = te[ 9 ];
	    		array[ offset + 10 ] = te[ 10 ];
	    		array[ offset + 11 ] = te[ 11 ];

	    		array[ offset + 12 ] = te[ 12 ];
	    		array[ offset + 13 ] = te[ 13 ];
	    		array[ offset + 14 ] = te[ 14 ];
	    		array[ offset + 15 ] = te[ 15 ];

	    		return array;

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	    	images = images !== undefined ? images : [];
	    	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

	    	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	    	this.flipY = false;

	    }

	    CubeTexture.prototype = Object.create( Texture.prototype );
	    CubeTexture.prototype.constructor = CubeTexture;

	    CubeTexture.prototype.isCubeTexture = true;

	    Object.defineProperty( CubeTexture.prototype, 'images', {

	    	get: function () {

	    		return this.image;

	    	},

	    	set: function ( value ) {

	    		this.image = value;

	    	}

	    } );

	    var emptyTexture = new Texture();
	    var emptyCubeTexture = new CubeTexture();

	    // --- Base for inner nodes (including the root) ---

	    function UniformContainer() {

	    	this.seq = [];
	    	this.map = {};

	    }

	    // --- Utilities ---

	    // Array Caches (provide typed arrays for temporary by size)

	    var arrayCacheF32 = [];
	    var arrayCacheI32 = [];

	    // Flattening for arrays of vectors and matrices

	    function flatten( array, nBlocks, blockSize ) {

	    	var firstElem = array[ 0 ];

	    	if ( firstElem <= 0 || firstElem > 0 ) return array;
	    	// unoptimized: ! isNaN( firstElem )
	    	// see http://jacksondunstan.com/articles/983

	    	var n = nBlocks * blockSize,
	    		r = arrayCacheF32[ n ];

	    	if ( r === undefined ) {

	    		r = new Float32Array( n );
	    		arrayCacheF32[ n ] = r;

	    	}

	    	if ( nBlocks !== 0 ) {

	    		firstElem.toArray( r, 0 );

	    		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

	    			offset += blockSize;
	    			array[ i ].toArray( r, offset );

	    		}

	    	}

	    	return r;

	    }

	    // Texture unit allocation

	    function allocTexUnits( renderer, n ) {

	    	var r = arrayCacheI32[ n ];

	    	if ( r === undefined ) {

	    		r = new Int32Array( n );
	    		arrayCacheI32[ n ] = r;

	    	}

	    	for ( var i = 0; i !== n; ++ i )
	    		r[ i ] = renderer.allocTextureUnit();

	    	return r;

	    }

	    // --- Setters ---

	    // Note: Defining these methods externally, because they come in a bunch
	    // and this way their names minify.

	    // Single scalar

	    function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
	    function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }

	    // Single float vector (from flat array or THREE.VectorN)

	    function setValue2fv( gl, v ) {

	    	if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
	    	else gl.uniform2f( this.addr, v.x, v.y );

	    }

	    function setValue3fv( gl, v ) {

	    	if ( v.x !== undefined )
	    		gl.uniform3f( this.addr, v.x, v.y, v.z );
	    	else if ( v.r !== undefined )
	    		gl.uniform3f( this.addr, v.r, v.g, v.b );
	    	else
	    		gl.uniform3fv( this.addr, v );

	    }

	    function setValue4fv( gl, v ) {

	    	if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
	    	else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

	    }

	    // Single matrix (from flat array or MatrixN)

	    function setValue2fm( gl, v ) {

	    	gl.uniformMatrix2fv( this.addr, false, v.elements || v );

	    }

	    function setValue3fm( gl, v ) {

	    	gl.uniformMatrix3fv( this.addr, false, v.elements || v );

	    }

	    function setValue4fm( gl, v ) {

	    	gl.uniformMatrix4fv( this.addr, false, v.elements || v );

	    }

	    // Single texture (2D / Cube)

	    function setValueT1( gl, v, renderer ) {

	    	var unit = renderer.allocTextureUnit();
	    	gl.uniform1i( this.addr, unit );
	    	renderer.setTexture2D( v || emptyTexture, unit );

	    }

	    function setValueT6( gl, v, renderer ) {

	    	var unit = renderer.allocTextureUnit();
	    	gl.uniform1i( this.addr, unit );
	    	renderer.setTextureCube( v || emptyCubeTexture, unit );

	    }

	    // Integer / Boolean vectors or arrays thereof (always flat arrays)

	    function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
	    function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
	    function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }

	    // Helper to pick the right setter for the singular case

	    function getSingularSetter( type ) {

	    	switch ( type ) {

	    		case 0x1406: return setValue1f; // FLOAT
	    		case 0x8b50: return setValue2fv; // _VEC2
	    		case 0x8b51: return setValue3fv; // _VEC3
	    		case 0x8b52: return setValue4fv; // _VEC4

	    		case 0x8b5a: return setValue2fm; // _MAT2
	    		case 0x8b5b: return setValue3fm; // _MAT3
	    		case 0x8b5c: return setValue4fm; // _MAT4

	    		case 0x8b5e: return setValueT1; // SAMPLER_2D
	    		case 0x8b60: return setValueT6; // SAMPLER_CUBE

	    		case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
	    		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
	    		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
	    		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	    	}

	    }

	    // Array of scalars

	    function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
	    function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }

	    // Array of vectors (flat or from THREE classes)

	    function setValueV2a( gl, v ) {

	    	gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

	    }

	    function setValueV3a( gl, v ) {

	    	gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

	    }

	    function setValueV4a( gl, v ) {

	    	gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

	    }

	    // Array of matrices (flat or from THREE clases)

	    function setValueM2a( gl, v ) {

	    	gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

	    }

	    function setValueM3a( gl, v ) {

	    	gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

	    }

	    function setValueM4a( gl, v ) {

	    	gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

	    }

	    // Array of textures (2D / Cube)

	    function setValueT1a( gl, v, renderer ) {

	    	var n = v.length,
	    		units = allocTexUnits( renderer, n );

	    	gl.uniform1iv( this.addr, units );

	    	for ( var i = 0; i !== n; ++ i ) {

	    		renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

	    	}

	    }

	    function setValueT6a( gl, v, renderer ) {

	    	var n = v.length,
	    		units = allocTexUnits( renderer, n );

	    	gl.uniform1iv( this.addr, units );

	    	for ( var i = 0; i !== n; ++ i ) {

	    		renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

	    	}

	    }

	    // Helper to pick the right setter for a pure (bottom-level) array

	    function getPureArraySetter( type ) {

	    	switch ( type ) {

	    		case 0x1406: return setValue1fv; // FLOAT
	    		case 0x8b50: return setValueV2a; // _VEC2
	    		case 0x8b51: return setValueV3a; // _VEC3
	    		case 0x8b52: return setValueV4a; // _VEC4

	    		case 0x8b5a: return setValueM2a; // _MAT2
	    		case 0x8b5b: return setValueM3a; // _MAT3
	    		case 0x8b5c: return setValueM4a; // _MAT4

	    		case 0x8b5e: return setValueT1a; // SAMPLER_2D
	    		case 0x8b60: return setValueT6a; // SAMPLER_CUBE

	    		case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
	    		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
	    		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
	    		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	    	}

	    }

	    // --- Uniform Classes ---

	    function SingleUniform( id, activeInfo, addr ) {

	    	this.id = id;
	    	this.addr = addr;
	    	this.setValue = getSingularSetter( activeInfo.type );

	    	// this.path = activeInfo.name; // DEBUG

	    }

	    function PureArrayUniform( id, activeInfo, addr ) {

	    	this.id = id;
	    	this.addr = addr;
	    	this.size = activeInfo.size;
	    	this.setValue = getPureArraySetter( activeInfo.type );

	    	// this.path = activeInfo.name; // DEBUG

	    }

	    function StructuredUniform( id ) {

	    	this.id = id;

	    	UniformContainer.call( this ); // mix-in

	    }

	    StructuredUniform.prototype.setValue = function( gl, value ) {

	    	// Note: Don't need an extra 'renderer' parameter, since samplers
	    	// are not allowed in structured uniforms.

	    	var seq = this.seq;

	    	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

	    		var u = seq[ i ];
	    		u.setValue( gl, value[ u.id ] );

	    	}

	    };

	    // --- Top-level ---

	    // Parser - builds up the property tree from the path strings

	    var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	    // extracts
	    // 	- the identifier (member name or array index)
	    //  - followed by an optional right bracket (found when array index)
	    //  - followed by an optional left bracket or dot (type of subscript)
	    //
	    // Note: These portions can be read in a non-overlapping fashion and
	    // allow straightforward parsing of the hierarchy that WebGL encodes
	    // in the uniform names.

	    function addUniform( container, uniformObject ) {

	    	container.seq.push( uniformObject );
	    	container.map[ uniformObject.id ] = uniformObject;

	    }

	    function parseUniform( activeInfo, addr, container ) {

	    	var path = activeInfo.name,
	    		pathLength = path.length;

	    	// reset RegExp object, because of the early exit of a previous run
	    	RePathPart.lastIndex = 0;

	    	for (; ;) {

	    		var match = RePathPart.exec( path ),
	    			matchEnd = RePathPart.lastIndex,

	    			id = match[ 1 ],
	    			idIsIndex = match[ 2 ] === ']',
	    			subscript = match[ 3 ];

	    		if ( idIsIndex ) id = id | 0; // convert to integer

	    		if ( subscript === undefined ||
	    				subscript === '[' && matchEnd + 2 === pathLength ) {
	    			// bare name or "pure" bottom-level array "[0]" suffix

	    			addUniform( container, subscript === undefined ?
	    					new SingleUniform( id, activeInfo, addr ) :
	    					new PureArrayUniform( id, activeInfo, addr ) );

	    			break;

	    		} else {
	    			// step into inner node / create it in case it doesn't exist

	    			var map = container.map,
	    				next = map[ id ];

	    			if ( next === undefined ) {

	    				next = new StructuredUniform( id );
	    				addUniform( container, next );

	    			}

	    			container = next;

	    		}

	    	}

	    }

	    // Root Container

	    function WebGLUniforms( gl, program, renderer ) {

	    	UniformContainer.call( this );

	    	this.renderer = renderer;

	    	var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

	    	for ( var i = 0; i !== n; ++ i ) {

	    		var info = gl.getActiveUniform( program, i ),
	    			path = info.name,
	    			addr = gl.getUniformLocation( program, path );

	    		parseUniform( info, addr, this );

	    	}

	    }

	    WebGLUniforms.prototype.setValue = function( gl, name, value ) {

	    	var u = this.map[ name ];

	    	if ( u !== undefined ) u.setValue( gl, value, this.renderer );

	    };

	    WebGLUniforms.prototype.set = function( gl, object, name ) {

	    	var u = this.map[ name ];

	    	if ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );

	    };

	    WebGLUniforms.prototype.setOptional = function( gl, object, name ) {

	    	var v = object[ name ];

	    	if ( v !== undefined ) this.setValue( gl, name, v );

	    };


	    // Static interface

	    WebGLUniforms.upload = function( gl, seq, values, renderer ) {

	    	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

	    		var u = seq[ i ],
	    			v = values[ u.id ];

	    		if ( v.needsUpdate !== false ) {
	    			// note: always updating when .needsUpdate is undefined

	    			u.setValue( gl, v.value, renderer );

	    		}

	    	}

	    };

	    WebGLUniforms.seqWithValue = function( seq, values ) {

	    	var r = [];

	    	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

	    		var u = seq[ i ];
	    		if ( u.id in values ) r.push( u );

	    	}

	    	return r;

	    };

	    WebGLUniforms.splitDynamic = function( seq, values ) {

	    	var r = null,
	    		n = seq.length,
	    		w = 0;

	    	for ( var i = 0; i !== n; ++ i ) {

	    		var u = seq[ i ],
	    			v = values[ u.id ];

	    		if ( v && v.dynamic === true ) {

	    			if ( r === null ) r = [];
	    			r.push( u );

	    		} else {

	    			// in-place compact 'seq', removing the matches
	    			if ( w < i ) seq[ w ] = u;
	    			++ w;

	    		}

	    	}

	    	if ( w < n ) seq.length = w;

	    	return r;

	    };

	    WebGLUniforms.evalDynamic = function( seq, values, object, material, camera ) {

	    	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

	    		var v = values[ seq[ i ].id ],
	    			f = v.onUpdateCallback;

	    		if ( f !== undefined ) f.call( v, object, material, camera );

	    	}

	    };

	    /**
	     * Uniform Utilities
	     */

	    exports.UniformsUtils = {

	    	merge: function ( uniforms ) {

	    		var merged = {};

	    		for ( var u = 0; u < uniforms.length; u ++ ) {

	    			var tmp = this.clone( uniforms[ u ] );

	    			for ( var p in tmp ) {

	    				merged[ p ] = tmp[ p ];

	    			}

	    		}

	    		return merged;

	    	},

	    	clone: function ( uniforms_src ) {

	    		var uniforms_dst = {};

	    		for ( var u in uniforms_src ) {

	    			uniforms_dst[ u ] = {};

	    			for ( var p in uniforms_src[ u ] ) {

	    				var parameter_src = uniforms_src[ u ][ p ];

	    				if ( (parameter_src && parameter_src.isColor) ||
	    					 (parameter_src && parameter_src.isVector2) ||
	    					 (parameter_src && parameter_src.isVector3) ||
	    					 (parameter_src && parameter_src.isVector4) ||
	    					 (parameter_src && parameter_src.isMatrix3) ||
	    					 (parameter_src && parameter_src.isMatrix4) ||
	    					 (parameter_src && parameter_src.isTexture) ) {

	    					uniforms_dst[ u ][ p ] = parameter_src.clone();

	    				} else if ( Array.isArray( parameter_src ) ) {

	    					uniforms_dst[ u ][ p ] = parameter_src.slice();

	    				} else {

	    					uniforms_dst[ u ][ p ] = parameter_src;

	    				}

	    			}

	    		}

	    		return uniforms_dst;

	    	}

	    };

	    var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	    var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

	    var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	    var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

	    var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	    var begin_vertex = "\nvec3 transformed = vec3( position );\n";

	    var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

	    var bsdfs = "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

	    var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

	    var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n#endif\n";

	    var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

	    var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

	    var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

	    var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	    var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

	    var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	    var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	    var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";

	    var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

	    var defaultnormal_vertex = "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

	    var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

	    var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	    var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

	    var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

	    var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

	    var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";

	    var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

	    var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

	    var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

	    var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

	    var fog_fragment = "#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

	    var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	    var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	    var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	    var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

	    var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

	    var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	    var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

	    var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

	    var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

	    var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

	    var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

	    var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

	    var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

	    var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

	    var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

	    var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

	    var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

	    var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

	    var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n";

	    var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	    var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	    var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	    var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

	    var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";

	    var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	    var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

	    var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

	    var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

	    var project_vertex = "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

	    var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n";

	    var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	    var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

	    var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

	    var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

	    var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

	    var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	    var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

	    var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n";

	    var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	    var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	    var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	    var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

	    var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

	    var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

	    var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

	    var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

	    var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	    var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	    var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	    var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n";

	    var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

	    var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	    var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

	    var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	    var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

	    var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";

	    var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

	    var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	    var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	    var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	    var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	    var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n";

	    var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	    var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	    var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	    var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	    var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	    var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	    var normal_frag = "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n";

	    var normal_vert = "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	    var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	    var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	    var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";

	    var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	    var ShaderChunk = {
	    	alphamap_fragment: alphamap_fragment,
	    	alphamap_pars_fragment: alphamap_pars_fragment,
	    	alphatest_fragment: alphatest_fragment,
	    	aomap_fragment: aomap_fragment,
	    	aomap_pars_fragment: aomap_pars_fragment,
	    	begin_vertex: begin_vertex,
	    	beginnormal_vertex: beginnormal_vertex,
	    	bsdfs: bsdfs,
	    	bumpmap_pars_fragment: bumpmap_pars_fragment,
	    	clipping_planes_fragment: clipping_planes_fragment,
	    	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
	    	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
	    	clipping_planes_vertex: clipping_planes_vertex,
	    	color_fragment: color_fragment,
	    	color_pars_fragment: color_pars_fragment,
	    	color_pars_vertex: color_pars_vertex,
	    	color_vertex: color_vertex,
	    	common: common,
	    	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
	    	defaultnormal_vertex: defaultnormal_vertex,
	    	displacementmap_pars_vertex: displacementmap_pars_vertex,
	    	displacementmap_vertex: displacementmap_vertex,
	    	emissivemap_fragment: emissivemap_fragment,
	    	emissivemap_pars_fragment: emissivemap_pars_fragment,
	    	encodings_fragment: encodings_fragment,
	    	encodings_pars_fragment: encodings_pars_fragment,
	    	envmap_fragment: envmap_fragment,
	    	envmap_pars_fragment: envmap_pars_fragment,
	    	envmap_pars_vertex: envmap_pars_vertex,
	    	envmap_vertex: envmap_vertex,
	    	fog_fragment: fog_fragment,
	    	fog_pars_fragment: fog_pars_fragment,
	    	lightmap_fragment: lightmap_fragment,
	    	lightmap_pars_fragment: lightmap_pars_fragment,
	    	lights_lambert_vertex: lights_lambert_vertex,
	    	lights_pars: lights_pars,
	    	lights_phong_fragment: lights_phong_fragment,
	    	lights_phong_pars_fragment: lights_phong_pars_fragment,
	    	lights_physical_fragment: lights_physical_fragment,
	    	lights_physical_pars_fragment: lights_physical_pars_fragment,
	    	lights_template: lights_template,
	    	logdepthbuf_fragment: logdepthbuf_fragment,
	    	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
	    	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
	    	logdepthbuf_vertex: logdepthbuf_vertex,
	    	map_fragment: map_fragment,
	    	map_pars_fragment: map_pars_fragment,
	    	map_particle_fragment: map_particle_fragment,
	    	map_particle_pars_fragment: map_particle_pars_fragment,
	    	metalnessmap_fragment: metalnessmap_fragment,
	    	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
	    	morphnormal_vertex: morphnormal_vertex,
	    	morphtarget_pars_vertex: morphtarget_pars_vertex,
	    	morphtarget_vertex: morphtarget_vertex,
	    	normal_flip: normal_flip,
	    	normal_fragment: normal_fragment,
	    	normalmap_pars_fragment: normalmap_pars_fragment,
	    	packing: packing,
	    	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
	    	project_vertex: project_vertex,
	    	roughnessmap_fragment: roughnessmap_fragment,
	    	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
	    	shadowmap_pars_fragment: shadowmap_pars_fragment,
	    	shadowmap_pars_vertex: shadowmap_pars_vertex,
	    	shadowmap_vertex: shadowmap_vertex,
	    	shadowmask_pars_fragment: shadowmask_pars_fragment,
	    	skinbase_vertex: skinbase_vertex,
	    	skinning_pars_vertex: skinning_pars_vertex,
	    	skinning_vertex: skinning_vertex,
	    	skinnormal_vertex: skinnormal_vertex,
	    	specularmap_fragment: specularmap_fragment,
	    	specularmap_pars_fragment: specularmap_pars_fragment,
	    	tonemapping_fragment: tonemapping_fragment,
	    	tonemapping_pars_fragment: tonemapping_pars_fragment,
	    	uv_pars_fragment: uv_pars_fragment,
	    	uv_pars_vertex: uv_pars_vertex,
	    	uv_vertex: uv_vertex,
	    	uv2_pars_fragment: uv2_pars_fragment,
	    	uv2_pars_vertex: uv2_pars_vertex,
	    	uv2_vertex: uv2_vertex,
	    	worldpos_vertex: worldpos_vertex,

	    	cube_frag: cube_frag,
	    	cube_vert: cube_vert,
	    	depth_frag: depth_frag,
	    	depth_vert: depth_vert,
	    	distanceRGBA_frag: distanceRGBA_frag,
	    	distanceRGBA_vert: distanceRGBA_vert,
	    	equirect_frag: equirect_frag,
	    	equirect_vert: equirect_vert,
	    	linedashed_frag: linedashed_frag,
	    	linedashed_vert: linedashed_vert,
	    	meshbasic_frag: meshbasic_frag,
	    	meshbasic_vert: meshbasic_vert,
	    	meshlambert_frag: meshlambert_frag,
	    	meshlambert_vert: meshlambert_vert,
	    	meshphong_frag: meshphong_frag,
	    	meshphong_vert: meshphong_vert,
	    	meshphysical_frag: meshphysical_frag,
	    	meshphysical_vert: meshphysical_vert,
	    	normal_frag: normal_frag,
	    	normal_vert: normal_vert,
	    	points_frag: points_frag,
	    	points_vert: points_vert,
	    	shadow_frag: shadow_frag,
	    	shadow_vert: shadow_vert
	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Color( r, g, b ) {

	    	if ( g === undefined && b === undefined ) {

	    		// r is THREE.Color, hex or string
	    		return this.set( r );

	    	}

	    	return this.setRGB( r, g, b );

	    }

	    Color.prototype = {

	    	constructor: Color,

	    	isColor: true,

	    	r: 1, g: 1, b: 1,

	    	set: function ( value ) {

	    		if ( (value && value.isColor) ) {

	    			this.copy( value );

	    		} else if ( typeof value === 'number' ) {

	    			this.setHex( value );

	    		} else if ( typeof value === 'string' ) {

	    			this.setStyle( value );

	    		}

	    		return this;

	    	},

	    	setScalar: function ( scalar ) {

	    		this.r = scalar;
	    		this.g = scalar;
	    		this.b = scalar;

	    	},

	    	setHex: function ( hex ) {

	    		hex = Math.floor( hex );

	    		this.r = ( hex >> 16 & 255 ) / 255;
	    		this.g = ( hex >> 8 & 255 ) / 255;
	    		this.b = ( hex & 255 ) / 255;

	    		return this;

	    	},

	    	setRGB: function ( r, g, b ) {

	    		this.r = r;
	    		this.g = g;
	    		this.b = b;

	    		return this;

	    	},

	    	setHSL: function () {

	    		function hue2rgb( p, q, t ) {

	    			if ( t < 0 ) t += 1;
	    			if ( t > 1 ) t -= 1;
	    			if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
	    			if ( t < 1 / 2 ) return q;
	    			if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
	    			return p;

	    		}

	    		return function setHSL( h, s, l ) {

	    			// h,s,l ranges are in 0.0 - 1.0
	    			h = exports.Math.euclideanModulo( h, 1 );
	    			s = exports.Math.clamp( s, 0, 1 );
	    			l = exports.Math.clamp( l, 0, 1 );

	    			if ( s === 0 ) {

	    				this.r = this.g = this.b = l;

	    			} else {

	    				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
	    				var q = ( 2 * l ) - p;

	    				this.r = hue2rgb( q, p, h + 1 / 3 );
	    				this.g = hue2rgb( q, p, h );
	    				this.b = hue2rgb( q, p, h - 1 / 3 );

	    			}

	    			return this;

	    		};

	    	}(),

	    	setStyle: function ( style ) {

	    		function handleAlpha( string ) {

	    			if ( string === undefined ) return;

	    			if ( parseFloat( string ) < 1 ) {

	    				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

	    			}

	    		}


	    		var m;

	    		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

	    			// rgb / hsl

	    			var color;
	    			var name = m[ 1 ];
	    			var components = m[ 2 ];

	    			switch ( name ) {

	    				case 'rgb':
	    				case 'rgba':

	    					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

	    						// rgb(255,0,0) rgba(255,0,0,0.5)
	    						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
	    						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
	    						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

	    						handleAlpha( color[ 5 ] );

	    						return this;

	    					}

	    					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

	    						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
	    						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
	    						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
	    						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

	    						handleAlpha( color[ 5 ] );

	    						return this;

	    					}

	    					break;

	    				case 'hsl':
	    				case 'hsla':

	    					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

	    						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
	    						var h = parseFloat( color[ 1 ] ) / 360;
	    						var s = parseInt( color[ 2 ], 10 ) / 100;
	    						var l = parseInt( color[ 3 ], 10 ) / 100;

	    						handleAlpha( color[ 5 ] );

	    						return this.setHSL( h, s, l );

	    					}

	    					break;

	    			}

	    		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

	    			// hex color

	    			var hex = m[ 1 ];
	    			var size = hex.length;

	    			if ( size === 3 ) {

	    				// #ff0
	    				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
	    				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
	    				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

	    				return this;

	    			} else if ( size === 6 ) {

	    				// #ff0000
	    				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
	    				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
	    				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

	    				return this;

	    			}

	    		}

	    		if ( style && style.length > 0 ) {

	    			// color keywords
	    			var hex = exports.ColorKeywords[ style ];

	    			if ( hex !== undefined ) {

	    				// red
	    				this.setHex( hex );

	    			} else {

	    				// unknown color
	    				console.warn( 'THREE.Color: Unknown color ' + style );

	    			}

	    		}

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor( this.r, this.g, this.b );

	    	},

	    	copy: function ( color ) {

	    		this.r = color.r;
	    		this.g = color.g;
	    		this.b = color.b;

	    		return this;

	    	},

	    	copyGammaToLinear: function ( color, gammaFactor ) {

	    		if ( gammaFactor === undefined ) gammaFactor = 2.0;

	    		this.r = Math.pow( color.r, gammaFactor );
	    		this.g = Math.pow( color.g, gammaFactor );
	    		this.b = Math.pow( color.b, gammaFactor );

	    		return this;

	    	},

	    	copyLinearToGamma: function ( color, gammaFactor ) {

	    		if ( gammaFactor === undefined ) gammaFactor = 2.0;

	    		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

	    		this.r = Math.pow( color.r, safeInverse );
	    		this.g = Math.pow( color.g, safeInverse );
	    		this.b = Math.pow( color.b, safeInverse );

	    		return this;

	    	},

	    	convertGammaToLinear: function () {

	    		var r = this.r, g = this.g, b = this.b;

	    		this.r = r * r;
	    		this.g = g * g;
	    		this.b = b * b;

	    		return this;

	    	},

	    	convertLinearToGamma: function () {

	    		this.r = Math.sqrt( this.r );
	    		this.g = Math.sqrt( this.g );
	    		this.b = Math.sqrt( this.b );

	    		return this;

	    	},

	    	getHex: function () {

	    		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	    	},

	    	getHexString: function () {

	    		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	    	},

	    	getHSL: function ( optionalTarget ) {

	    		// h,s,l ranges are in 0.0 - 1.0

	    		var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

	    		var r = this.r, g = this.g, b = this.b;

	    		var max = Math.max( r, g, b );
	    		var min = Math.min( r, g, b );

	    		var hue, saturation;
	    		var lightness = ( min + max ) / 2.0;

	    		if ( min === max ) {

	    			hue = 0;
	    			saturation = 0;

	    		} else {

	    			var delta = max - min;

	    			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

	    			switch ( max ) {

	    				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
	    				case g: hue = ( b - r ) / delta + 2; break;
	    				case b: hue = ( r - g ) / delta + 4; break;

	    			}

	    			hue /= 6;

	    		}

	    		hsl.h = hue;
	    		hsl.s = saturation;
	    		hsl.l = lightness;

	    		return hsl;

	    	},

	    	getStyle: function () {

	    		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	    	},

	    	offsetHSL: function ( h, s, l ) {

	    		var hsl = this.getHSL();

	    		hsl.h += h; hsl.s += s; hsl.l += l;

	    		this.setHSL( hsl.h, hsl.s, hsl.l );

	    		return this;

	    	},

	    	add: function ( color ) {

	    		this.r += color.r;
	    		this.g += color.g;
	    		this.b += color.b;

	    		return this;

	    	},

	    	addColors: function ( color1, color2 ) {

	    		this.r = color1.r + color2.r;
	    		this.g = color1.g + color2.g;
	    		this.b = color1.b + color2.b;

	    		return this;

	    	},

	    	addScalar: function ( s ) {

	    		this.r += s;
	    		this.g += s;
	    		this.b += s;

	    		return this;

	    	},

	    	sub: function( color ) {

	    		this.r = Math.max( 0, this.r - color.r );
	    		this.g = Math.max( 0, this.g - color.g );
	    		this.b = Math.max( 0, this.b - color.b );

	    		return this;

	    	},

	    	multiply: function ( color ) {

	    		this.r *= color.r;
	    		this.g *= color.g;
	    		this.b *= color.b;

	    		return this;

	    	},

	    	multiplyScalar: function ( s ) {

	    		this.r *= s;
	    		this.g *= s;
	    		this.b *= s;

	    		return this;

	    	},

	    	lerp: function ( color, alpha ) {

	    		this.r += ( color.r - this.r ) * alpha;
	    		this.g += ( color.g - this.g ) * alpha;
	    		this.b += ( color.b - this.b ) * alpha;

	    		return this;

	    	},

	    	equals: function ( c ) {

	    		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	    	},

	    	fromArray: function ( array, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		this.r = array[ offset ];
	    		this.g = array[ offset + 1 ];
	    		this.b = array[ offset + 2 ];

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		array[ offset ] = this.r;
	    		array[ offset + 1 ] = this.g;
	    		array[ offset + 2 ] = this.b;

	    		return array;

	    	},

	    	toJSON: function () {

	    		return this.getHex();

	    	}

	    };

	    exports.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	    /**
	     * Uniforms library for shared webgl shaders
	     */

	    var UniformsLib = {

	    	common: {

	    		diffuse: { value: new Color( 0xeeeeee ) },
	    		opacity: { value: 1.0 },

	    		map: { value: null },
	    		offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },

	    		specularMap: { value: null },
	    		alphaMap: { value: null },

	    		envMap: { value: null },
	    		flipEnvMap: { value: - 1 },
	    		reflectivity: { value: 1.0 },
	    		refractionRatio: { value: 0.98 }

	    	},

	    	aomap: {

	    		aoMap: { value: null },
	    		aoMapIntensity: { value: 1 }

	    	},

	    	lightmap: {

	    		lightMap: { value: null },
	    		lightMapIntensity: { value: 1 }

	    	},

	    	emissivemap: {

	    		emissiveMap: { value: null }

	    	},

	    	bumpmap: {

	    		bumpMap: { value: null },
	    		bumpScale: { value: 1 }

	    	},

	    	normalmap: {

	    		normalMap: { value: null },
	    		normalScale: { value: new Vector2( 1, 1 ) }

	    	},

	    	displacementmap: {

	    		displacementMap: { value: null },
	    		displacementScale: { value: 1 },
	    		displacementBias: { value: 0 }

	    	},

	    	roughnessmap: {

	    		roughnessMap: { value: null }

	    	},

	    	metalnessmap: {

	    		metalnessMap: { value: null }

	    	},

	    	fog: {

	    		fogDensity: { value: 0.00025 },
	    		fogNear: { value: 1 },
	    		fogFar: { value: 2000 },
	    		fogColor: { value: new Color( 0xffffff ) }

	    	},

	    	lights: {

	    		ambientLightColor: { value: [] },

	    		directionalLights: { value: [], properties: {
	    			direction: {},
	    			color: {},

	    			shadow: {},
	    			shadowBias: {},
	    			shadowRadius: {},
	    			shadowMapSize: {}
	    		} },

	    		directionalShadowMap: { value: [] },
	    		directionalShadowMatrix: { value: [] },

	    		spotLights: { value: [], properties: {
	    			color: {},
	    			position: {},
	    			direction: {},
	    			distance: {},
	    			coneCos: {},
	    			penumbraCos: {},
	    			decay: {},

	    			shadow: {},
	    			shadowBias: {},
	    			shadowRadius: {},
	    			shadowMapSize: {}
	    		} },

	    		spotShadowMap: { value: [] },
	    		spotShadowMatrix: { value: [] },

	    		pointLights: { value: [], properties: {
	    			color: {},
	    			position: {},
	    			decay: {},
	    			distance: {},

	    			shadow: {},
	    			shadowBias: {},
	    			shadowRadius: {},
	    			shadowMapSize: {}
	    		} },

	    		pointShadowMap: { value: [] },
	    		pointShadowMatrix: { value: [] },

	    		hemisphereLights: { value: [], properties: {
	    			direction: {},
	    			skyColor: {},
	    			groundColor: {}
	    		} }

	    	},

	    	points: {

	    		diffuse: { value: new Color( 0xeeeeee ) },
	    		opacity: { value: 1.0 },
	    		size: { value: 1.0 },
	    		scale: { value: 1.0 },
	    		map: { value: null },
	    		offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }

	    	}

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     * @author mikael emtinger / http://gomo.se/
	     */

	    var ShaderLib = {

	    	basic: {

	    		uniforms: exports.UniformsUtils.merge( [

	    			UniformsLib.common,
	    			UniformsLib.aomap,
	    			UniformsLib.fog

	    		] ),

	    		vertexShader: ShaderChunk.meshbasic_vert,
	    		fragmentShader: ShaderChunk.meshbasic_frag

	    	},

	    	lambert: {

	    		uniforms: exports.UniformsUtils.merge( [

	    			UniformsLib.common,
	    			UniformsLib.aomap,
	    			UniformsLib.lightmap,
	    			UniformsLib.emissivemap,
	    			UniformsLib.fog,
	    			UniformsLib.lights,

	    			{
	    				emissive : { value: new Color( 0x000000 ) }
	    			}

	    		] ),

	    		vertexShader: ShaderChunk.meshlambert_vert,
	    		fragmentShader: ShaderChunk.meshlambert_frag

	    	},

	    	phong: {

	    		uniforms: exports.UniformsUtils.merge( [

	    			UniformsLib.common,
	    			UniformsLib.aomap,
	    			UniformsLib.lightmap,
	    			UniformsLib.emissivemap,
	    			UniformsLib.bumpmap,
	    			UniformsLib.normalmap,
	    			UniformsLib.displacementmap,
	    			UniformsLib.fog,
	    			UniformsLib.lights,

	    			{
	    				emissive : { value: new Color( 0x000000 ) },
	    				specular : { value: new Color( 0x111111 ) },
	    				shininess: { value: 30 }
	    			}

	    		] ),

	    		vertexShader: ShaderChunk.meshphong_vert,
	    		fragmentShader: ShaderChunk.meshphong_frag

	    	},

	    	standard: {

	    		uniforms: exports.UniformsUtils.merge( [

	    			UniformsLib.common,
	    			UniformsLib.aomap,
	    			UniformsLib.lightmap,
	    			UniformsLib.emissivemap,
	    			UniformsLib.bumpmap,
	    			UniformsLib.normalmap,
	    			UniformsLib.displacementmap,
	    			UniformsLib.roughnessmap,
	    			UniformsLib.metalnessmap,
	    			UniformsLib.fog,
	    			UniformsLib.lights,

	    			{
	    				emissive : { value: new Color( 0x000000 ) },
	    				roughness: { value: 0.5 },
	    				metalness: { value: 0 },
	    				envMapIntensity : { value: 1 }, // temporary
	    			}

	    		] ),

	    		vertexShader: ShaderChunk.meshphysical_vert,
	    		fragmentShader: ShaderChunk.meshphysical_frag

	    	},

	    	points: {

	    		uniforms: exports.UniformsUtils.merge( [

	    			UniformsLib.points,
	    			UniformsLib.fog

	    		] ),

	    		vertexShader: ShaderChunk.points_vert,
	    		fragmentShader: ShaderChunk.points_frag

	    	},

	    	dashed: {

	    		uniforms: exports.UniformsUtils.merge( [

	    			UniformsLib.common,
	    			UniformsLib.fog,

	    			{
	    				scale    : { value: 1 },
	    				dashSize : { value: 1 },
	    				totalSize: { value: 2 }
	    			}

	    		] ),

	    		vertexShader: ShaderChunk.linedashed_vert,
	    		fragmentShader: ShaderChunk.linedashed_frag

	    	},

	    	depth: {

	    		uniforms: exports.UniformsUtils.merge( [

	    			UniformsLib.common,
	    			UniformsLib.displacementmap

	    		] ),

	    		vertexShader: ShaderChunk.depth_vert,
	    		fragmentShader: ShaderChunk.depth_frag

	    	},

	    	normal: {

	    		uniforms: {

	    			opacity : { value: 1.0 }

	    		},

	    		vertexShader: ShaderChunk.normal_vert,
	    		fragmentShader: ShaderChunk.normal_frag

	    	},

	    	/* -------------------------------------------------------------------------
	    	//	Cube map shader
	    	 ------------------------------------------------------------------------- */

	    	cube: {

	    		uniforms: {
	    			tCube: { value: null },
	    			tFlip: { value: - 1 },
	    			opacity: { value: 1.0 }
	    		},

	    		vertexShader: ShaderChunk.cube_vert,
	    		fragmentShader: ShaderChunk.cube_frag

	    	},

	    	/* -------------------------------------------------------------------------
	    	//	Cube map shader
	    	 ------------------------------------------------------------------------- */

	    	equirect: {

	    		uniforms: {
	    			tEquirect: { value: null },
	    			tFlip: { value: - 1 }
	    		},

	    		vertexShader: ShaderChunk.equirect_vert,
	    		fragmentShader: ShaderChunk.equirect_frag

	    	},

	    	distanceRGBA: {

	    		uniforms: {

	    			lightPos: { value: new Vector3() }

	    		},

	    		vertexShader: ShaderChunk.distanceRGBA_vert,
	    		fragmentShader: ShaderChunk.distanceRGBA_frag

	    	}

	    };

	    ShaderLib.physical = {

	    	uniforms: exports.UniformsUtils.merge( [

	    		ShaderLib.standard.uniforms,

	    		{
	    			clearCoat: { value: 0 },
	    			clearCoatRoughness: { value: 0 }
	    		}

	    	] ),

	    	vertexShader: ShaderChunk.meshphysical_vert,
	    	fragmentShader: ShaderChunk.meshphysical_frag

	    };

	    /**
	     * @author bhouston / http://clara.io
	     */

	    function Box2( min, max ) {

	    	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
	    	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	    }

	    Box2.prototype = {

	    	constructor: Box2,

	    	set: function ( min, max ) {

	    		this.min.copy( min );
	    		this.max.copy( max );

	    		return this;

	    	},

	    	setFromPoints: function ( points ) {

	    		this.makeEmpty();

	    		for ( var i = 0, il = points.length; i < il; i ++ ) {

	    			this.expandByPoint( points[ i ] );

	    		}

	    		return this;

	    	},

	    	setFromCenterAndSize: function () {

	    		var v1 = new Vector2();

	    		return function setFromCenterAndSize( center, size ) {

	    			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
	    			this.min.copy( center ).sub( halfSize );
	    			this.max.copy( center ).add( halfSize );

	    			return this;

	    		};

	    	}(),

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( box ) {

	    		this.min.copy( box.min );
	    		this.max.copy( box.max );

	    		return this;

	    	},

	    	makeEmpty: function () {

	    		this.min.x = this.min.y = + Infinity;
	    		this.max.x = this.max.y = - Infinity;

	    		return this;

	    	},

	    	isEmpty: function () {

	    		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

	    		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	    	},

	    	getCenter: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector2();
	    		return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	    	},

	    	getSize: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector2();
	    		return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

	    	},

	    	expandByPoint: function ( point ) {

	    		this.min.min( point );
	    		this.max.max( point );

	    		return this;

	    	},

	    	expandByVector: function ( vector ) {

	    		this.min.sub( vector );
	    		this.max.add( vector );

	    		return this;

	    	},

	    	expandByScalar: function ( scalar ) {

	    		this.min.addScalar( - scalar );
	    		this.max.addScalar( scalar );

	    		return this;

	    	},

	    	containsPoint: function ( point ) {

	    		if ( point.x < this.min.x || point.x > this.max.x ||
	    		     point.y < this.min.y || point.y > this.max.y ) {

	    			return false;

	    		}

	    		return true;

	    	},

	    	containsBox: function ( box ) {

	    		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
	    		     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

	    			return true;

	    		}

	    		return false;

	    	},

	    	getParameter: function ( point, optionalTarget ) {

	    		// This can potentially have a divide by zero if the box
	    		// has a size dimension of 0.

	    		var result = optionalTarget || new Vector2();

	    		return result.set(
	    			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
	    			( point.y - this.min.y ) / ( this.max.y - this.min.y )
	    		);

	    	},

	    	intersectsBox: function ( box ) {

	    		// using 6 splitting planes to rule out intersections.

	    		if ( box.max.x < this.min.x || box.min.x > this.max.x ||
	    		     box.max.y < this.min.y || box.min.y > this.max.y ) {

	    			return false;

	    		}

	    		return true;

	    	},

	    	clampPoint: function ( point, optionalTarget ) {

	    		var result = optionalTarget || new Vector2();
	    		return result.copy( point ).clamp( this.min, this.max );

	    	},

	    	distanceToPoint: function () {

	    		var v1 = new Vector2();

	    		return function distanceToPoint( point ) {

	    			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
	    			return clampedPoint.sub( point ).length();

	    		};

	    	}(),

	    	intersect: function ( box ) {

	    		this.min.max( box.min );
	    		this.max.min( box.max );

	    		return this;

	    	},

	    	union: function ( box ) {

	    		this.min.min( box.min );
	    		this.max.max( box.max );

	    		return this;

	    	},

	    	translate: function ( offset ) {

	    		this.min.add( offset );
	    		this.max.add( offset );

	    		return this;

	    	},

	    	equals: function ( box ) {

	    		return box.min.equals( this.min ) && box.max.equals( this.max );

	    	}

	    };

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function LensFlarePlugin( renderer, flares ) {

	    	var gl = renderer.context;
	    	var state = renderer.state;

	    	var vertexBuffer, elementBuffer;
	    	var shader, program, attributes, uniforms;

	    	var tempTexture, occlusionTexture;

	    	function init() {

	    		var vertices = new Float32Array( [
	    			- 1, - 1,  0, 0,
	    			 1, - 1,  1, 0,
	    			 1,  1,  1, 1,
	    			- 1,  1,  0, 1
	    		] );

	    		var faces = new Uint16Array( [
	    			0, 1, 2,
	    			0, 2, 3
	    		] );

	    		// buffers

	    		vertexBuffer     = gl.createBuffer();
	    		elementBuffer    = gl.createBuffer();

	    		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
	    		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

	    		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	    		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

	    		// textures

	    		tempTexture      = gl.createTexture();
	    		occlusionTexture = gl.createTexture();

	    		state.bindTexture( gl.TEXTURE_2D, tempTexture );
	    		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

	    		state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
	    		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
	    		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

	    		shader = {

	    			vertexShader: [

	    				"uniform lowp int renderType;",

	    				"uniform vec3 screenPosition;",
	    				"uniform vec2 scale;",
	    				"uniform float rotation;",

	    				"uniform sampler2D occlusionMap;",

	    				"attribute vec2 position;",
	    				"attribute vec2 uv;",

	    				"varying vec2 vUV;",
	    				"varying float vVisibility;",

	    				"void main() {",

	    					"vUV = uv;",

	    					"vec2 pos = position;",

	    					"if ( renderType == 2 ) {",

	    						"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
	    						"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

	    						"vVisibility =        visibility.r / 9.0;",
	    						"vVisibility *= 1.0 - visibility.g / 9.0;",
	    						"vVisibility *=       visibility.b / 9.0;",
	    						"vVisibility *= 1.0 - visibility.a / 9.0;",

	    						"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
	    						"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

	    					"}",

	    					"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

	    				"}"

	    			].join( "\n" ),

	    			fragmentShader: [

	    				"uniform lowp int renderType;",

	    				"uniform sampler2D map;",
	    				"uniform float opacity;",
	    				"uniform vec3 color;",

	    				"varying vec2 vUV;",
	    				"varying float vVisibility;",

	    				"void main() {",

	    					// pink square

	    					"if ( renderType == 0 ) {",

	    						"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

	    					// restore

	    					"} else if ( renderType == 1 ) {",

	    						"gl_FragColor = texture2D( map, vUV );",

	    					// flare

	    					"} else {",

	    						"vec4 texture = texture2D( map, vUV );",
	    						"texture.a *= opacity * vVisibility;",
	    						"gl_FragColor = texture;",
	    						"gl_FragColor.rgb *= color;",

	    					"}",

	    				"}"

	    			].join( "\n" )

	    		};

	    		program = createProgram( shader );

	    		attributes = {
	    			vertex: gl.getAttribLocation ( program, "position" ),
	    			uv:     gl.getAttribLocation ( program, "uv" )
	    		};

	    		uniforms = {
	    			renderType:     gl.getUniformLocation( program, "renderType" ),
	    			map:            gl.getUniformLocation( program, "map" ),
	    			occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
	    			opacity:        gl.getUniformLocation( program, "opacity" ),
	    			color:          gl.getUniformLocation( program, "color" ),
	    			scale:          gl.getUniformLocation( program, "scale" ),
	    			rotation:       gl.getUniformLocation( program, "rotation" ),
	    			screenPosition: gl.getUniformLocation( program, "screenPosition" )
	    		};

	    	}

	    	/*
	    	 * Render lens flares
	    	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	    	 *         reads these back and calculates occlusion.
	    	 */

	    	this.render = function ( scene, camera, viewport ) {

	    		if ( flares.length === 0 ) return;

	    		var tempPosition = new Vector3();

	    		var invAspect = viewport.w / viewport.z,
	    			halfViewportWidth = viewport.z * 0.5,
	    			halfViewportHeight = viewport.w * 0.5;

	    		var size = 16 / viewport.w,
	    			scale = new Vector2( size * invAspect, size );

	    		var screenPosition = new Vector3( 1, 1, 0 ),
	    			screenPositionPixels = new Vector2( 1, 1 );

	    		var validArea = new Box2();

	    		validArea.min.set( 0, 0 );
	    		validArea.max.set( viewport.z - 16, viewport.w - 16 );

	    		if ( program === undefined ) {

	    			init();

	    		}

	    		gl.useProgram( program );

	    		state.initAttributes();
	    		state.enableAttribute( attributes.vertex );
	    		state.enableAttribute( attributes.uv );
	    		state.disableUnusedAttributes();

	    		// loop through all lens flares to update their occlusion and positions
	    		// setup gl and common used attribs/uniforms

	    		gl.uniform1i( uniforms.occlusionMap, 0 );
	    		gl.uniform1i( uniforms.map, 1 );

	    		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
	    		gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
	    		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

	    		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

	    		state.disable( gl.CULL_FACE );
	    		state.setDepthWrite( false );

	    		for ( var i = 0, l = flares.length; i < l; i ++ ) {

	    			size = 16 / viewport.w;
	    			scale.set( size * invAspect, size );

	    			// calc object screen position

	    			var flare = flares[ i ];

	    			tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

	    			tempPosition.applyMatrix4( camera.matrixWorldInverse );
	    			tempPosition.applyProjection( camera.projectionMatrix );

	    			// setup arrays for gl programs

	    			screenPosition.copy( tempPosition );

	    			// horizontal and vertical coordinate of the lower left corner of the pixels to copy

	    			screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
	    			screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

	    			// screen cull

	    			if ( validArea.containsPoint( screenPositionPixels ) === true ) {

	    				// save current RGB to temp texture

	    				state.activeTexture( gl.TEXTURE0 );
	    				state.bindTexture( gl.TEXTURE_2D, null );
	    				state.activeTexture( gl.TEXTURE1 );
	    				state.bindTexture( gl.TEXTURE_2D, tempTexture );
	    				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


	    				// render pink quad

	    				gl.uniform1i( uniforms.renderType, 0 );
	    				gl.uniform2f( uniforms.scale, scale.x, scale.y );
	    				gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

	    				state.disable( gl.BLEND );
	    				state.enable( gl.DEPTH_TEST );

	    				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


	    				// copy result to occlusionMap

	    				state.activeTexture( gl.TEXTURE0 );
	    				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
	    				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


	    				// restore graphics

	    				gl.uniform1i( uniforms.renderType, 1 );
	    				state.disable( gl.DEPTH_TEST );

	    				state.activeTexture( gl.TEXTURE1 );
	    				state.bindTexture( gl.TEXTURE_2D, tempTexture );
	    				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


	    				// update object positions

	    				flare.positionScreen.copy( screenPosition );

	    				if ( flare.customUpdateCallback ) {

	    					flare.customUpdateCallback( flare );

	    				} else {

	    					flare.updateLensFlares();

	    				}

	    				// render flares

	    				gl.uniform1i( uniforms.renderType, 2 );
	    				state.enable( gl.BLEND );

	    				for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

	    					var sprite = flare.lensFlares[ j ];

	    					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

	    						screenPosition.x = sprite.x;
	    						screenPosition.y = sprite.y;
	    						screenPosition.z = sprite.z;

	    						size = sprite.size * sprite.scale / viewport.w;

	    						scale.x = size * invAspect;
	    						scale.y = size;

	    						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
	    						gl.uniform2f( uniforms.scale, scale.x, scale.y );
	    						gl.uniform1f( uniforms.rotation, sprite.rotation );

	    						gl.uniform1f( uniforms.opacity, sprite.opacity );
	    						gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

	    						state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
	    						renderer.setTexture2D( sprite.texture, 1 );

	    						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

	    					}

	    				}

	    			}

	    		}

	    		// restore gl

	    		state.enable( gl.CULL_FACE );
	    		state.enable( gl.DEPTH_TEST );
	    		state.setDepthWrite( true );

	    		renderer.resetGLState();

	    	};

	    	function createProgram( shader ) {

	    		var program = gl.createProgram();

	    		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
	    		var vertexShader = gl.createShader( gl.VERTEX_SHADER );

	    		var prefix = "precision " + renderer.getPrecision() + " float;\n";

	    		gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
	    		gl.shaderSource( vertexShader, prefix + shader.vertexShader );

	    		gl.compileShader( fragmentShader );
	    		gl.compileShader( vertexShader );

	    		gl.attachShader( program, fragmentShader );
	    		gl.attachShader( program, vertexShader );

	    		gl.linkProgram( program );

	    		return program;

	    	}

	    }

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function SpritePlugin( renderer, sprites ) {

	    	var gl = renderer.context;
	    	var state = renderer.state;

	    	var vertexBuffer, elementBuffer;
	    	var program, attributes, uniforms;

	    	var texture;

	    	// decompose matrixWorld

	    	var spritePosition = new Vector3();
	    	var spriteRotation = new Quaternion();
	    	var spriteScale = new Vector3();

	    	function init() {

	    		var vertices = new Float32Array( [
	    			- 0.5, - 0.5,  0, 0,
	    			  0.5, - 0.5,  1, 0,
	    			  0.5,   0.5,  1, 1,
	    			- 0.5,   0.5,  0, 1
	    		] );

	    		var faces = new Uint16Array( [
	    			0, 1, 2,
	    			0, 2, 3
	    		] );

	    		vertexBuffer  = gl.createBuffer();
	    		elementBuffer = gl.createBuffer();

	    		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
	    		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

	    		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	    		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

	    		program = createProgram();

	    		attributes = {
	    			position:			gl.getAttribLocation ( program, 'position' ),
	    			uv:					gl.getAttribLocation ( program, 'uv' )
	    		};

	    		uniforms = {
	    			uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
	    			uvScale:			gl.getUniformLocation( program, 'uvScale' ),

	    			rotation:			gl.getUniformLocation( program, 'rotation' ),
	    			scale:				gl.getUniformLocation( program, 'scale' ),

	    			color:				gl.getUniformLocation( program, 'color' ),
	    			map:				gl.getUniformLocation( program, 'map' ),
	    			opacity:			gl.getUniformLocation( program, 'opacity' ),

	    			modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
	    			projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

	    			fogType:			gl.getUniformLocation( program, 'fogType' ),
	    			fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
	    			fogNear:			gl.getUniformLocation( program, 'fogNear' ),
	    			fogFar:				gl.getUniformLocation( program, 'fogFar' ),
	    			fogColor:			gl.getUniformLocation( program, 'fogColor' ),

	    			alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
	    		};

	    		var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	    		canvas.width = 8;
	    		canvas.height = 8;

	    		var context = canvas.getContext( '2d' );
	    		context.fillStyle = 'white';
	    		context.fillRect( 0, 0, 8, 8 );

	    		texture = new Texture( canvas );
	    		texture.needsUpdate = true;

	    	}

	    	this.render = function ( scene, camera ) {

	    		if ( sprites.length === 0 ) return;

	    		// setup gl

	    		if ( program === undefined ) {

	    			init();

	    		}

	    		gl.useProgram( program );

	    		state.initAttributes();
	    		state.enableAttribute( attributes.position );
	    		state.enableAttribute( attributes.uv );
	    		state.disableUnusedAttributes();

	    		state.disable( gl.CULL_FACE );
	    		state.enable( gl.BLEND );

	    		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
	    		gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
	    		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

	    		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

	    		gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

	    		state.activeTexture( gl.TEXTURE0 );
	    		gl.uniform1i( uniforms.map, 0 );

	    		var oldFogType = 0;
	    		var sceneFogType = 0;
	    		var fog = scene.fog;

	    		if ( fog ) {

	    			gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

	    			if ( (fog && fog.isFog) ) {

	    				gl.uniform1f( uniforms.fogNear, fog.near );
	    				gl.uniform1f( uniforms.fogFar, fog.far );

	    				gl.uniform1i( uniforms.fogType, 1 );
	    				oldFogType = 1;
	    				sceneFogType = 1;

	    			} else if ( (fog && fog.isFogExp2) ) {

	    				gl.uniform1f( uniforms.fogDensity, fog.density );

	    				gl.uniform1i( uniforms.fogType, 2 );
	    				oldFogType = 2;
	    				sceneFogType = 2;

	    			}

	    		} else {

	    			gl.uniform1i( uniforms.fogType, 0 );
	    			oldFogType = 0;
	    			sceneFogType = 0;

	    		}


	    		// update positions and sort

	    		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

	    			var sprite = sprites[ i ];

	    			sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
	    			sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

	    		}

	    		sprites.sort( painterSortStable );

	    		// render all sprites

	    		var scale = [];

	    		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

	    			var sprite = sprites[ i ];
	    			var material = sprite.material;

	    			if ( material.visible === false ) continue;

	    			gl.uniform1f( uniforms.alphaTest, material.alphaTest );
	    			gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

	    			sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

	    			scale[ 0 ] = spriteScale.x;
	    			scale[ 1 ] = spriteScale.y;

	    			var fogType = 0;

	    			if ( scene.fog && material.fog ) {

	    				fogType = sceneFogType;

	    			}

	    			if ( oldFogType !== fogType ) {

	    				gl.uniform1i( uniforms.fogType, fogType );
	    				oldFogType = fogType;

	    			}

	    			if ( material.map !== null ) {

	    				gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
	    				gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

	    			} else {

	    				gl.uniform2f( uniforms.uvOffset, 0, 0 );
	    				gl.uniform2f( uniforms.uvScale, 1, 1 );

	    			}

	    			gl.uniform1f( uniforms.opacity, material.opacity );
	    			gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

	    			gl.uniform1f( uniforms.rotation, material.rotation );
	    			gl.uniform2fv( uniforms.scale, scale );

	    			state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
	    			state.setDepthTest( material.depthTest );
	    			state.setDepthWrite( material.depthWrite );

	    			if ( material.map ) {

	    				renderer.setTexture2D( material.map, 0 );

	    			} else {

	    				renderer.setTexture2D( texture, 0 );

	    			}

	    			gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

	    		}

	    		// restore gl

	    		state.enable( gl.CULL_FACE );

	    		renderer.resetGLState();

	    	};

	    	function createProgram() {

	    		var program = gl.createProgram();

	    		var vertexShader = gl.createShader( gl.VERTEX_SHADER );
	    		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

	    		gl.shaderSource( vertexShader, [

	    			'precision ' + renderer.getPrecision() + ' float;',

	    			'uniform mat4 modelViewMatrix;',
	    			'uniform mat4 projectionMatrix;',
	    			'uniform float rotation;',
	    			'uniform vec2 scale;',
	    			'uniform vec2 uvOffset;',
	    			'uniform vec2 uvScale;',

	    			'attribute vec2 position;',
	    			'attribute vec2 uv;',

	    			'varying vec2 vUV;',

	    			'void main() {',

	    				'vUV = uvOffset + uv * uvScale;',

	    				'vec2 alignedPosition = position * scale;',

	    				'vec2 rotatedPosition;',
	    				'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
	    				'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

	    				'vec4 finalPosition;',

	    				'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
	    				'finalPosition.xy += rotatedPosition;',
	    				'finalPosition = projectionMatrix * finalPosition;',

	    				'gl_Position = finalPosition;',

	    			'}'

	    		].join( '\n' ) );

	    		gl.shaderSource( fragmentShader, [

	    			'precision ' + renderer.getPrecision() + ' float;',

	    			'uniform vec3 color;',
	    			'uniform sampler2D map;',
	    			'uniform float opacity;',

	    			'uniform int fogType;',
	    			'uniform vec3 fogColor;',
	    			'uniform float fogDensity;',
	    			'uniform float fogNear;',
	    			'uniform float fogFar;',
	    			'uniform float alphaTest;',

	    			'varying vec2 vUV;',

	    			'void main() {',

	    				'vec4 texture = texture2D( map, vUV );',

	    				'if ( texture.a < alphaTest ) discard;',

	    				'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

	    				'if ( fogType > 0 ) {',

	    					'float depth = gl_FragCoord.z / gl_FragCoord.w;',
	    					'float fogFactor = 0.0;',

	    					'if ( fogType == 1 ) {',

	    						'fogFactor = smoothstep( fogNear, fogFar, depth );',

	    					'} else {',

	    						'const float LOG2 = 1.442695;',
	    						'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
	    						'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

	    					'}',

	    					'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

	    				'}',

	    			'}'

	    		].join( '\n' ) );

	    		gl.compileShader( vertexShader );
	    		gl.compileShader( fragmentShader );

	    		gl.attachShader( program, vertexShader );
	    		gl.attachShader( program, fragmentShader );

	    		gl.linkProgram( program );

	    		return program;

	    	}

	    	function painterSortStable( a, b ) {

	    		if ( a.renderOrder !== b.renderOrder ) {

	    			return a.renderOrder - b.renderOrder;

	    		} else if ( a.z !== b.z ) {

	    			return b.z - a.z;

	    		} else {

	    			return b.id - a.id;

	    		}

	    	}

	    }

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Material() {

	    	Object.defineProperty( this, 'id', { value: MaterialIdCount() } );

	    	this.uuid = exports.Math.generateUUID();

	    	this.name = '';
	    	this.type = 'Material';

	    	this.fog = true;
	    	this.lights = true;

	    	this.blending = NormalBlending;
	    	this.side = FrontSide;
	    	this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
	    	this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

	    	this.opacity = 1;
	    	this.transparent = false;

	    	this.blendSrc = SrcAlphaFactor;
	    	this.blendDst = OneMinusSrcAlphaFactor;
	    	this.blendEquation = AddEquation;
	    	this.blendSrcAlpha = null;
	    	this.blendDstAlpha = null;
	    	this.blendEquationAlpha = null;

	    	this.depthFunc = LessEqualDepth;
	    	this.depthTest = true;
	    	this.depthWrite = true;

	    	this.clippingPlanes = null;
	    	this.clipShadows = false;

	    	this.colorWrite = true;

	    	this.precision = null; // override the renderer's default precision for this material

	    	this.polygonOffset = false;
	    	this.polygonOffsetFactor = 0;
	    	this.polygonOffsetUnits = 0;

	    	this.alphaTest = 0;
	    	this.premultipliedAlpha = false;

	    	this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

	    	this.visible = true;

	    	this._needsUpdate = true;

	    }

	    Material.prototype = {

	    	constructor: Material,

	    	isMaterial: true,

	    	get needsUpdate() {

	    		return this._needsUpdate;

	    	},

	    	set needsUpdate( value ) {

	    		if ( value === true ) this.update();
	    		this._needsUpdate = value;

	    	},

	    	setValues: function ( values ) {

	    		if ( values === undefined ) return;

	    		for ( var key in values ) {

	    			var newValue = values[ key ];

	    			if ( newValue === undefined ) {

	    				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
	    				continue;

	    			}

	    			var currentValue = this[ key ];

	    			if ( currentValue === undefined ) {

	    				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
	    				continue;

	    			}

	    			if ( (currentValue && currentValue.isColor) ) {

	    				currentValue.set( newValue );

	    			} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {

	    				currentValue.copy( newValue );

	    			} else if ( key === 'overdraw' ) {

	    				// ensure overdraw is backwards-compatible with legacy boolean type
	    				this[ key ] = Number( newValue );

	    			} else {

	    				this[ key ] = newValue;

	    			}

	    		}

	    	},

	    	toJSON: function ( meta ) {

	    		var isRoot = meta === undefined;

	    		if ( isRoot ) {

	    			meta = {
	    				textures: {},
	    				images: {}
	    			};

	    		}

	    		var data = {
	    			metadata: {
	    				version: 4.4,
	    				type: 'Material',
	    				generator: 'Material.toJSON'
	    			}
	    		};

	    		// standard Material serialization
	    		data.uuid = this.uuid;
	    		data.type = this.type;

	    		if ( this.name !== '' ) data.name = this.name;

	    		if ( (this.color && this.color.isColor) ) data.color = this.color.getHex();

	    		if ( this.roughness !== undefined ) data.roughness = this.roughness;
	    		if ( this.metalness !== undefined ) data.metalness = this.metalness;

	    		if ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();
	    		if ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();
	    		if ( this.shininess !== undefined ) data.shininess = this.shininess;

	    		if ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;
	    		if ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
	    		if ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
	    		if ( (this.bumpMap && this.bumpMap.isTexture) ) {

	    			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
	    			data.bumpScale = this.bumpScale;

	    		}
	    		if ( (this.normalMap && this.normalMap.isTexture) ) {

	    			data.normalMap = this.normalMap.toJSON( meta ).uuid;
	    			data.normalScale = this.normalScale.toArray();

	    		}
	    		if ( (this.displacementMap && this.displacementMap.isTexture) ) {

	    			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
	    			data.displacementScale = this.displacementScale;
	    			data.displacementBias = this.displacementBias;

	    		}
	    		if ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
	    		if ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

	    		if ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
	    		if ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

	    		if ( (this.envMap && this.envMap.isTexture) ) {

	    			data.envMap = this.envMap.toJSON( meta ).uuid;
	    			data.reflectivity = this.reflectivity; // Scale behind envMap

	    		}

	    		if ( this.size !== undefined ) data.size = this.size;
	    		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

	    		if ( this.blending !== NormalBlending ) data.blending = this.blending;
	    		if ( this.shading !== SmoothShading ) data.shading = this.shading;
	    		if ( this.side !== FrontSide ) data.side = this.side;
	    		if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

	    		if ( this.opacity < 1 ) data.opacity = this.opacity;
	    		if ( this.transparent === true ) data.transparent = this.transparent;

	    		data.depthFunc = this.depthFunc;
	    		data.depthTest = this.depthTest;
	    		data.depthWrite = this.depthWrite;

	    		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
	    		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
	    		if ( this.wireframe === true ) data.wireframe = this.wireframe;
	    		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
	    		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
	    		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

	    		data.skinning = this.skinning;
	    		data.morphTargets = this.morphTargets;

	    		// TODO: Copied from Object3D.toJSON

	    		function extractFromCache( cache ) {

	    			var values = [];

	    			for ( var key in cache ) {

	    				var data = cache[ key ];
	    				delete data.metadata;
	    				values.push( data );

	    			}

	    			return values;

	    		}

	    		if ( isRoot ) {

	    			var textures = extractFromCache( meta.textures );
	    			var images = extractFromCache( meta.images );

	    			if ( textures.length > 0 ) data.textures = textures;
	    			if ( images.length > 0 ) data.images = images;

	    		}

	    		return data;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( source ) {

	    		this.name = source.name;

	    		this.fog = source.fog;
	    		this.lights = source.lights;

	    		this.blending = source.blending;
	    		this.side = source.side;
	    		this.shading = source.shading;
	    		this.vertexColors = source.vertexColors;

	    		this.opacity = source.opacity;
	    		this.transparent = source.transparent;

	    		this.blendSrc = source.blendSrc;
	    		this.blendDst = source.blendDst;
	    		this.blendEquation = source.blendEquation;
	    		this.blendSrcAlpha = source.blendSrcAlpha;
	    		this.blendDstAlpha = source.blendDstAlpha;
	    		this.blendEquationAlpha = source.blendEquationAlpha;

	    		this.depthFunc = source.depthFunc;
	    		this.depthTest = source.depthTest;
	    		this.depthWrite = source.depthWrite;

	    		this.colorWrite = source.colorWrite;

	    		this.precision = source.precision;

	    		this.polygonOffset = source.polygonOffset;
	    		this.polygonOffsetFactor = source.polygonOffsetFactor;
	    		this.polygonOffsetUnits = source.polygonOffsetUnits;

	    		this.alphaTest = source.alphaTest;

	    		this.premultipliedAlpha = source.premultipliedAlpha;

	    		this.overdraw = source.overdraw;

	    		this.visible = source.visible;
	    		this.clipShadows = source.clipShadows;

	    		var srcPlanes = source.clippingPlanes,
	    			dstPlanes = null;

	    		if ( srcPlanes !== null ) {

	    			var n = srcPlanes.length;
	    			dstPlanes = new Array( n );

	    			for ( var i = 0; i !== n; ++ i )
	    				dstPlanes[ i ] = srcPlanes[ i ].clone();

	    		}

	    		this.clippingPlanes = dstPlanes;

	    		return this;

	    	},

	    	update: function () {

	    		this.dispatchEvent( { type: 'update' } );

	    	},

	    	dispose: function () {

	    		this.dispatchEvent( { type: 'dispose' } );

	    	}

	    };

	    Object.assign( Material.prototype, EventDispatcher.prototype );

	    var count$1 = 0;
	    function MaterialIdCount() { return count$1++; };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  defines: { "label" : "value" },
	     *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	     *
	     *  fragmentShader: <string>,
	     *  vertexShader: <string>,
	     *
	     *  wireframe: <boolean>,
	     *  wireframeLinewidth: <float>,
	     *
	     *  lights: <bool>,
	     *
	     *  skinning: <bool>,
	     *  morphTargets: <bool>,
	     *  morphNormals: <bool>
	     * }
	     */

	    function ShaderMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'ShaderMaterial';

	    	this.defines = {};
	    	this.uniforms = {};

	    	this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
	    	this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

	    	this.linewidth = 1;

	    	this.wireframe = false;
	    	this.wireframeLinewidth = 1;

	    	this.fog = false; // set to use scene fog
	    	this.lights = false; // set to use scene lights
	    	this.clipping = false; // set to use user-defined clipping planes

	    	this.skinning = false; // set to use skinning attribute streams
	    	this.morphTargets = false; // set to use morph targets
	    	this.morphNormals = false; // set to use morph normals

	    	this.extensions = {
	    		derivatives: false, // set to use derivatives
	    		fragDepth: false, // set to use fragment depth values
	    		drawBuffers: false, // set to use draw buffers
	    		shaderTextureLOD: false // set to use shader texture LOD
	    	};

	    	// When rendered geometry doesn't include these attributes but the material does,
	    	// use these default values in WebGL. This avoids errors when buffer data is missing.
	    	this.defaultAttributeValues = {
	    		'color': [ 1, 1, 1 ],
	    		'uv': [ 0, 0 ],
	    		'uv2': [ 0, 0 ]
	    	};

	    	this.index0AttributeName = undefined;

	    	if ( parameters !== undefined ) {

	    		if ( parameters.attributes !== undefined ) {

	    			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

	    		}

	    		this.setValues( parameters );

	    	}

	    }

	    ShaderMaterial.prototype = Object.create( Material.prototype );
	    ShaderMaterial.prototype.constructor = ShaderMaterial;

	    ShaderMaterial.prototype.isShaderMaterial = true;

	    ShaderMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.fragmentShader = source.fragmentShader;
	    	this.vertexShader = source.vertexShader;

	    	this.uniforms = exports.UniformsUtils.clone( source.uniforms );

	    	this.defines = source.defines;

	    	this.wireframe = source.wireframe;
	    	this.wireframeLinewidth = source.wireframeLinewidth;

	    	this.lights = source.lights;
	    	this.clipping = source.clipping;

	    	this.skinning = source.skinning;

	    	this.morphTargets = source.morphTargets;
	    	this.morphNormals = source.morphNormals;

	    	this.extensions = source.extensions;

	    	return this;

	    };

	    ShaderMaterial.prototype.toJSON = function ( meta ) {

	    	var data = Material.prototype.toJSON.call( this, meta );

	    	data.uniforms = this.uniforms;
	    	data.vertexShader = this.vertexShader;
	    	data.fragmentShader = this.fragmentShader;

	    	return data;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     * @author bhouston / https://clara.io
	     * @author WestLangley / http://github.com/WestLangley
	     *
	     * parameters = {
	     *
	     *  opacity: <float>,
	     *
	     *  map: new THREE.Texture( <Image> ),
	     *
	     *  alphaMap: new THREE.Texture( <Image> ),
	     *
	     *  displacementMap: new THREE.Texture( <Image> ),
	     *  displacementScale: <float>,
	     *  displacementBias: <float>,
	     *
	     *  wireframe: <boolean>,
	     *  wireframeLinewidth: <float>
	     * }
	     */

	    function MeshDepthMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'MeshDepthMaterial';

	    	this.depthPacking = BasicDepthPacking;

	    	this.skinning = false;
	    	this.morphTargets = false;

	    	this.map = null;

	    	this.alphaMap = null;

	    	this.displacementMap = null;
	    	this.displacementScale = 1;
	    	this.displacementBias = 0;

	    	this.wireframe = false;
	    	this.wireframeLinewidth = 1;

	    	this.fog = false;
	    	this.lights = false;

	    	this.setValues( parameters );

	    }

	    MeshDepthMaterial.prototype = Object.create( Material.prototype );
	    MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	    MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	    MeshDepthMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.depthPacking = source.depthPacking;

	    	this.skinning = source.skinning;
	    	this.morphTargets = source.morphTargets;

	    	this.map = source.map;

	    	this.alphaMap = source.alphaMap;

	    	this.displacementMap = source.displacementMap;
	    	this.displacementScale = source.displacementScale;
	    	this.displacementBias = source.displacementBias;

	    	this.wireframe = source.wireframe;
	    	this.wireframeLinewidth = source.wireframeLinewidth;

	    	return this;

	    };

	    /**
	     * @author bhouston / http://clara.io
	     * @author WestLangley / http://github.com/WestLangley
	     */

	    function Box3( min, max ) {

	    	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
	    	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	    }

	    Box3.prototype = {

	    	constructor: Box3,

	    	isBox3: true,

	    	set: function ( min, max ) {

	    		this.min.copy( min );
	    		this.max.copy( max );

	    		return this;

	    	},

	    	setFromArray: function ( array ) {

	    		var minX = + Infinity;
	    		var minY = + Infinity;
	    		var minZ = + Infinity;

	    		var maxX = - Infinity;
	    		var maxY = - Infinity;
	    		var maxZ = - Infinity;

	    		for ( var i = 0, l = array.length; i < l; i += 3 ) {

	    			var x = array[ i ];
	    			var y = array[ i + 1 ];
	    			var z = array[ i + 2 ];

	    			if ( x < minX ) minX = x;
	    			if ( y < minY ) minY = y;
	    			if ( z < minZ ) minZ = z;

	    			if ( x > maxX ) maxX = x;
	    			if ( y > maxY ) maxY = y;
	    			if ( z > maxZ ) maxZ = z;

	    		}

	    		this.min.set( minX, minY, minZ );
	    		this.max.set( maxX, maxY, maxZ );

	    	},

	    	setFromPoints: function ( points ) {

	    		this.makeEmpty();

	    		for ( var i = 0, il = points.length; i < il; i ++ ) {

	    			this.expandByPoint( points[ i ] );

	    		}

	    		return this;

	    	},

	    	setFromCenterAndSize: function () {

	    		var v1 = new Vector3();

	    		return function setFromCenterAndSize( center, size ) {

	    			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

	    			this.min.copy( center ).sub( halfSize );
	    			this.max.copy( center ).add( halfSize );

	    			return this;

	    		};

	    	}(),

	    	setFromObject: function () {

	    		// Computes the world-axis-aligned bounding box of an object (including its children),
	    		// accounting for both the object's, and children's, world transforms

	    		var v1 = new Vector3();

	    		return function setFromObject( object ) {

	    			var scope = this;

	    			object.updateMatrixWorld( true );

	    			this.makeEmpty();

	    			object.traverse( function ( node ) {

	    				var geometry = node.geometry;

	    				if ( geometry !== undefined ) {

	    					if ( (geometry && geometry.isGeometry) ) {

	    						var vertices = geometry.vertices;

	    						for ( var i = 0, il = vertices.length; i < il; i ++ ) {

	    							v1.copy( vertices[ i ] );
	    							v1.applyMatrix4( node.matrixWorld );

	    							scope.expandByPoint( v1 );

	    						}

	    					} else if ( (geometry && geometry.isBufferGeometry) ) {

	    						var attribute = geometry.attributes.position;

	    						if ( attribute !== undefined ) {

	    							var array, offset, stride;

	    							if ( (attribute && attribute.isInterleavedBufferAttribute) ) {

	    								array = attribute.data.array;
	    								offset = attribute.offset;
	    								stride = attribute.data.stride;

	    							} else {

	    								array = attribute.array;
	    								offset = 0;
	    								stride = 3;

	    							}

	    							for ( var i = offset, il = array.length; i < il; i += stride ) {

	    								v1.fromArray( array, i );
	    								v1.applyMatrix4( node.matrixWorld );

	    								scope.expandByPoint( v1 );

	    							}

	    						}

	    					}

	    				}

	    			} );

	    			return this;

	    		};

	    	}(),

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( box ) {

	    		this.min.copy( box.min );
	    		this.max.copy( box.max );

	    		return this;

	    	},

	    	makeEmpty: function () {

	    		this.min.x = this.min.y = this.min.z = + Infinity;
	    		this.max.x = this.max.y = this.max.z = - Infinity;

	    		return this;

	    	},

	    	isEmpty: function () {

	    		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

	    		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	    	},

	    	getCenter: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	    	},

	    	getSize: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

	    	},

	    	expandByPoint: function ( point ) {

	    		this.min.min( point );
	    		this.max.max( point );

	    		return this;

	    	},

	    	expandByVector: function ( vector ) {

	    		this.min.sub( vector );
	    		this.max.add( vector );

	    		return this;

	    	},

	    	expandByScalar: function ( scalar ) {

	    		this.min.addScalar( - scalar );
	    		this.max.addScalar( scalar );

	    		return this;

	    	},

	    	containsPoint: function ( point ) {

	    		if ( point.x < this.min.x || point.x > this.max.x ||
	    				 point.y < this.min.y || point.y > this.max.y ||
	    				 point.z < this.min.z || point.z > this.max.z ) {

	    			return false;

	    		}

	    		return true;

	    	},

	    	containsBox: function ( box ) {

	    		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
	    			 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
	    			 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

	    			return true;

	    		}

	    		return false;

	    	},

	    	getParameter: function ( point, optionalTarget ) {

	    		// This can potentially have a divide by zero if the box
	    		// has a size dimension of 0.

	    		var result = optionalTarget || new Vector3();

	    		return result.set(
	    			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
	    			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
	    			( point.z - this.min.z ) / ( this.max.z - this.min.z )
	    		);

	    	},

	    	intersectsBox: function ( box ) {

	    		// using 6 splitting planes to rule out intersections.

	    		if ( box.max.x < this.min.x || box.min.x > this.max.x ||
	    				 box.max.y < this.min.y || box.min.y > this.max.y ||
	    				 box.max.z < this.min.z || box.min.z > this.max.z ) {

	    			return false;

	    		}

	    		return true;

	    	},

	    	intersectsSphere: ( function () {

	    		var closestPoint;

	    		return function intersectsSphere( sphere ) {

	    			if ( closestPoint === undefined ) closestPoint = new Vector3();

	    			// Find the point on the AABB closest to the sphere center.
	    			this.clampPoint( sphere.center, closestPoint );

	    			// If that point is inside the sphere, the AABB and sphere intersect.
	    			return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

	    		};

	    	} )(),

	    	intersectsPlane: function ( plane ) {

	    		// We compute the minimum and maximum dot product values. If those values
	    		// are on the same side (back or front) of the plane, then there is no intersection.

	    		var min, max;

	    		if ( plane.normal.x > 0 ) {

	    			min = plane.normal.x * this.min.x;
	    			max = plane.normal.x * this.max.x;

	    		} else {

	    			min = plane.normal.x * this.max.x;
	    			max = plane.normal.x * this.min.x;

	    		}

	    		if ( plane.normal.y > 0 ) {

	    			min += plane.normal.y * this.min.y;
	    			max += plane.normal.y * this.max.y;

	    		} else {

	    			min += plane.normal.y * this.max.y;
	    			max += plane.normal.y * this.min.y;

	    		}

	    		if ( plane.normal.z > 0 ) {

	    			min += plane.normal.z * this.min.z;
	    			max += plane.normal.z * this.max.z;

	    		} else {

	    			min += plane.normal.z * this.max.z;
	    			max += plane.normal.z * this.min.z;

	    		}

	    		return ( min <= plane.constant && max >= plane.constant );

	    	},

	    	clampPoint: function ( point, optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		return result.copy( point ).clamp( this.min, this.max );

	    	},

	    	distanceToPoint: function () {

	    		var v1 = new Vector3();

	    		return function distanceToPoint( point ) {

	    			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
	    			return clampedPoint.sub( point ).length();

	    		};

	    	}(),

	    	getBoundingSphere: function () {

	    		var v1 = new Vector3();

	    		return function getBoundingSphere( optionalTarget ) {

	    			var result = optionalTarget || new Sphere();

	    			this.getCenter( result.center );

	    			result.radius = this.size( v1 ).length() * 0.5;

	    			return result;

	    		};

	    	}(),

	    	intersect: function ( box ) {

	    		this.min.max( box.min );
	    		this.max.min( box.max );

	    		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
	    		if( this.isEmpty() ) this.makeEmpty();

	    		return this;

	    	},

	    	union: function ( box ) {

	    		this.min.min( box.min );
	    		this.max.max( box.max );

	    		return this;

	    	},

	    	applyMatrix4: function () {

	    		var points = [
	    			new Vector3(),
	    			new Vector3(),
	    			new Vector3(),
	    			new Vector3(),
	    			new Vector3(),
	    			new Vector3(),
	    			new Vector3(),
	    			new Vector3()
	    		];

	    		return function applyMatrix4( matrix ) {

	    			// transform of empty box is an empty box.
	    			if( this.isEmpty() ) return this;

	    			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
	    			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
	    			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
	    			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
	    			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
	    			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
	    			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
	    			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
	    			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

	    			this.setFromPoints( points );

	    			return this;

	    		};

	    	}(),

	    	translate: function ( offset ) {

	    		this.min.add( offset );
	    		this.max.add( offset );

	    		return this;

	    	},

	    	equals: function ( box ) {

	    		return box.min.equals( this.min ) && box.max.equals( this.max );

	    	}

	    };

	    /**
	     * @author bhouston / http://clara.io
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Sphere( center, radius ) {

	    	this.center = ( center !== undefined ) ? center : new Vector3();
	    	this.radius = ( radius !== undefined ) ? radius : 0;

	    }

	    Sphere.prototype = {

	    	constructor: Sphere,

	    	set: function ( center, radius ) {

	    		this.center.copy( center );
	    		this.radius = radius;

	    		return this;

	    	},

	    	setFromPoints: function () {

	    		var box = new Box3();

	    		return function setFromPoints( points, optionalCenter ) {

	    			var center = this.center;

	    			if ( optionalCenter !== undefined ) {

	    				center.copy( optionalCenter );

	    			} else {

	    				box.setFromPoints( points ).getCenter( center );

	    			}

	    			var maxRadiusSq = 0;

	    			for ( var i = 0, il = points.length; i < il; i ++ ) {

	    				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

	    			}

	    			this.radius = Math.sqrt( maxRadiusSq );

	    			return this;

	    		};

	    	}(),

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( sphere ) {

	    		this.center.copy( sphere.center );
	    		this.radius = sphere.radius;

	    		return this;

	    	},

	    	empty: function () {

	    		return ( this.radius <= 0 );

	    	},

	    	containsPoint: function ( point ) {

	    		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	    	},

	    	distanceToPoint: function ( point ) {

	    		return ( point.distanceTo( this.center ) - this.radius );

	    	},

	    	intersectsSphere: function ( sphere ) {

	    		var radiusSum = this.radius + sphere.radius;

	    		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	    	},

	    	intersectsBox: function ( box ) {

	    		return box.intersectsSphere( this );

	    	},

	    	intersectsPlane: function ( plane ) {

	    		// We use the following equation to compute the signed distance from
	    		// the center of the sphere to the plane.
	    		//
	    		// distance = q * n - d
	    		//
	    		// If this distance is greater than the radius of the sphere,
	    		// then there is no intersection.

	    		return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

	    	},

	    	clampPoint: function ( point, optionalTarget ) {

	    		var deltaLengthSq = this.center.distanceToSquared( point );

	    		var result = optionalTarget || new Vector3();

	    		result.copy( point );

	    		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

	    			result.sub( this.center ).normalize();
	    			result.multiplyScalar( this.radius ).add( this.center );

	    		}

	    		return result;

	    	},

	    	getBoundingBox: function ( optionalTarget ) {

	    		var box = optionalTarget || new Box3();

	    		box.set( this.center, this.center );
	    		box.expandByScalar( this.radius );

	    		return box;

	    	},

	    	applyMatrix4: function ( matrix ) {

	    		this.center.applyMatrix4( matrix );
	    		this.radius = this.radius * matrix.getMaxScaleOnAxis();

	    		return this;

	    	},

	    	translate: function ( offset ) {

	    		this.center.add( offset );

	    		return this;

	    	},

	    	equals: function ( sphere ) {

	    		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	    	}

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author WestLangley / http://github.com/WestLangley
	     * @author bhouston / http://clara.io
	     * @author tschw
	     */

	    function Matrix3() {

	    	this.elements = new Float32Array( [

	    		1, 0, 0,
	    		0, 1, 0,
	    		0, 0, 1

	    	] );

	    	if ( arguments.length > 0 ) {

	    		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

	    	}

	    }

	    Matrix3.prototype = {

	    	constructor: Matrix3,

	    	isMatrix3: true,

	    	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

	    		var te = this.elements;

	    		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
	    		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
	    		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

	    		return this;

	    	},

	    	identity: function () {

	    		this.set(

	    			1, 0, 0,
	    			0, 1, 0,
	    			0, 0, 1

	    		);

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().fromArray( this.elements );

	    	},

	    	copy: function ( m ) {

	    		var me = m.elements;

	    		this.set(

	    			me[ 0 ], me[ 3 ], me[ 6 ],
	    			me[ 1 ], me[ 4 ], me[ 7 ],
	    			me[ 2 ], me[ 5 ], me[ 8 ]

	    		);

	    		return this;

	    	},

	    	setFromMatrix4: function( m ) {

	    		var me = m.elements;

	    		this.set(

	    			me[ 0 ], me[ 4 ], me[  8 ],
	    			me[ 1 ], me[ 5 ], me[  9 ],
	    			me[ 2 ], me[ 6 ], me[ 10 ]

	    		);

	    		return this;

	    	},

	    	applyToVector3Array: function () {

	    		var v1;

	    		return function applyToVector3Array( array, offset, length ) {

	    			if ( v1 === undefined ) v1 = new Vector3();
	    			if ( offset === undefined ) offset = 0;
	    			if ( length === undefined ) length = array.length;

	    			for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

	    				v1.fromArray( array, j );
	    				v1.applyMatrix3( this );
	    				v1.toArray( array, j );

	    			}

	    			return array;

	    		};

	    	}(),

	    	applyToBuffer: function () {

	    		var v1;

	    		return function applyToBuffer( buffer, offset, length ) {

	    			if ( v1 === undefined ) v1 = new Vector3();
	    			if ( offset === undefined ) offset = 0;
	    			if ( length === undefined ) length = buffer.length / buffer.itemSize;

	    			for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

	    				v1.x = buffer.getX( j );
	    				v1.y = buffer.getY( j );
	    				v1.z = buffer.getZ( j );

	    				v1.applyMatrix3( this );

	    				buffer.setXYZ( v1.x, v1.y, v1.z );

	    			}

	    			return buffer;

	    		};

	    	}(),

	    	multiplyScalar: function ( s ) {

	    		var te = this.elements;

	    		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
	    		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
	    		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

	    		return this;

	    	},

	    	determinant: function () {

	    		var te = this.elements;

	    		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
	    			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
	    			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

	    		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	    	},

	    	getInverse: function ( matrix, throwOnDegenerate ) {

	    		if ( (matrix && matrix.isMatrix4) ) {

	    			console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

	    		}

	    		var me = matrix.elements,
	    			te = this.elements,

	    			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
	    			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
	    			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

	    			t11 = n33 * n22 - n32 * n23,
	    			t12 = n32 * n13 - n33 * n12,
	    			t13 = n23 * n12 - n22 * n13,

	    			det = n11 * t11 + n21 * t12 + n31 * t13;

	    		if ( det === 0 ) {

	    			var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

	    			if ( throwOnDegenerate === true ) {

	    				throw new Error( msg );

	    			} else {

	    				console.warn( msg );

	    			}

	    			return this.identity();
	    		}

	    		var detInv = 1 / det;

	    		te[ 0 ] = t11 * detInv;
	    		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
	    		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

	    		te[ 3 ] = t12 * detInv;
	    		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
	    		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

	    		te[ 6 ] = t13 * detInv;
	    		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
	    		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

	    		return this;

	    	},

	    	transpose: function () {

	    		var tmp, m = this.elements;

	    		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
	    		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
	    		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

	    		return this;

	    	},

	    	flattenToArrayOffset: function ( array, offset ) {

	    		console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
	    				"- just use .toArray instead." );

	    		return this.toArray( array, offset );

	    	},

	    	getNormalMatrix: function ( matrix4 ) {

	    		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

	    	},

	    	transposeIntoArray: function ( r ) {

	    		var m = this.elements;

	    		r[ 0 ] = m[ 0 ];
	    		r[ 1 ] = m[ 3 ];
	    		r[ 2 ] = m[ 6 ];
	    		r[ 3 ] = m[ 1 ];
	    		r[ 4 ] = m[ 4 ];
	    		r[ 5 ] = m[ 7 ];
	    		r[ 6 ] = m[ 2 ];
	    		r[ 7 ] = m[ 5 ];
	    		r[ 8 ] = m[ 8 ];

	    		return this;

	    	},

	    	fromArray: function ( array, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		for( var i = 0; i < 9; i ++ ) {

	    			this.elements[ i ] = array[ i + offset ];

	    		}

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		var te = this.elements;

	    		array[ offset ] = te[ 0 ];
	    		array[ offset + 1 ] = te[ 1 ];
	    		array[ offset + 2 ] = te[ 2 ];

	    		array[ offset + 3 ] = te[ 3 ];
	    		array[ offset + 4 ] = te[ 4 ];
	    		array[ offset + 5 ] = te[ 5 ];

	    		array[ offset + 6 ] = te[ 6 ];
	    		array[ offset + 7 ] = te[ 7 ];
	    		array[ offset + 8 ]  = te[ 8 ];

	    		return array;

	    	}

	    };

	    /**
	     * @author bhouston / http://clara.io
	     */

	    function Plane( normal, constant ) {

	    	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
	    	this.constant = ( constant !== undefined ) ? constant : 0;

	    }

	    Plane.prototype = {

	    	constructor: Plane,

	    	set: function ( normal, constant ) {

	    		this.normal.copy( normal );
	    		this.constant = constant;

	    		return this;

	    	},

	    	setComponents: function ( x, y, z, w ) {

	    		this.normal.set( x, y, z );
	    		this.constant = w;

	    		return this;

	    	},

	    	setFromNormalAndCoplanarPoint: function ( normal, point ) {

	    		this.normal.copy( normal );
	    		this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

	    		return this;

	    	},

	    	setFromCoplanarPoints: function () {

	    		var v1 = new Vector3();
	    		var v2 = new Vector3();

	    		return function setFromCoplanarPoints( a, b, c ) {

	    			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

	    			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

	    			this.setFromNormalAndCoplanarPoint( normal, a );

	    			return this;

	    		};

	    	}(),

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( plane ) {

	    		this.normal.copy( plane.normal );
	    		this.constant = plane.constant;

	    		return this;

	    	},

	    	normalize: function () {

	    		// Note: will lead to a divide by zero if the plane is invalid.

	    		var inverseNormalLength = 1.0 / this.normal.length();
	    		this.normal.multiplyScalar( inverseNormalLength );
	    		this.constant *= inverseNormalLength;

	    		return this;

	    	},

	    	negate: function () {

	    		this.constant *= - 1;
	    		this.normal.negate();

	    		return this;

	    	},

	    	distanceToPoint: function ( point ) {

	    		return this.normal.dot( point ) + this.constant;

	    	},

	    	distanceToSphere: function ( sphere ) {

	    		return this.distanceToPoint( sphere.center ) - sphere.radius;

	    	},

	    	projectPoint: function ( point, optionalTarget ) {

	    		return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

	    	},

	    	orthoPoint: function ( point, optionalTarget ) {

	    		var perpendicularMagnitude = this.distanceToPoint( point );

	    		var result = optionalTarget || new Vector3();
	    		return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

	    	},

	    	intersectLine: function () {

	    		var v1 = new Vector3();

	    		return function intersectLine( line, optionalTarget ) {

	    			var result = optionalTarget || new Vector3();

	    			var direction = line.delta( v1 );

	    			var denominator = this.normal.dot( direction );

	    			if ( denominator === 0 ) {

	    				// line is coplanar, return origin
	    				if ( this.distanceToPoint( line.start ) === 0 ) {

	    					return result.copy( line.start );

	    				}

	    				// Unsure if this is the correct method to handle this case.
	    				return undefined;

	    			}

	    			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

	    			if ( t < 0 || t > 1 ) {

	    				return undefined;

	    			}

	    			return result.copy( direction ).multiplyScalar( t ).add( line.start );

	    		};

	    	}(),

	    	intersectsLine: function ( line ) {

	    		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

	    		var startSign = this.distanceToPoint( line.start );
	    		var endSign = this.distanceToPoint( line.end );

	    		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	    	},

	    	intersectsBox: function ( box ) {

	    		return box.intersectsPlane( this );

	    	},

	    	intersectsSphere: function ( sphere ) {

	    		return sphere.intersectsPlane( this );

	    	},

	    	coplanarPoint: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		return result.copy( this.normal ).multiplyScalar( - this.constant );

	    	},

	    	applyMatrix4: function () {

	    		var v1 = new Vector3();
	    		var m1 = new Matrix3();

	    		return function applyMatrix4( matrix, optionalNormalMatrix ) {

	    			var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

	    			// transform normal based on theory here:
	    			// http://www.songho.ca/opengl/gl_normaltransform.html
	    			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
	    			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

	    			// recalculate constant (like in setFromNormalAndCoplanarPoint)
	    			this.constant = - referencePoint.dot( normal );

	    			return this;

	    		};

	    	}(),

	    	translate: function ( offset ) {

	    		this.constant = this.constant - offset.dot( this.normal );

	    		return this;

	    	},

	    	equals: function ( plane ) {

	    		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     * @author bhouston / http://clara.io
	     */

	    function Frustum( p0, p1, p2, p3, p4, p5 ) {

	    	this.planes = [

	    		( p0 !== undefined ) ? p0 : new Plane(),
	    		( p1 !== undefined ) ? p1 : new Plane(),
	    		( p2 !== undefined ) ? p2 : new Plane(),
	    		( p3 !== undefined ) ? p3 : new Plane(),
	    		( p4 !== undefined ) ? p4 : new Plane(),
	    		( p5 !== undefined ) ? p5 : new Plane()

	    	];

	    }

	    Frustum.prototype = {

	    	constructor: Frustum,

	    	set: function ( p0, p1, p2, p3, p4, p5 ) {

	    		var planes = this.planes;

	    		planes[ 0 ].copy( p0 );
	    		planes[ 1 ].copy( p1 );
	    		planes[ 2 ].copy( p2 );
	    		planes[ 3 ].copy( p3 );
	    		planes[ 4 ].copy( p4 );
	    		planes[ 5 ].copy( p5 );

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( frustum ) {

	    		var planes = this.planes;

	    		for ( var i = 0; i < 6; i ++ ) {

	    			planes[ i ].copy( frustum.planes[ i ] );

	    		}

	    		return this;

	    	},

	    	setFromMatrix: function ( m ) {

	    		var planes = this.planes;
	    		var me = m.elements;
	    		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
	    		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
	    		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
	    		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

	    		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
	    		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
	    		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
	    		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
	    		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
	    		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

	    		return this;

	    	},

	    	intersectsObject: function () {

	    		var sphere = new Sphere();

	    		return function intersectsObject( object ) {

	    			var geometry = object.geometry;

	    			if ( geometry.boundingSphere === null )
	    				geometry.computeBoundingSphere();

	    			sphere.copy( geometry.boundingSphere )
	    				.applyMatrix4( object.matrixWorld );

	    			return this.intersectsSphere( sphere );

	    		};

	    	}(),

	    	intersectsSprite: function () {

	    		var sphere = new Sphere();

	    		return function intersectsSprite( sprite ) {

	    			sphere.center.set( 0, 0, 0 );
	    			sphere.radius = 0.7071067811865476;
	    			sphere.applyMatrix4( sprite.matrixWorld );

	    			return this.intersectsSphere( sphere );

	    		};

	    	}(),

	    	intersectsSphere: function ( sphere ) {

	    		var planes = this.planes;
	    		var center = sphere.center;
	    		var negRadius = - sphere.radius;

	    		for ( var i = 0; i < 6; i ++ ) {

	    			var distance = planes[ i ].distanceToPoint( center );

	    			if ( distance < negRadius ) {

	    				return false;

	    			}

	    		}

	    		return true;

	    	},

	    	intersectsBox: function () {

	    		var p1 = new Vector3(),
	    			p2 = new Vector3();

	    		return function intersectsBox( box ) {

	    			var planes = this.planes;

	    			for ( var i = 0; i < 6 ; i ++ ) {

	    				var plane = planes[ i ];

	    				p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
	    				p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
	    				p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
	    				p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
	    				p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
	    				p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

	    				var d1 = plane.distanceToPoint( p1 );
	    				var d2 = plane.distanceToPoint( p2 );

	    				// if both outside plane, no intersection

	    				if ( d1 < 0 && d2 < 0 ) {

	    					return false;

	    				}

	    			}

	    			return true;

	    		};

	    	}(),


	    	containsPoint: function ( point ) {

	    		var planes = this.planes;

	    		for ( var i = 0; i < 6; i ++ ) {

	    			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

	    				return false;

	    			}

	    		}

	    		return true;

	    	}

	    };

	    function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {

	    	var _gl = _renderer.context,
	    	_state = _renderer.state,
	    	_frustum = new Frustum(),
	    	_projScreenMatrix = new Matrix4(),

	    	_lightShadows = _lights.shadows,

	    	_shadowMapSize = new Vector2(),
	    	_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),

	    	_lookTarget = new Vector3(),
	    	_lightPositionWorld = new Vector3(),

	    	_renderList = [],

	    	_MorphingFlag = 1,
	    	_SkinningFlag = 2,

	    	_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

	    	_depthMaterials = new Array( _NumberOfMaterialVariants ),
	    	_distanceMaterials = new Array( _NumberOfMaterialVariants ),

	    	_materialCache = {};

	    	var cubeDirections = [
	    		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
	    		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
	    	];

	    	var cubeUps = [
	    		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
	    		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
	    	];

	    	var cube2DViewPorts = [
	    		new Vector4(), new Vector4(), new Vector4(),
	    		new Vector4(), new Vector4(), new Vector4()
	    	];

	    	// init

	    	var depthMaterialTemplate = new MeshDepthMaterial();
	    	depthMaterialTemplate.depthPacking = RGBADepthPacking;
	    	depthMaterialTemplate.clipping = true;

	    	var distanceShader = ShaderLib[ "distanceRGBA" ];
	    	var distanceUniforms = exports.UniformsUtils.clone( distanceShader.uniforms );

	    	for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

	    		var useMorphing = ( i & _MorphingFlag ) !== 0;
	    		var useSkinning = ( i & _SkinningFlag ) !== 0;

	    		var depthMaterial = depthMaterialTemplate.clone();
	    		depthMaterial.morphTargets = useMorphing;
	    		depthMaterial.skinning = useSkinning;

	    		_depthMaterials[ i ] = depthMaterial;

	    		var distanceMaterial = new ShaderMaterial( {
	    			defines: {
	    				'USE_SHADOWMAP': ''
	    			},
	    			uniforms: distanceUniforms,
	    			vertexShader: distanceShader.vertexShader,
	    			fragmentShader: distanceShader.fragmentShader,
	    			morphTargets: useMorphing,
	    			skinning: useSkinning,
	    			clipping: true
	    		} );

	    		_distanceMaterials[ i ] = distanceMaterial;

	    	}

	    	//

	    	var scope = this;

	    	this.enabled = false;

	    	this.autoUpdate = true;
	    	this.needsUpdate = false;

	    	this.type = PCFShadowMap;

	    	this.renderReverseSided = true;
	    	this.renderSingleSided = true;

	    	this.render = function ( scene, camera ) {

	    		if ( scope.enabled === false ) return;
	    		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

	    		if ( _lightShadows.length === 0 ) return;

	    		// Set GL state for depth map.
	    		_state.clearColor( 1, 1, 1, 1 );
	    		_state.disable( _gl.BLEND );
	    		_state.setDepthTest( true );
	    		_state.setScissorTest( false );

	    		// render depth map

	    		var faceCount, isPointLight;

	    		for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

	    			var light = _lightShadows[ i ];
	    			var shadow = light.shadow;

	    			if ( shadow === undefined ) {

	    				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
	    				continue;

	    			}

	    			var shadowCamera = shadow.camera;

	    			_shadowMapSize.copy( shadow.mapSize );
	    			_shadowMapSize.min( _maxShadowMapSize );

	    			if ( (light && light.isPointLight) ) {

	    				faceCount = 6;
	    				isPointLight = true;

	    				var vpWidth = _shadowMapSize.x;
	    				var vpHeight = _shadowMapSize.y;

	    				// These viewports map a cube-map onto a 2D texture with the
	    				// following orientation:
	    				//
	    				//  xzXZ
	    				//   y Y
	    				//
	    				// X - Positive x direction
	    				// x - Negative x direction
	    				// Y - Positive y direction
	    				// y - Negative y direction
	    				// Z - Positive z direction
	    				// z - Negative z direction

	    				// positive X
	    				cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
	    				// negative X
	    				cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
	    				// positive Z
	    				cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
	    				// negative Z
	    				cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
	    				// positive Y
	    				cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
	    				// negative Y
	    				cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

	    				_shadowMapSize.x *= 4.0;
	    				_shadowMapSize.y *= 2.0;

	    			} else {

	    				faceCount = 1;
	    				isPointLight = false;

	    			}

	    			if ( shadow.map === null ) {

	    				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

	    				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

	    				shadowCamera.updateProjectionMatrix();

	    			}

	    			if ( (shadow && shadow.isSpotLightShadow) ) {

	    				shadow.update( light );

	    			}

	    			var shadowMap = shadow.map;
	    			var shadowMatrix = shadow.matrix;

	    			_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
	    			shadowCamera.position.copy( _lightPositionWorld );

	    			_renderer.setRenderTarget( shadowMap );
	    			_renderer.clear();

	    			// render shadow map for each cube face (if omni-directional) or
	    			// run a single pass if not

	    			for ( var face = 0; face < faceCount; face ++ ) {

	    				if ( isPointLight ) {

	    					_lookTarget.copy( shadowCamera.position );
	    					_lookTarget.add( cubeDirections[ face ] );
	    					shadowCamera.up.copy( cubeUps[ face ] );
	    					shadowCamera.lookAt( _lookTarget );

	    					var vpDimensions = cube2DViewPorts[ face ];
	    					_state.viewport( vpDimensions );

	    				} else {

	    					_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
	    					shadowCamera.lookAt( _lookTarget );

	    				}

	    				shadowCamera.updateMatrixWorld();
	    				shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

	    				// compute shadow matrix

	    				shadowMatrix.set(
	    					0.5, 0.0, 0.0, 0.5,
	    					0.0, 0.5, 0.0, 0.5,
	    					0.0, 0.0, 0.5, 0.5,
	    					0.0, 0.0, 0.0, 1.0
	    				);

	    				shadowMatrix.multiply( shadowCamera.projectionMatrix );
	    				shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

	    				// update camera matrices and frustum

	    				_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
	    				_frustum.setFromMatrix( _projScreenMatrix );

	    				// set object matrices & frustum culling

	    				_renderList.length = 0;

	    				projectObject( scene, camera, shadowCamera );

	    				// render shadow map
	    				// render regular objects

	    				for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

	    					var object = _renderList[ j ];
	    					var geometry = _objects.update( object );
	    					var material = object.material;

	    					if ( (material && material.isMultiMaterial) ) {

	    						var groups = geometry.groups;
	    						var materials = material.materials;

	    						for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

	    							var group = groups[ k ];
	    							var groupMaterial = materials[ group.materialIndex ];

	    							if ( groupMaterial.visible === true ) {

	    								var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
	    								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

	    							}

	    						}

	    					} else {

	    						var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
	    						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

	    					}

	    				}

	    			}

	    		}

	    		// Restore GL state.
	    		var clearColor = _renderer.getClearColor(),
	    		clearAlpha = _renderer.getClearAlpha();
	    		_renderer.setClearColor( clearColor, clearAlpha );

	    		scope.needsUpdate = false;

	    	};

	    	function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

	    		var geometry = object.geometry;

	    		var result = null;

	    		var materialVariants = _depthMaterials;
	    		var customMaterial = object.customDepthMaterial;

	    		if ( isPointLight ) {

	    			materialVariants = _distanceMaterials;
	    			customMaterial = object.customDistanceMaterial;

	    		}

	    		if ( ! customMaterial ) {

	    			var useMorphing = false;

	    			if ( material.morphTargets ) {

	    				if ( (geometry && geometry.isBufferGeometry) ) {

	    					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

	    				} else if ( (geometry && geometry.isGeometry) ) {

	    					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

	    				}

	    			}

	    			var useSkinning = object.isSkinnedMesh && material.skinning;

	    			var variantIndex = 0;

	    			if ( useMorphing ) variantIndex |= _MorphingFlag;
	    			if ( useSkinning ) variantIndex |= _SkinningFlag;

	    			result = materialVariants[ variantIndex ];

	    		} else {

	    			result = customMaterial;

	    		}

	    		if ( _renderer.localClippingEnabled &&
	    			 material.clipShadows === true &&
	    				material.clippingPlanes.length !== 0 ) {

	    			// in this case we need a unique material instance reflecting the
	    			// appropriate state

	    			var keyA = result.uuid, keyB = material.uuid;

	    			var materialsForVariant = _materialCache[ keyA ];

	    			if ( materialsForVariant === undefined ) {

	    				materialsForVariant = {};
	    				_materialCache[ keyA ] = materialsForVariant;

	    			}

	    			var cachedMaterial = materialsForVariant[ keyB ];

	    			if ( cachedMaterial === undefined ) {

	    				cachedMaterial = result.clone();
	    				materialsForVariant[ keyB ] = cachedMaterial;

	    			}

	    			result = cachedMaterial;

	    		}

	    		result.visible = material.visible;
	    		result.wireframe = material.wireframe;

	    		var side = material.side;

	    		if ( scope.renderSingleSided && side == DoubleSide ) {

	    			side = FrontSide;

	    		}

	    		if ( scope.renderReverseSided ) {

	    			if ( side === FrontSide ) side = BackSide;
	    			else if ( side === BackSide ) side = FrontSide;

	    		}

	    		result.side = side;

	    		result.clipShadows = material.clipShadows;
	    		result.clippingPlanes = material.clippingPlanes;

	    		result.wireframeLinewidth = material.wireframeLinewidth;
	    		result.linewidth = material.linewidth;

	    		if ( isPointLight && result.uniforms.lightPos !== undefined ) {

	    			result.uniforms.lightPos.value.copy( lightPositionWorld );

	    		}

	    		return result;

	    	}

	    	function projectObject( object, camera, shadowCamera ) {

	    		if ( object.visible === false ) return;

	    		var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

	    		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

	    			if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

	    				var material = object.material;

	    				if ( material.visible === true ) {

	    					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
	    					_renderList.push( object );

	    				}

	    			}

	    		}

	    		var children = object.children;

	    		for ( var i = 0, l = children.length; i < l; i ++ ) {

	    			projectObject( children[ i ], camera, shadowCamera );

	    		}

	    	}

	    }

	    /**
	     * @author bhouston / http://clara.io
	     */

	    function Ray( origin, direction ) {

	    	this.origin = ( origin !== undefined ) ? origin : new Vector3();
	    	this.direction = ( direction !== undefined ) ? direction : new Vector3();

	    }

	    Ray.prototype = {

	    	constructor: Ray,

	    	set: function ( origin, direction ) {

	    		this.origin.copy( origin );
	    		this.direction.copy( direction );

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( ray ) {

	    		this.origin.copy( ray.origin );
	    		this.direction.copy( ray.direction );

	    		return this;

	    	},

	    	at: function ( t, optionalTarget ) {

	    		var result = optionalTarget || new Vector3();

	    		return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	    	},

	    	lookAt: function ( v ) {

	    		this.direction.copy( v ).sub( this.origin ).normalize();

	    		return this;

	    	},

	    	recast: function () {

	    		var v1 = new Vector3();

	    		return function recast( t ) {

	    			this.origin.copy( this.at( t, v1 ) );

	    			return this;

	    		};

	    	}(),

	    	closestPointToPoint: function ( point, optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		result.subVectors( point, this.origin );
	    		var directionDistance = result.dot( this.direction );

	    		if ( directionDistance < 0 ) {

	    			return result.copy( this.origin );

	    		}

	    		return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	    	},

	    	distanceToPoint: function ( point ) {

	    		return Math.sqrt( this.distanceSqToPoint( point ) );

	    	},

	    	distanceSqToPoint: function () {

	    		var v1 = new Vector3();

	    		return function distanceSqToPoint( point ) {

	    			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

	    			// point behind the ray

	    			if ( directionDistance < 0 ) {

	    				return this.origin.distanceToSquared( point );

	    			}

	    			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	    			return v1.distanceToSquared( point );

	    		};

	    	}(),

	    	distanceSqToSegment: function () {

	    		var segCenter = new Vector3();
	    		var segDir = new Vector3();
	    		var diff = new Vector3();

	    		return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

	    			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
	    			// It returns the min distance between the ray and the segment
	    			// defined by v0 and v1
	    			// It can also set two optional targets :
	    			// - The closest point on the ray
	    			// - The closest point on the segment

	    			segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
	    			segDir.copy( v1 ).sub( v0 ).normalize();
	    			diff.copy( this.origin ).sub( segCenter );

	    			var segExtent = v0.distanceTo( v1 ) * 0.5;
	    			var a01 = - this.direction.dot( segDir );
	    			var b0 = diff.dot( this.direction );
	    			var b1 = - diff.dot( segDir );
	    			var c = diff.lengthSq();
	    			var det = Math.abs( 1 - a01 * a01 );
	    			var s0, s1, sqrDist, extDet;

	    			if ( det > 0 ) {

	    				// The ray and segment are not parallel.

	    				s0 = a01 * b1 - b0;
	    				s1 = a01 * b0 - b1;
	    				extDet = segExtent * det;

	    				if ( s0 >= 0 ) {

	    					if ( s1 >= - extDet ) {

	    						if ( s1 <= extDet ) {

	    							// region 0
	    							// Minimum at interior points of ray and segment.

	    							var invDet = 1 / det;
	    							s0 *= invDet;
	    							s1 *= invDet;
	    							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

	    						} else {

	    							// region 1

	    							s1 = segExtent;
	    							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
	    							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

	    						}

	    					} else {

	    						// region 5

	    						s1 = - segExtent;
	    						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
	    						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

	    					}

	    				} else {

	    					if ( s1 <= - extDet ) {

	    						// region 4

	    						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
	    						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
	    						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

	    					} else if ( s1 <= extDet ) {

	    						// region 3

	    						s0 = 0;
	    						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
	    						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

	    					} else {

	    						// region 2

	    						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
	    						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
	    						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

	    					}

	    				}

	    			} else {

	    				// Ray and segment are parallel.

	    				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
	    				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
	    				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

	    			}

	    			if ( optionalPointOnRay ) {

	    				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

	    			}

	    			if ( optionalPointOnSegment ) {

	    				optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

	    			}

	    			return sqrDist;

	    		};

	    	}(),

	    	intersectSphere: function () {

	    		var v1 = new Vector3();

	    		return function intersectSphere( sphere, optionalTarget ) {

	    			v1.subVectors( sphere.center, this.origin );
	    			var tca = v1.dot( this.direction );
	    			var d2 = v1.dot( v1 ) - tca * tca;
	    			var radius2 = sphere.radius * sphere.radius;

	    			if ( d2 > radius2 ) return null;

	    			var thc = Math.sqrt( radius2 - d2 );

	    			// t0 = first intersect point - entrance on front of sphere
	    			var t0 = tca - thc;

	    			// t1 = second intersect point - exit point on back of sphere
	    			var t1 = tca + thc;

	    			// test to see if both t0 and t1 are behind the ray - if so, return null
	    			if ( t0 < 0 && t1 < 0 ) return null;

	    			// test to see if t0 is behind the ray:
	    			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
	    			// in order to always return an intersect point that is in front of the ray.
	    			if ( t0 < 0 ) return this.at( t1, optionalTarget );

	    			// else t0 is in front of the ray, so return the first collision point scaled by t0
	    			return this.at( t0, optionalTarget );

	    		};

	    	}(),

	    	intersectsSphere: function ( sphere ) {

	    		return this.distanceToPoint( sphere.center ) <= sphere.radius;

	    	},

	    	distanceToPlane: function ( plane ) {

	    		var denominator = plane.normal.dot( this.direction );

	    		if ( denominator === 0 ) {

	    			// line is coplanar, return origin
	    			if ( plane.distanceToPoint( this.origin ) === 0 ) {

	    				return 0;

	    			}

	    			// Null is preferable to undefined since undefined means.... it is undefined

	    			return null;

	    		}

	    		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

	    		// Return if the ray never intersects the plane

	    		return t >= 0 ? t :  null;

	    	},

	    	intersectPlane: function ( plane, optionalTarget ) {

	    		var t = this.distanceToPlane( plane );

	    		if ( t === null ) {

	    			return null;

	    		}

	    		return this.at( t, optionalTarget );

	    	},



	    	intersectsPlane: function ( plane ) {

	    		// check if the ray lies on the plane first

	    		var distToPoint = plane.distanceToPoint( this.origin );

	    		if ( distToPoint === 0 ) {

	    			return true;

	    		}

	    		var denominator = plane.normal.dot( this.direction );

	    		if ( denominator * distToPoint < 0 ) {

	    			return true;

	    		}

	    		// ray origin is behind the plane (and is pointing behind it)

	    		return false;

	    	},

	    	intersectBox: function ( box, optionalTarget ) {

	    		var tmin, tmax, tymin, tymax, tzmin, tzmax;

	    		var invdirx = 1 / this.direction.x,
	    			invdiry = 1 / this.direction.y,
	    			invdirz = 1 / this.direction.z;

	    		var origin = this.origin;

	    		if ( invdirx >= 0 ) {

	    			tmin = ( box.min.x - origin.x ) * invdirx;
	    			tmax = ( box.max.x - origin.x ) * invdirx;

	    		} else {

	    			tmin = ( box.max.x - origin.x ) * invdirx;
	    			tmax = ( box.min.x - origin.x ) * invdirx;

	    		}

	    		if ( invdiry >= 0 ) {

	    			tymin = ( box.min.y - origin.y ) * invdiry;
	    			tymax = ( box.max.y - origin.y ) * invdiry;

	    		} else {

	    			tymin = ( box.max.y - origin.y ) * invdiry;
	    			tymax = ( box.min.y - origin.y ) * invdiry;

	    		}

	    		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

	    		// These lines also handle the case where tmin or tmax is NaN
	    		// (result of 0 * Infinity). x !== x returns true if x is NaN

	    		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

	    		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

	    		if ( invdirz >= 0 ) {

	    			tzmin = ( box.min.z - origin.z ) * invdirz;
	    			tzmax = ( box.max.z - origin.z ) * invdirz;

	    		} else {

	    			tzmin = ( box.max.z - origin.z ) * invdirz;
	    			tzmax = ( box.min.z - origin.z ) * invdirz;

	    		}

	    		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

	    		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

	    		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

	    		//return point closest to the ray (positive side)

	    		if ( tmax < 0 ) return null;

	    		return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

	    	},

	    	intersectsBox: ( function () {

	    		var v = new Vector3();

	    		return function intersectsBox( box ) {

	    			return this.intersectBox( box, v ) !== null;

	    		};

	    	} )(),

	    	intersectTriangle: function () {

	    		// Compute the offset origin, edges, and normal.
	    		var diff = new Vector3();
	    		var edge1 = new Vector3();
	    		var edge2 = new Vector3();
	    		var normal = new Vector3();

	    		return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

	    			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

	    			edge1.subVectors( b, a );
	    			edge2.subVectors( c, a );
	    			normal.crossVectors( edge1, edge2 );

	    			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
	    			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
	    			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
	    			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
	    			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
	    			var DdN = this.direction.dot( normal );
	    			var sign;

	    			if ( DdN > 0 ) {

	    				if ( backfaceCulling ) return null;
	    				sign = 1;

	    			} else if ( DdN < 0 ) {

	    				sign = - 1;
	    				DdN = - DdN;

	    			} else {

	    				return null;

	    			}

	    			diff.subVectors( this.origin, a );
	    			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

	    			// b1 < 0, no intersection
	    			if ( DdQxE2 < 0 ) {

	    				return null;

	    			}

	    			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

	    			// b2 < 0, no intersection
	    			if ( DdE1xQ < 0 ) {

	    				return null;

	    			}

	    			// b1+b2 > 1, no intersection
	    			if ( DdQxE2 + DdE1xQ > DdN ) {

	    				return null;

	    			}

	    			// Line intersects triangle, check if ray does.
	    			var QdN = - sign * diff.dot( normal );

	    			// t < 0, no intersection
	    			if ( QdN < 0 ) {

	    				return null;

	    			}

	    			// Ray intersects triangle.
	    			return this.at( QdN / DdN, optionalTarget );

	    		};

	    	}(),

	    	applyMatrix4: function ( matrix4 ) {

	    		this.direction.add( this.origin ).applyMatrix4( matrix4 );
	    		this.origin.applyMatrix4( matrix4 );
	    		this.direction.sub( this.origin );
	    		this.direction.normalize();

	    		return this;

	    	},

	    	equals: function ( ray ) {

	    		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author WestLangley / http://github.com/WestLangley
	     * @author bhouston / http://clara.io
	     */

	    function Euler( x, y, z, order ) {

	    	this._x = x || 0;
	    	this._y = y || 0;
	    	this._z = z || 0;
	    	this._order = order || Euler.DefaultOrder;

	    }

	    Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	    Euler.DefaultOrder = 'XYZ';

	    Euler.prototype = {

	    	constructor: Euler,

	    	isEuler: true,

	    	get x () {

	    		return this._x;

	    	},

	    	set x ( value ) {

	    		this._x = value;
	    		this.onChangeCallback();

	    	},

	    	get y () {

	    		return this._y;

	    	},

	    	set y ( value ) {

	    		this._y = value;
	    		this.onChangeCallback();

	    	},

	    	get z () {

	    		return this._z;

	    	},

	    	set z ( value ) {

	    		this._z = value;
	    		this.onChangeCallback();

	    	},

	    	get order () {

	    		return this._order;

	    	},

	    	set order ( value ) {

	    		this._order = value;
	    		this.onChangeCallback();

	    	},

	    	set: function ( x, y, z, order ) {

	    		this._x = x;
	    		this._y = y;
	    		this._z = z;
	    		this._order = order || this._order;

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor( this._x, this._y, this._z, this._order );

	    	},

	    	copy: function ( euler ) {

	    		this._x = euler._x;
	    		this._y = euler._y;
	    		this._z = euler._z;
	    		this._order = euler._order;

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	setFromRotationMatrix: function ( m, order, update ) {

	    		var clamp = exports.Math.clamp;

	    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

	    		var te = m.elements;
	    		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
	    		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
	    		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

	    		order = order || this._order;

	    		if ( order === 'XYZ' ) {

	    			this._y = Math.asin( clamp( m13, - 1, 1 ) );

	    			if ( Math.abs( m13 ) < 0.99999 ) {

	    				this._x = Math.atan2( - m23, m33 );
	    				this._z = Math.atan2( - m12, m11 );

	    			} else {

	    				this._x = Math.atan2( m32, m22 );
	    				this._z = 0;

	    			}

	    		} else if ( order === 'YXZ' ) {

	    			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

	    			if ( Math.abs( m23 ) < 0.99999 ) {

	    				this._y = Math.atan2( m13, m33 );
	    				this._z = Math.atan2( m21, m22 );

	    			} else {

	    				this._y = Math.atan2( - m31, m11 );
	    				this._z = 0;

	    			}

	    		} else if ( order === 'ZXY' ) {

	    			this._x = Math.asin( clamp( m32, - 1, 1 ) );

	    			if ( Math.abs( m32 ) < 0.99999 ) {

	    				this._y = Math.atan2( - m31, m33 );
	    				this._z = Math.atan2( - m12, m22 );

	    			} else {

	    				this._y = 0;
	    				this._z = Math.atan2( m21, m11 );

	    			}

	    		} else if ( order === 'ZYX' ) {

	    			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

	    			if ( Math.abs( m31 ) < 0.99999 ) {

	    				this._x = Math.atan2( m32, m33 );
	    				this._z = Math.atan2( m21, m11 );

	    			} else {

	    				this._x = 0;
	    				this._z = Math.atan2( - m12, m22 );

	    			}

	    		} else if ( order === 'YZX' ) {

	    			this._z = Math.asin( clamp( m21, - 1, 1 ) );

	    			if ( Math.abs( m21 ) < 0.99999 ) {

	    				this._x = Math.atan2( - m23, m22 );
	    				this._y = Math.atan2( - m31, m11 );

	    			} else {

	    				this._x = 0;
	    				this._y = Math.atan2( m13, m33 );

	    			}

	    		} else if ( order === 'XZY' ) {

	    			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

	    			if ( Math.abs( m12 ) < 0.99999 ) {

	    				this._x = Math.atan2( m32, m22 );
	    				this._y = Math.atan2( m13, m11 );

	    			} else {

	    				this._x = Math.atan2( - m23, m33 );
	    				this._y = 0;

	    			}

	    		} else {

	    			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

	    		}

	    		this._order = order;

	    		if ( update !== false ) this.onChangeCallback();

	    		return this;

	    	},

	    	setFromQuaternion: function () {

	    		var matrix;

	    		return function setFromQuaternion( q, order, update ) {

	    			if ( matrix === undefined ) matrix = new Matrix4();

	    			matrix.makeRotationFromQuaternion( q );

	    			return this.setFromRotationMatrix( matrix, order, update );

	    		};

	    	}(),

	    	setFromVector3: function ( v, order ) {

	    		return this.set( v.x, v.y, v.z, order || this._order );

	    	},

	    	reorder: function () {

	    		// WARNING: this discards revolution information -bhouston

	    		var q = new Quaternion();

	    		return function reorder( newOrder ) {

	    			q.setFromEuler( this );

	    			return this.setFromQuaternion( q, newOrder );

	    		};

	    	}(),

	    	equals: function ( euler ) {

	    		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	    	},

	    	fromArray: function ( array ) {

	    		this._x = array[ 0 ];
	    		this._y = array[ 1 ];
	    		this._z = array[ 2 ];
	    		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

	    		this.onChangeCallback();

	    		return this;

	    	},

	    	toArray: function ( array, offset ) {

	    		if ( array === undefined ) array = [];
	    		if ( offset === undefined ) offset = 0;

	    		array[ offset ] = this._x;
	    		array[ offset + 1 ] = this._y;
	    		array[ offset + 2 ] = this._z;
	    		array[ offset + 3 ] = this._order;

	    		return array;

	    	},

	    	toVector3: function ( optionalResult ) {

	    		if ( optionalResult ) {

	    			return optionalResult.set( this._x, this._y, this._z );

	    		} else {

	    			return new Vector3( this._x, this._y, this._z );

	    		}

	    	},

	    	onChange: function ( callback ) {

	    		this.onChangeCallback = callback;

	    		return this;

	    	},

	    	onChangeCallback: function () {}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Layers() {

	    	this.mask = 1;

	    }

	    Layers.prototype = {

	    	constructor: Layers,

	    	set: function ( channel ) {

	    		this.mask = 1 << channel;

	    	},

	    	enable: function ( channel ) {

	    		this.mask |= 1 << channel;

	    	},

	    	toggle: function ( channel ) {

	    		this.mask ^= 1 << channel;

	    	},

	    	disable: function ( channel ) {

	    		this.mask &= ~ ( 1 << channel );

	    	},

	    	test: function ( layers ) {

	    		return ( this.mask & layers.mask ) !== 0;

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     * @author WestLangley / http://github.com/WestLangley
	     * @author elephantatwork / www.elephantatwork.ch
	     */

	    function Object3D() {

	    	Object.defineProperty( this, 'id', { value: Object3DIdCount() } );

	    	this.uuid = exports.Math.generateUUID();

	    	this.name = '';
	    	this.type = 'Object3D';

	    	this.parent = null;
	    	this.children = [];

	    	this.up = Object3D.DefaultUp.clone();

	    	var position = new Vector3();
	    	var rotation = new Euler();
	    	var quaternion = new Quaternion();
	    	var scale = new Vector3( 1, 1, 1 );

	    	function onRotationChange() {

	    		quaternion.setFromEuler( rotation, false );

	    	}

	    	function onQuaternionChange() {

	    		rotation.setFromQuaternion( quaternion, undefined, false );

	    	}

	    	rotation.onChange( onRotationChange );
	    	quaternion.onChange( onQuaternionChange );

	    	Object.defineProperties( this, {
	    		position: {
	    			enumerable: true,
	    			value: position
	    		},
	    		rotation: {
	    			enumerable: true,
	    			value: rotation
	    		},
	    		quaternion: {
	    			enumerable: true,
	    			value: quaternion
	    		},
	    		scale: {
	    			enumerable: true,
	    			value: scale
	    		},
	    		modelViewMatrix: {
	    			value: new Matrix4()
	    		},
	    		normalMatrix: {
	    			value: new Matrix3()
	    		}
	    	} );

	    	this.matrix = new Matrix4();
	    	this.matrixWorld = new Matrix4();

	    	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
	    	this.matrixWorldNeedsUpdate = false;

	    	this.layers = new Layers();
	    	this.visible = true;

	    	this.castShadow = false;
	    	this.receiveShadow = false;

	    	this.frustumCulled = true;
	    	this.renderOrder = 0;

	    	this.userData = {};

	    	this.onBeforeRender = null;

	    }

	    Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	    Object3D.DefaultMatrixAutoUpdate = true;

	    Object.assign( Object3D.prototype, EventDispatcher.prototype, {

	    	isObject3D: true,

	    	applyMatrix: function ( matrix ) {

	    		this.matrix.multiplyMatrices( matrix, this.matrix );

	    		this.matrix.decompose( this.position, this.quaternion, this.scale );

	    	},

	    	setRotationFromAxisAngle: function ( axis, angle ) {

	    		// assumes axis is normalized

	    		this.quaternion.setFromAxisAngle( axis, angle );

	    	},

	    	setRotationFromEuler: function ( euler ) {

	    		this.quaternion.setFromEuler( euler, true );

	    	},

	    	setRotationFromMatrix: function ( m ) {

	    		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

	    		this.quaternion.setFromRotationMatrix( m );

	    	},

	    	setRotationFromQuaternion: function ( q ) {

	    		// assumes q is normalized

	    		this.quaternion.copy( q );

	    	},

	    	rotateOnAxis: function () {

	    		// rotate object on axis in object space
	    		// axis is assumed to be normalized

	    		var q1 = new Quaternion();

	    		return function rotateOnAxis( axis, angle ) {

	    			q1.setFromAxisAngle( axis, angle );

	    			this.quaternion.multiply( q1 );

	    			return this;

	    		};

	    	}(),

	    	rotateX: function () {

	    		var v1 = new Vector3( 1, 0, 0 );

	    		return function rotateX( angle ) {

	    			return this.rotateOnAxis( v1, angle );

	    		};

	    	}(),

	    	rotateY: function () {

	    		var v1 = new Vector3( 0, 1, 0 );

	    		return function rotateY( angle ) {

	    			return this.rotateOnAxis( v1, angle );

	    		};

	    	}(),

	    	rotateZ: function () {

	    		var v1 = new Vector3( 0, 0, 1 );

	    		return function rotateZ( angle ) {

	    			return this.rotateOnAxis( v1, angle );

	    		};

	    	}(),

	    	translateOnAxis: function () {

	    		// translate object by distance along axis in object space
	    		// axis is assumed to be normalized

	    		var v1 = new Vector3();

	    		return function translateOnAxis( axis, distance ) {

	    			v1.copy( axis ).applyQuaternion( this.quaternion );

	    			this.position.add( v1.multiplyScalar( distance ) );

	    			return this;

	    		};

	    	}(),

	    	translateX: function () {

	    		var v1 = new Vector3( 1, 0, 0 );

	    		return function translateX( distance ) {

	    			return this.translateOnAxis( v1, distance );

	    		};

	    	}(),

	    	translateY: function () {

	    		var v1 = new Vector3( 0, 1, 0 );

	    		return function translateY( distance ) {

	    			return this.translateOnAxis( v1, distance );

	    		};

	    	}(),

	    	translateZ: function () {

	    		var v1 = new Vector3( 0, 0, 1 );

	    		return function translateZ( distance ) {

	    			return this.translateOnAxis( v1, distance );

	    		};

	    	}(),

	    	localToWorld: function ( vector ) {

	    		return vector.applyMatrix4( this.matrixWorld );

	    	},

	    	worldToLocal: function () {

	    		var m1 = new Matrix4();

	    		return function worldToLocal( vector ) {

	    			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

	    		};

	    	}(),

	    	lookAt: function () {

	    		// This routine does not support objects with rotated and/or translated parent(s)

	    		var m1 = new Matrix4();

	    		return function lookAt( vector ) {

	    			m1.lookAt( vector, this.position, this.up );

	    			this.quaternion.setFromRotationMatrix( m1 );

	    		};

	    	}(),

	    	add: function ( object ) {

	    		if ( arguments.length > 1 ) {

	    			for ( var i = 0; i < arguments.length; i ++ ) {

	    				this.add( arguments[ i ] );

	    			}

	    			return this;

	    		}

	    		if ( object === this ) {

	    			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
	    			return this;

	    		}

	    		if ( (object && object.isObject3D) ) {

	    			if ( object.parent !== null ) {

	    				object.parent.remove( object );

	    			}

	    			object.parent = this;
	    			object.dispatchEvent( { type: 'added' } );

	    			this.children.push( object );

	    		} else {

	    			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

	    		}

	    		return this;

	    	},

	    	remove: function ( object ) {

	    		if ( arguments.length > 1 ) {

	    			for ( var i = 0; i < arguments.length; i ++ ) {

	    				this.remove( arguments[ i ] );

	    			}

	    		}

	    		var index = this.children.indexOf( object );

	    		if ( index !== - 1 ) {

	    			object.parent = null;

	    			object.dispatchEvent( { type: 'removed' } );

	    			this.children.splice( index, 1 );

	    		}

	    	},

	    	getObjectById: function ( id ) {

	    		return this.getObjectByProperty( 'id', id );

	    	},

	    	getObjectByName: function ( name ) {

	    		return this.getObjectByProperty( 'name', name );

	    	},

	    	getObjectByProperty: function ( name, value ) {

	    		if ( this[ name ] === value ) return this;

	    		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

	    			var child = this.children[ i ];
	    			var object = child.getObjectByProperty( name, value );

	    			if ( object !== undefined ) {

	    				return object;

	    			}

	    		}

	    		return undefined;

	    	},

	    	getWorldPosition: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();

	    		this.updateMatrixWorld( true );

	    		return result.setFromMatrixPosition( this.matrixWorld );

	    	},

	    	getWorldQuaternion: function () {

	    		var position = new Vector3();
	    		var scale = new Vector3();

	    		return function getWorldQuaternion( optionalTarget ) {

	    			var result = optionalTarget || new Quaternion();

	    			this.updateMatrixWorld( true );

	    			this.matrixWorld.decompose( position, result, scale );

	    			return result;

	    		};

	    	}(),

	    	getWorldRotation: function () {

	    		var quaternion = new Quaternion();

	    		return function getWorldRotation( optionalTarget ) {

	    			var result = optionalTarget || new Euler();

	    			this.getWorldQuaternion( quaternion );

	    			return result.setFromQuaternion( quaternion, this.rotation.order, false );

	    		};

	    	}(),

	    	getWorldScale: function () {

	    		var position = new Vector3();
	    		var quaternion = new Quaternion();

	    		return function getWorldScale( optionalTarget ) {

	    			var result = optionalTarget || new Vector3();

	    			this.updateMatrixWorld( true );

	    			this.matrixWorld.decompose( position, quaternion, result );

	    			return result;

	    		};

	    	}(),

	    	getWorldDirection: function () {

	    		var quaternion = new Quaternion();

	    		return function getWorldDirection( optionalTarget ) {

	    			var result = optionalTarget || new Vector3();

	    			this.getWorldQuaternion( quaternion );

	    			return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

	    		};

	    	}(),

	    	raycast: function () {},

	    	traverse: function ( callback ) {

	    		callback( this );

	    		var children = this.children;

	    		for ( var i = 0, l = children.length; i < l; i ++ ) {

	    			children[ i ].traverse( callback );

	    		}

	    	},

	    	traverseVisible: function ( callback ) {

	    		if ( this.visible === false ) return;

	    		callback( this );

	    		var children = this.children;

	    		for ( var i = 0, l = children.length; i < l; i ++ ) {

	    			children[ i ].traverseVisible( callback );

	    		}

	    	},

	    	traverseAncestors: function ( callback ) {

	    		var parent = this.parent;

	    		if ( parent !== null ) {

	    			callback( parent );

	    			parent.traverseAncestors( callback );

	    		}

	    	},

	    	updateMatrix: function () {

	    		this.matrix.compose( this.position, this.quaternion, this.scale );

	    		this.matrixWorldNeedsUpdate = true;

	    	},

	    	updateMatrixWorld: function ( force ) {

	    		if ( this.matrixAutoUpdate === true ) this.updateMatrix();

	    		if ( this.matrixWorldNeedsUpdate === true || force === true ) {

	    			if ( this.parent === null ) {

	    				this.matrixWorld.copy( this.matrix );

	    			} else {

	    				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

	    			}

	    			this.matrixWorldNeedsUpdate = false;

	    			force = true;

	    		}

	    		// update children

	    		var children = this.children;

	    		for ( var i = 0, l = children.length; i < l; i ++ ) {

	    			children[ i ].updateMatrixWorld( force );

	    		}

	    	},

	    	toJSON: function ( meta ) {

	    		// meta is '' when called from JSON.stringify
	    		var isRootObject = ( meta === undefined || meta === '' );

	    		var output = {};

	    		// meta is a hash used to collect geometries, materials.
	    		// not providing it implies that this is the root object
	    		// being serialized.
	    		if ( isRootObject ) {

	    			// initialize meta obj
	    			meta = {
	    				geometries: {},
	    				materials: {},
	    				textures: {},
	    				images: {}
	    			};

	    			output.metadata = {
	    				version: 4.4,
	    				type: 'Object',
	    				generator: 'Object3D.toJSON'
	    			};

	    		}

	    		// standard Object3D serialization

	    		var object = {};

	    		object.uuid = this.uuid;
	    		object.type = this.type;

	    		if ( this.name !== '' ) object.name = this.name;
	    		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
	    		if ( this.castShadow === true ) object.castShadow = true;
	    		if ( this.receiveShadow === true ) object.receiveShadow = true;
	    		if ( this.visible === false ) object.visible = false;

	    		object.matrix = this.matrix.toArray();

	    		//

	    		if ( this.geometry !== undefined ) {

	    			if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

	    				meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

	    			}

	    			object.geometry = this.geometry.uuid;

	    		}

	    		if ( this.material !== undefined ) {

	    			if ( meta.materials[ this.material.uuid ] === undefined ) {

	    				meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

	    			}

	    			object.material = this.material.uuid;

	    		}

	    		//

	    		if ( this.children.length > 0 ) {

	    			object.children = [];

	    			for ( var i = 0; i < this.children.length; i ++ ) {

	    				object.children.push( this.children[ i ].toJSON( meta ).object );

	    			}

	    		}

	    		if ( isRootObject ) {

	    			var geometries = extractFromCache( meta.geometries );
	    			var materials = extractFromCache( meta.materials );
	    			var textures = extractFromCache( meta.textures );
	    			var images = extractFromCache( meta.images );

	    			if ( geometries.length > 0 ) output.geometries = geometries;
	    			if ( materials.length > 0 ) output.materials = materials;
	    			if ( textures.length > 0 ) output.textures = textures;
	    			if ( images.length > 0 ) output.images = images;

	    		}

	    		output.object = object;

	    		return output;

	    		// extract data from the cache hash
	    		// remove metadata on each item
	    		// and return as array
	    		function extractFromCache( cache ) {

	    			var values = [];
	    			for ( var key in cache ) {

	    				var data = cache[ key ];
	    				delete data.metadata;
	    				values.push( data );

	    			}
	    			return values;

	    		}

	    	},

	    	clone: function ( recursive ) {

	    		return new this.constructor().copy( this, recursive );

	    	},

	    	copy: function ( source, recursive ) {

	    		if ( recursive === undefined ) recursive = true;

	    		this.name = source.name;

	    		this.up.copy( source.up );

	    		this.position.copy( source.position );
	    		this.quaternion.copy( source.quaternion );
	    		this.scale.copy( source.scale );

	    		this.matrix.copy( source.matrix );
	    		this.matrixWorld.copy( source.matrixWorld );

	    		this.matrixAutoUpdate = source.matrixAutoUpdate;
	    		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

	    		this.visible = source.visible;

	    		this.castShadow = source.castShadow;
	    		this.receiveShadow = source.receiveShadow;

	    		this.frustumCulled = source.frustumCulled;
	    		this.renderOrder = source.renderOrder;

	    		this.userData = JSON.parse( JSON.stringify( source.userData ) );

	    		if ( recursive === true ) {

	    			for ( var i = 0; i < source.children.length; i ++ ) {

	    				var child = source.children[ i ];
	    				this.add( child.clone() );

	    			}

	    		}

	    		return this;

	    	}

	    } );

	    var count$2 = 0;
	    function Object3DIdCount() { return count$2++; };

	    /**
	     * @author bhouston / http://clara.io
	     */

	    function Line3( start, end ) {

	    	this.start = ( start !== undefined ) ? start : new Vector3();
	    	this.end = ( end !== undefined ) ? end : new Vector3();

	    }

	    Line3.prototype = {

	    	constructor: Line3,

	    	set: function ( start, end ) {

	    		this.start.copy( start );
	    		this.end.copy( end );

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( line ) {

	    		this.start.copy( line.start );
	    		this.end.copy( line.end );

	    		return this;

	    	},

	    	getCenter: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	    	},

	    	delta: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		return result.subVectors( this.end, this.start );

	    	},

	    	distanceSq: function () {

	    		return this.start.distanceToSquared( this.end );

	    	},

	    	distance: function () {

	    		return this.start.distanceTo( this.end );

	    	},

	    	at: function ( t, optionalTarget ) {

	    		var result = optionalTarget || new Vector3();

	    		return this.delta( result ).multiplyScalar( t ).add( this.start );

	    	},

	    	closestPointToPointParameter: function () {

	    		var startP = new Vector3();
	    		var startEnd = new Vector3();

	    		return function closestPointToPointParameter( point, clampToLine ) {

	    			startP.subVectors( point, this.start );
	    			startEnd.subVectors( this.end, this.start );

	    			var startEnd2 = startEnd.dot( startEnd );
	    			var startEnd_startP = startEnd.dot( startP );

	    			var t = startEnd_startP / startEnd2;

	    			if ( clampToLine ) {

	    				t = exports.Math.clamp( t, 0, 1 );

	    			}

	    			return t;

	    		};

	    	}(),

	    	closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

	    		var t = this.closestPointToPointParameter( point, clampToLine );

	    		var result = optionalTarget || new Vector3();

	    		return this.delta( result ).multiplyScalar( t ).add( this.start );

	    	},

	    	applyMatrix4: function ( matrix ) {

	    		this.start.applyMatrix4( matrix );
	    		this.end.applyMatrix4( matrix );

	    		return this;

	    	},

	    	equals: function ( line ) {

	    		return line.start.equals( this.start ) && line.end.equals( this.end );

	    	}

	    };

	    /**
	     * @author bhouston / http://clara.io
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Triangle( a, b, c ) {

	    	this.a = ( a !== undefined ) ? a : new Vector3();
	    	this.b = ( b !== undefined ) ? b : new Vector3();
	    	this.c = ( c !== undefined ) ? c : new Vector3();

	    }

	    Triangle.normal = function () {

	    	var v0 = new Vector3();

	    	return function normal( a, b, c, optionalTarget ) {

	    		var result = optionalTarget || new Vector3();

	    		result.subVectors( c, b );
	    		v0.subVectors( a, b );
	    		result.cross( v0 );

	    		var resultLengthSq = result.lengthSq();
	    		if ( resultLengthSq > 0 ) {

	    			return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

	    		}

	    		return result.set( 0, 0, 0 );

	    	};

	    }();

	    // static/instance method to calculate barycentric coordinates
	    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	    Triangle.barycoordFromPoint = function () {

	    	var v0 = new Vector3();
	    	var v1 = new Vector3();
	    	var v2 = new Vector3();

	    	return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

	    		v0.subVectors( c, a );
	    		v1.subVectors( b, a );
	    		v2.subVectors( point, a );

	    		var dot00 = v0.dot( v0 );
	    		var dot01 = v0.dot( v1 );
	    		var dot02 = v0.dot( v2 );
	    		var dot11 = v1.dot( v1 );
	    		var dot12 = v1.dot( v2 );

	    		var denom = ( dot00 * dot11 - dot01 * dot01 );

	    		var result = optionalTarget || new Vector3();

	    		// collinear or singular triangle
	    		if ( denom === 0 ) {

	    			// arbitrary location outside of triangle?
	    			// not sure if this is the best idea, maybe should be returning undefined
	    			return result.set( - 2, - 1, - 1 );

	    		}

	    		var invDenom = 1 / denom;
	    		var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
	    		var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

	    		// barycentric coordinates must always sum to 1
	    		return result.set( 1 - u - v, v, u );

	    	};

	    }();

	    Triangle.containsPoint = function () {

	    	var v1 = new Vector3();

	    	return function containsPoint( point, a, b, c ) {

	    		var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

	    		return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

	    	};

	    }();

	    Triangle.prototype = {

	    	constructor: Triangle,

	    	set: function ( a, b, c ) {

	    		this.a.copy( a );
	    		this.b.copy( b );
	    		this.c.copy( c );

	    		return this;

	    	},

	    	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

	    		this.a.copy( points[ i0 ] );
	    		this.b.copy( points[ i1 ] );
	    		this.c.copy( points[ i2 ] );

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( triangle ) {

	    		this.a.copy( triangle.a );
	    		this.b.copy( triangle.b );
	    		this.c.copy( triangle.c );

	    		return this;

	    	},

	    	area: function () {

	    		var v0 = new Vector3();
	    		var v1 = new Vector3();

	    		return function area() {

	    			v0.subVectors( this.c, this.b );
	    			v1.subVectors( this.a, this.b );

	    			return v0.cross( v1 ).length() * 0.5;

	    		};

	    	}(),

	    	midpoint: function ( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();
	    		return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	    	},

	    	normal: function ( optionalTarget ) {

	    		return Triangle.normal( this.a, this.b, this.c, optionalTarget );

	    	},

	    	plane: function ( optionalTarget ) {

	    		var result = optionalTarget || new Plane();

	    		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	    	},

	    	barycoordFromPoint: function ( point, optionalTarget ) {

	    		return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	    	},

	    	containsPoint: function ( point ) {

	    		return Triangle.containsPoint( point, this.a, this.b, this.c );

	    	},

	    	closestPointToPoint: function () {

	    		var plane, edgeList, projectedPoint, closestPoint;

	    		return function closestPointToPoint( point, optionalTarget ) {

	    			if ( plane === undefined ) {

	    				plane = new Plane();
	    				edgeList = [ new Line3(), new Line3(), new Line3() ];
	    				projectedPoint = new Vector3();
	    				closestPoint = new Vector3();

	    			}

	    			var result = optionalTarget || new Vector3();
	    			var minDistance = Infinity;

	    			// project the point onto the plane of the triangle

	    			plane.setFromCoplanarPoints( this.a, this.b, this.c );
	    			plane.projectPoint( point, projectedPoint );

	    			// check if the projection lies within the triangle

	    			if( this.containsPoint( projectedPoint ) === true ) {

	    				// if so, this is the closest point

	    				result.copy( projectedPoint );

	    			} else {

	    				// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

	    				edgeList[ 0 ].set( this.a, this.b );
	    				edgeList[ 1 ].set( this.b, this.c );
	    				edgeList[ 2 ].set( this.c, this.a );

	    				for( var i = 0; i < edgeList.length; i ++ ) {

	    					edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

	    					var distance = projectedPoint.distanceToSquared( closestPoint );

	    					if( distance < minDistance ) {

	    						minDistance = distance;

	    						result.copy( closestPoint );

	    					}

	    				}

	    			}

	    			return result;

	    		};

	    	}(),

	    	equals: function ( triangle ) {

	    		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Face3( a, b, c, normal, color, materialIndex ) {

	    	this.a = a;
	    	this.b = b;
	    	this.c = c;

	    	this.normal = (normal && normal.isVector3) ? normal : new Vector3();
	    	this.vertexNormals = Array.isArray( normal ) ? normal : [];

	    	this.color = (color && color.isColor) ? color : new Color();
	    	this.vertexColors = Array.isArray( color ) ? color : [];

	    	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	    }

	    Face3.prototype = {

	    	constructor: Face3,

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( source ) {

	    		this.a = source.a;
	    		this.b = source.b;
	    		this.c = source.c;

	    		this.normal.copy( source.normal );
	    		this.color.copy( source.color );

	    		this.materialIndex = source.materialIndex;

	    		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

	    			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

	    		}

	    		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

	    			this.vertexColors[ i ] = source.vertexColors[ i ].clone();

	    		}

	    		return this;

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  opacity: <float>,
	     *  map: new THREE.Texture( <Image> ),
	     *
	     *  aoMap: new THREE.Texture( <Image> ),
	     *  aoMapIntensity: <float>
	     *
	     *  specularMap: new THREE.Texture( <Image> ),
	     *
	     *  alphaMap: new THREE.Texture( <Image> ),
	     *
	     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	     *  combine: THREE.Multiply,
	     *  reflectivity: <float>,
	     *  refractionRatio: <float>,
	     *
	     *  shading: THREE.SmoothShading,
	     *  depthTest: <bool>,
	     *  depthWrite: <bool>,
	     *
	     *  wireframe: <boolean>,
	     *  wireframeLinewidth: <float>,
	     *
	     *  skinning: <bool>,
	     *  morphTargets: <bool>
	     * }
	     */

	    function MeshBasicMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'MeshBasicMaterial';

	    	this.color = new Color( 0xffffff ); // emissive

	    	this.map = null;

	    	this.aoMap = null;
	    	this.aoMapIntensity = 1.0;

	    	this.specularMap = null;

	    	this.alphaMap = null;

	    	this.envMap = null;
	    	this.combine = MultiplyOperation;
	    	this.reflectivity = 1;
	    	this.refractionRatio = 0.98;

	    	this.wireframe = false;
	    	this.wireframeLinewidth = 1;
	    	this.wireframeLinecap = 'round';
	    	this.wireframeLinejoin = 'round';

	    	this.skinning = false;
	    	this.morphTargets = false;

	    	this.lights = false;

	    	this.setValues( parameters );

	    }

	    MeshBasicMaterial.prototype = Object.create( Material.prototype );
	    MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	    MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	    MeshBasicMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.color.copy( source.color );

	    	this.map = source.map;

	    	this.aoMap = source.aoMap;
	    	this.aoMapIntensity = source.aoMapIntensity;

	    	this.specularMap = source.specularMap;

	    	this.alphaMap = source.alphaMap;

	    	this.envMap = source.envMap;
	    	this.combine = source.combine;
	    	this.reflectivity = source.reflectivity;
	    	this.refractionRatio = source.refractionRatio;

	    	this.wireframe = source.wireframe;
	    	this.wireframeLinewidth = source.wireframeLinewidth;
	    	this.wireframeLinecap = source.wireframeLinecap;
	    	this.wireframeLinejoin = source.wireframeLinejoin;

	    	this.skinning = source.skinning;
	    	this.morphTargets = source.morphTargets;

	    	return this;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function BufferAttribute( array, itemSize, normalized ) {

	    	if ( Array.isArray( array ) ) {

	    		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

	    	}

	    	this.uuid = exports.Math.generateUUID();

	    	this.array = array;
	    	this.itemSize = itemSize;
	    	this.count = array !== undefined ? array.length / itemSize : 0;
	    	this.normalized = normalized === true;

	    	this.dynamic = false;
	    	this.updateRange = { offset: 0, count: - 1 };

	    	this.version = 0;

	    }

	    BufferAttribute.prototype = {

	    	constructor: BufferAttribute,

	    	isBufferAttribute: true,

	    	set needsUpdate( value ) {

	    		if ( value === true ) this.version ++;

	    	},

	    	setDynamic: function ( value ) {

	    		this.dynamic = value;

	    		return this;

	    	},

	    	copy: function ( source ) {

	    		this.array = new source.array.constructor( source.array );
	    		this.itemSize = source.itemSize;
	    		this.count = source.count;
	    		this.normalized = source.normalized;

	    		this.dynamic = source.dynamic;

	    		return this;

	    	},

	    	copyAt: function ( index1, attribute, index2 ) {

	    		index1 *= this.itemSize;
	    		index2 *= attribute.itemSize;

	    		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

	    			this.array[ index1 + i ] = attribute.array[ index2 + i ];

	    		}

	    		return this;

	    	},

	    	copyArray: function ( array ) {

	    		this.array.set( array );

	    		return this;

	    	},

	    	copyColorsArray: function ( colors ) {

	    		var array = this.array, offset = 0;

	    		for ( var i = 0, l = colors.length; i < l; i ++ ) {

	    			var color = colors[ i ];

	    			if ( color === undefined ) {

	    				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
	    				color = new Color();

	    			}

	    			array[ offset ++ ] = color.r;
	    			array[ offset ++ ] = color.g;
	    			array[ offset ++ ] = color.b;

	    		}

	    		return this;

	    	},

	    	copyIndicesArray: function ( indices ) {

	    		var array = this.array, offset = 0;

	    		for ( var i = 0, l = indices.length; i < l; i ++ ) {

	    			var index = indices[ i ];

	    			array[ offset ++ ] = index.a;
	    			array[ offset ++ ] = index.b;
	    			array[ offset ++ ] = index.c;

	    		}

	    		return this;

	    	},

	    	copyVector2sArray: function ( vectors ) {

	    		var array = this.array, offset = 0;

	    		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

	    			var vector = vectors[ i ];

	    			if ( vector === undefined ) {

	    				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
	    				vector = new Vector2();

	    			}

	    			array[ offset ++ ] = vector.x;
	    			array[ offset ++ ] = vector.y;

	    		}

	    		return this;

	    	},

	    	copyVector3sArray: function ( vectors ) {

	    		var array = this.array, offset = 0;

	    		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

	    			var vector = vectors[ i ];

	    			if ( vector === undefined ) {

	    				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
	    				vector = new Vector3();

	    			}

	    			array[ offset ++ ] = vector.x;
	    			array[ offset ++ ] = vector.y;
	    			array[ offset ++ ] = vector.z;

	    		}

	    		return this;

	    	},

	    	copyVector4sArray: function ( vectors ) {

	    		var array = this.array, offset = 0;

	    		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

	    			var vector = vectors[ i ];

	    			if ( vector === undefined ) {

	    				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
	    				vector = new Vector4();

	    			}

	    			array[ offset ++ ] = vector.x;
	    			array[ offset ++ ] = vector.y;
	    			array[ offset ++ ] = vector.z;
	    			array[ offset ++ ] = vector.w;

	    		}

	    		return this;

	    	},

	    	set: function ( value, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		this.array.set( value, offset );

	    		return this;

	    	},

	    	getX: function ( index ) {

	    		return this.array[ index * this.itemSize ];

	    	},

	    	setX: function ( index, x ) {

	    		this.array[ index * this.itemSize ] = x;

	    		return this;

	    	},

	    	getY: function ( index ) {

	    		return this.array[ index * this.itemSize + 1 ];

	    	},

	    	setY: function ( index, y ) {

	    		this.array[ index * this.itemSize + 1 ] = y;

	    		return this;

	    	},

	    	getZ: function ( index ) {

	    		return this.array[ index * this.itemSize + 2 ];

	    	},

	    	setZ: function ( index, z ) {

	    		this.array[ index * this.itemSize + 2 ] = z;

	    		return this;

	    	},

	    	getW: function ( index ) {

	    		return this.array[ index * this.itemSize + 3 ];

	    	},

	    	setW: function ( index, w ) {

	    		this.array[ index * this.itemSize + 3 ] = w;

	    		return this;

	    	},

	    	setXY: function ( index, x, y ) {

	    		index *= this.itemSize;

	    		this.array[ index + 0 ] = x;
	    		this.array[ index + 1 ] = y;

	    		return this;

	    	},

	    	setXYZ: function ( index, x, y, z ) {

	    		index *= this.itemSize;

	    		this.array[ index + 0 ] = x;
	    		this.array[ index + 1 ] = y;
	    		this.array[ index + 2 ] = z;

	    		return this;

	    	},

	    	setXYZW: function ( index, x, y, z, w ) {

	    		index *= this.itemSize;

	    		this.array[ index + 0 ] = x;
	    		this.array[ index + 1 ] = y;
	    		this.array[ index + 2 ] = z;
	    		this.array[ index + 3 ] = w;

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	}

	    };

	    //

	    function Int8Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Int8Array( array ), itemSize );

	    }

	    function Uint8Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Uint8Array( array ), itemSize );

	    }

	    function Uint8ClampedAttribute( array, itemSize ) {

	    	return new BufferAttribute( new Uint8ClampedArray( array ), itemSize );

	    }

	    function Int16Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Int16Array( array ), itemSize );

	    }

	    function Uint16Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Uint16Array( array ), itemSize );

	    }

	    function Int32Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Int32Array( array ), itemSize );

	    }

	    function Uint32Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Uint32Array( array ), itemSize );

	    }

	    function Float32Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Float32Array( array ), itemSize );

	    }

	    function Float64Attribute( array, itemSize ) {

	    	return new BufferAttribute( new Float64Array( array ), itemSize );

	    }

	    // Deprecated

	    function DynamicBufferAttribute( array, itemSize ) {

	    	console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
	    	return new BufferAttribute( array, itemSize ).setDynamic( true );

	    }

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author kile / http://kile.stravaganza.org/
	     * @author alteredq / http://alteredqualia.com/
	     * @author mikael emtinger / http://gomo.se/
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     * @author bhouston / http://clara.io
	     */

	    function Geometry() {

	    	Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

	    	this.uuid = exports.Math.generateUUID();

	    	this.name = '';
	    	this.type = 'Geometry';

	    	this.vertices = [];
	    	this.colors = [];
	    	this.faces = [];
	    	this.faceVertexUvs = [ [] ];

	    	this.morphTargets = [];
	    	this.morphNormals = [];

	    	this.skinWeights = [];
	    	this.skinIndices = [];

	    	this.lineDistances = [];

	    	this.boundingBox = null;
	    	this.boundingSphere = null;

	    	// update flags

	    	this.elementsNeedUpdate = false;
	    	this.verticesNeedUpdate = false;
	    	this.uvsNeedUpdate = false;
	    	this.normalsNeedUpdate = false;
	    	this.colorsNeedUpdate = false;
	    	this.lineDistancesNeedUpdate = false;
	    	this.groupsNeedUpdate = false;

	    }

	    Object.assign( Geometry.prototype, EventDispatcher.prototype, {

	    	isGeometry: true,

	    	applyMatrix: function ( matrix ) {

	    		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

	    		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

	    			var vertex = this.vertices[ i ];
	    			vertex.applyMatrix4( matrix );

	    		}

	    		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

	    			var face = this.faces[ i ];
	    			face.normal.applyMatrix3( normalMatrix ).normalize();

	    			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

	    				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

	    			}

	    		}

	    		if ( this.boundingBox !== null ) {

	    			this.computeBoundingBox();

	    		}

	    		if ( this.boundingSphere !== null ) {

	    			this.computeBoundingSphere();

	    		}

	    		this.verticesNeedUpdate = true;
	    		this.normalsNeedUpdate = true;

	    		return this;

	    	},

	    	rotateX: function () {

	    		// rotate geometry around world x-axis

	    		var m1;

	    		return function rotateX( angle ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeRotationX( angle );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	rotateY: function () {

	    		// rotate geometry around world y-axis

	    		var m1;

	    		return function rotateY( angle ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeRotationY( angle );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	rotateZ: function () {

	    		// rotate geometry around world z-axis

	    		var m1;

	    		return function rotateZ( angle ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeRotationZ( angle );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	translate: function () {

	    		// translate geometry

	    		var m1;

	    		return function translate( x, y, z ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeTranslation( x, y, z );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	scale: function () {

	    		// scale geometry

	    		var m1;

	    		return function scale( x, y, z ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeScale( x, y, z );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	lookAt: function () {

	    		var obj;

	    		return function lookAt( vector ) {

	    			if ( obj === undefined ) obj = new Object3D();

	    			obj.lookAt( vector );

	    			obj.updateMatrix();

	    			this.applyMatrix( obj.matrix );

	    		};

	    	}(),

	    	fromBufferGeometry: function ( geometry ) {

	    		var scope = this;

	    		var indices = geometry.index !== null ? geometry.index.array : undefined;
	    		var attributes = geometry.attributes;

	    		var positions = attributes.position.array;
	    		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
	    		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
	    		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
	    		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

	    		if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

	    		var tempNormals = [];
	    		var tempUVs = [];
	    		var tempUVs2 = [];

	    		for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

	    			scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

	    			if ( normals !== undefined ) {

	    				tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

	    			}

	    			if ( colors !== undefined ) {

	    				scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

	    			}

	    			if ( uvs !== undefined ) {

	    				tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

	    			}

	    			if ( uvs2 !== undefined ) {

	    				tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

	    			}

	    		}

	    		function addFace( a, b, c, materialIndex ) {

	    			var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
	    			var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

	    			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

	    			scope.faces.push( face );

	    			if ( uvs !== undefined ) {

	    				scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

	    			}

	    			if ( uvs2 !== undefined ) {

	    				scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

	    			}

	    		}

	    		if ( indices !== undefined ) {

	    			var groups = geometry.groups;

	    			if ( groups.length > 0 ) {

	    				for ( var i = 0; i < groups.length; i ++ ) {

	    					var group = groups[ i ];

	    					var start = group.start;
	    					var count = group.count;

	    					for ( var j = start, jl = start + count; j < jl; j += 3 ) {

	    						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );

	    					}

	    				}

	    			} else {

	    				for ( var i = 0; i < indices.length; i += 3 ) {

	    					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

	    				}

	    			}

	    		} else {

	    			for ( var i = 0; i < positions.length / 3; i += 3 ) {

	    				addFace( i, i + 1, i + 2 );

	    			}

	    		}

	    		this.computeFaceNormals();

	    		if ( geometry.boundingBox !== null ) {

	    			this.boundingBox = geometry.boundingBox.clone();

	    		}

	    		if ( geometry.boundingSphere !== null ) {

	    			this.boundingSphere = geometry.boundingSphere.clone();

	    		}

	    		return this;

	    	},

	    	center: function () {

	    		this.computeBoundingBox();

	    		var offset = this.boundingBox.getCenter().negate();

	    		this.translate( offset.x, offset.y, offset.z );

	    		return offset;

	    	},

	    	normalize: function () {

	    		this.computeBoundingSphere();

	    		var center = this.boundingSphere.center;
	    		var radius = this.boundingSphere.radius;

	    		var s = radius === 0 ? 1 : 1.0 / radius;

	    		var matrix = new Matrix4();
	    		matrix.set(
	    			s, 0, 0, - s * center.x,
	    			0, s, 0, - s * center.y,
	    			0, 0, s, - s * center.z,
	    			0, 0, 0, 1
	    		);

	    		this.applyMatrix( matrix );

	    		return this;

	    	},

	    	computeFaceNormals: function () {

	    		var cb = new Vector3(), ab = new Vector3();

	    		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    			var face = this.faces[ f ];

	    			var vA = this.vertices[ face.a ];
	    			var vB = this.vertices[ face.b ];
	    			var vC = this.vertices[ face.c ];

	    			cb.subVectors( vC, vB );
	    			ab.subVectors( vA, vB );
	    			cb.cross( ab );

	    			cb.normalize();

	    			face.normal.copy( cb );

	    		}

	    	},

	    	computeVertexNormals: function ( areaWeighted ) {

	    		if ( areaWeighted === undefined ) areaWeighted = true;

	    		var v, vl, f, fl, face, vertices;

	    		vertices = new Array( this.vertices.length );

	    		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

	    			vertices[ v ] = new Vector3();

	    		}

	    		if ( areaWeighted ) {

	    			// vertex normals weighted by triangle areas
	    			// http://www.iquilezles.org/www/articles/normals/normals.htm

	    			var vA, vB, vC;
	    			var cb = new Vector3(), ab = new Vector3();

	    			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    				face = this.faces[ f ];

	    				vA = this.vertices[ face.a ];
	    				vB = this.vertices[ face.b ];
	    				vC = this.vertices[ face.c ];

	    				cb.subVectors( vC, vB );
	    				ab.subVectors( vA, vB );
	    				cb.cross( ab );

	    				vertices[ face.a ].add( cb );
	    				vertices[ face.b ].add( cb );
	    				vertices[ face.c ].add( cb );

	    			}

	    		} else {

	    			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    				face = this.faces[ f ];

	    				vertices[ face.a ].add( face.normal );
	    				vertices[ face.b ].add( face.normal );
	    				vertices[ face.c ].add( face.normal );

	    			}

	    		}

	    		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

	    			vertices[ v ].normalize();

	    		}

	    		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    			face = this.faces[ f ];

	    			var vertexNormals = face.vertexNormals;

	    			if ( vertexNormals.length === 3 ) {

	    				vertexNormals[ 0 ].copy( vertices[ face.a ] );
	    				vertexNormals[ 1 ].copy( vertices[ face.b ] );
	    				vertexNormals[ 2 ].copy( vertices[ face.c ] );

	    			} else {

	    				vertexNormals[ 0 ] = vertices[ face.a ].clone();
	    				vertexNormals[ 1 ] = vertices[ face.b ].clone();
	    				vertexNormals[ 2 ] = vertices[ face.c ].clone();

	    			}

	    		}

	    		if ( this.faces.length > 0 ) {

	    			this.normalsNeedUpdate = true;

	    		}

	    	},

	    	computeMorphNormals: function () {

	    		var i, il, f, fl, face;

	    		// save original normals
	    		// - create temp variables on first access
	    		//   otherwise just copy (for faster repeated calls)

	    		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    			face = this.faces[ f ];

	    			if ( ! face.__originalFaceNormal ) {

	    				face.__originalFaceNormal = face.normal.clone();

	    			} else {

	    				face.__originalFaceNormal.copy( face.normal );

	    			}

	    			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

	    			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

	    				if ( ! face.__originalVertexNormals[ i ] ) {

	    					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

	    				} else {

	    					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

	    				}

	    			}

	    		}

	    		// use temp geometry to compute face and vertex normals for each morph

	    		var tmpGeo = new Geometry();
	    		tmpGeo.faces = this.faces;

	    		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

	    			// create on first access

	    			if ( ! this.morphNormals[ i ] ) {

	    				this.morphNormals[ i ] = {};
	    				this.morphNormals[ i ].faceNormals = [];
	    				this.morphNormals[ i ].vertexNormals = [];

	    				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
	    				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

	    				var faceNormal, vertexNormals;

	    				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    					faceNormal = new Vector3();
	    					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

	    					dstNormalsFace.push( faceNormal );
	    					dstNormalsVertex.push( vertexNormals );

	    				}

	    			}

	    			var morphNormals = this.morphNormals[ i ];

	    			// set vertices to morph target

	    			tmpGeo.vertices = this.morphTargets[ i ].vertices;

	    			// compute morph normals

	    			tmpGeo.computeFaceNormals();
	    			tmpGeo.computeVertexNormals();

	    			// store morph normals

	    			var faceNormal, vertexNormals;

	    			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    				face = this.faces[ f ];

	    				faceNormal = morphNormals.faceNormals[ f ];
	    				vertexNormals = morphNormals.vertexNormals[ f ];

	    				faceNormal.copy( face.normal );

	    				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
	    				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
	    				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

	    			}

	    		}

	    		// restore original normals

	    		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

	    			face = this.faces[ f ];

	    			face.normal = face.__originalFaceNormal;
	    			face.vertexNormals = face.__originalVertexNormals;

	    		}

	    	},

	    	computeTangents: function () {

	    		console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

	    	},

	    	computeLineDistances: function () {

	    		var d = 0;
	    		var vertices = this.vertices;

	    		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

	    			if ( i > 0 ) {

	    				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

	    			}

	    			this.lineDistances[ i ] = d;

	    		}

	    	},

	    	computeBoundingBox: function () {

	    		if ( this.boundingBox === null ) {

	    			this.boundingBox = new Box3();

	    		}

	    		this.boundingBox.setFromPoints( this.vertices );

	    	},

	    	computeBoundingSphere: function () {

	    		if ( this.boundingSphere === null ) {

	    			this.boundingSphere = new Sphere();

	    		}

	    		this.boundingSphere.setFromPoints( this.vertices );

	    	},

	    	merge: function ( geometry, matrix, materialIndexOffset ) {

	    		if ( (geometry && geometry.isGeometry) === false ) {

	    			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
	    			return;

	    		}

	    		var normalMatrix,
	    		vertexOffset = this.vertices.length,
	    		vertices1 = this.vertices,
	    		vertices2 = geometry.vertices,
	    		faces1 = this.faces,
	    		faces2 = geometry.faces,
	    		uvs1 = this.faceVertexUvs[ 0 ],
	    		uvs2 = geometry.faceVertexUvs[ 0 ],
	    		colors1 = this.colors,
	    		colors2 = geometry.colors;

	    		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

	    		if ( matrix !== undefined ) {

	    			normalMatrix = new Matrix3().getNormalMatrix( matrix );

	    		}

	    		// vertices

	    		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

	    			var vertex = vertices2[ i ];

	    			var vertexCopy = vertex.clone();

	    			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

	    			vertices1.push( vertexCopy );

	    		}

	    		// colors

	    		for ( var i = 0, il = colors2.length; i < il; i ++ ) {

	    			colors1.push( colors2[ i ].clone() );

	    		}

	    		// faces

	    		for ( i = 0, il = faces2.length; i < il; i ++ ) {

	    			var face = faces2[ i ], faceCopy, normal, color,
	    			faceVertexNormals = face.vertexNormals,
	    			faceVertexColors = face.vertexColors;

	    			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
	    			faceCopy.normal.copy( face.normal );

	    			if ( normalMatrix !== undefined ) {

	    				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

	    			}

	    			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

	    				normal = faceVertexNormals[ j ].clone();

	    				if ( normalMatrix !== undefined ) {

	    					normal.applyMatrix3( normalMatrix ).normalize();

	    				}

	    				faceCopy.vertexNormals.push( normal );

	    			}

	    			faceCopy.color.copy( face.color );

	    			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

	    				color = faceVertexColors[ j ];
	    				faceCopy.vertexColors.push( color.clone() );

	    			}

	    			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

	    			faces1.push( faceCopy );

	    		}

	    		// uvs

	    		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

	    			var uv = uvs2[ i ], uvCopy = [];

	    			if ( uv === undefined ) {

	    				continue;

	    			}

	    			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

	    				uvCopy.push( uv[ j ].clone() );

	    			}

	    			uvs1.push( uvCopy );

	    		}

	    	},

	    	mergeMesh: function ( mesh ) {

	    		if ( (mesh && mesh.isMesh) === false ) {

	    			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
	    			return;

	    		}

	    		mesh.matrixAutoUpdate && mesh.updateMatrix();

	    		this.merge( mesh.geometry, mesh.matrix );

	    	},

	    	/*
	    	 * Checks for duplicate vertices with hashmap.
	    	 * Duplicated vertices are removed
	    	 * and faces' vertices are updated.
	    	 */

	    	mergeVertices: function () {

	    		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
	    		var unique = [], changes = [];

	    		var v, key;
	    		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
	    		var precision = Math.pow( 10, precisionPoints );
	    		var i, il, face;
	    		var indices, j, jl;

	    		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

	    			v = this.vertices[ i ];
	    			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

	    			if ( verticesMap[ key ] === undefined ) {

	    				verticesMap[ key ] = i;
	    				unique.push( this.vertices[ i ] );
	    				changes[ i ] = unique.length - 1;

	    			} else {

	    				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
	    				changes[ i ] = changes[ verticesMap[ key ] ];

	    			}

	    		}


	    		// if faces are completely degenerate after merging vertices, we
	    		// have to remove them from the geometry.
	    		var faceIndicesToRemove = [];

	    		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

	    			face = this.faces[ i ];

	    			face.a = changes[ face.a ];
	    			face.b = changes[ face.b ];
	    			face.c = changes[ face.c ];

	    			indices = [ face.a, face.b, face.c ];

	    			var dupIndex = - 1;

	    			// if any duplicate vertices are found in a Face3
	    			// we have to remove the face as nothing can be saved
	    			for ( var n = 0; n < 3; n ++ ) {

	    				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

	    					dupIndex = n;
	    					faceIndicesToRemove.push( i );
	    					break;

	    				}

	    			}

	    		}

	    		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

	    			var idx = faceIndicesToRemove[ i ];

	    			this.faces.splice( idx, 1 );

	    			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

	    				this.faceVertexUvs[ j ].splice( idx, 1 );

	    			}

	    		}

	    		// Use unique set of vertices

	    		var diff = this.vertices.length - unique.length;
	    		this.vertices = unique;
	    		return diff;

	    	},

	    	sortFacesByMaterialIndex: function () {

	    		var faces = this.faces;
	    		var length = faces.length;

	    		// tag faces

	    		for ( var i = 0; i < length; i ++ ) {

	    			faces[ i ]._id = i;

	    		}

	    		// sort faces

	    		function materialIndexSort( a, b ) {

	    			return a.materialIndex - b.materialIndex;

	    		}

	    		faces.sort( materialIndexSort );

	    		// sort uvs

	    		var uvs1 = this.faceVertexUvs[ 0 ];
	    		var uvs2 = this.faceVertexUvs[ 1 ];

	    		var newUvs1, newUvs2;

	    		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
	    		if ( uvs2 && uvs2.length === length ) newUvs2 = [];

	    		for ( var i = 0; i < length; i ++ ) {

	    			var id = faces[ i ]._id;

	    			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
	    			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

	    		}

	    		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
	    		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

	    	},

	    	toJSON: function () {

	    		var data = {
	    			metadata: {
	    				version: 4.4,
	    				type: 'Geometry',
	    				generator: 'Geometry.toJSON'
	    			}
	    		};

	    		// standard Geometry serialization

	    		data.uuid = this.uuid;
	    		data.type = this.type;
	    		if ( this.name !== '' ) data.name = this.name;

	    		if ( this.parameters !== undefined ) {

	    			var parameters = this.parameters;

	    			for ( var key in parameters ) {

	    				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

	    			}

	    			return data;

	    		}

	    		var vertices = [];

	    		for ( var i = 0; i < this.vertices.length; i ++ ) {

	    			var vertex = this.vertices[ i ];
	    			vertices.push( vertex.x, vertex.y, vertex.z );

	    		}

	    		var faces = [];
	    		var normals = [];
	    		var normalsHash = {};
	    		var colors = [];
	    		var colorsHash = {};
	    		var uvs = [];
	    		var uvsHash = {};

	    		for ( var i = 0; i < this.faces.length; i ++ ) {

	    			var face = this.faces[ i ];

	    			var hasMaterial = true;
	    			var hasFaceUv = false; // deprecated
	    			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
	    			var hasFaceNormal = face.normal.length() > 0;
	    			var hasFaceVertexNormal = face.vertexNormals.length > 0;
	    			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
	    			var hasFaceVertexColor = face.vertexColors.length > 0;

	    			var faceType = 0;

	    			faceType = setBit( faceType, 0, 0 ); // isQuad
	    			faceType = setBit( faceType, 1, hasMaterial );
	    			faceType = setBit( faceType, 2, hasFaceUv );
	    			faceType = setBit( faceType, 3, hasFaceVertexUv );
	    			faceType = setBit( faceType, 4, hasFaceNormal );
	    			faceType = setBit( faceType, 5, hasFaceVertexNormal );
	    			faceType = setBit( faceType, 6, hasFaceColor );
	    			faceType = setBit( faceType, 7, hasFaceVertexColor );

	    			faces.push( faceType );
	    			faces.push( face.a, face.b, face.c );
	    			faces.push( face.materialIndex );

	    			if ( hasFaceVertexUv ) {

	    				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

	    				faces.push(
	    					getUvIndex( faceVertexUvs[ 0 ] ),
	    					getUvIndex( faceVertexUvs[ 1 ] ),
	    					getUvIndex( faceVertexUvs[ 2 ] )
	    				);

	    			}

	    			if ( hasFaceNormal ) {

	    				faces.push( getNormalIndex( face.normal ) );

	    			}

	    			if ( hasFaceVertexNormal ) {

	    				var vertexNormals = face.vertexNormals;

	    				faces.push(
	    					getNormalIndex( vertexNormals[ 0 ] ),
	    					getNormalIndex( vertexNormals[ 1 ] ),
	    					getNormalIndex( vertexNormals[ 2 ] )
	    				);

	    			}

	    			if ( hasFaceColor ) {

	    				faces.push( getColorIndex( face.color ) );

	    			}

	    			if ( hasFaceVertexColor ) {

	    				var vertexColors = face.vertexColors;

	    				faces.push(
	    					getColorIndex( vertexColors[ 0 ] ),
	    					getColorIndex( vertexColors[ 1 ] ),
	    					getColorIndex( vertexColors[ 2 ] )
	    				);

	    			}

	    		}

	    		function setBit( value, position, enabled ) {

	    			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

	    		}

	    		function getNormalIndex( normal ) {

	    			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

	    			if ( normalsHash[ hash ] !== undefined ) {

	    				return normalsHash[ hash ];

	    			}

	    			normalsHash[ hash ] = normals.length / 3;
	    			normals.push( normal.x, normal.y, normal.z );

	    			return normalsHash[ hash ];

	    		}

	    		function getColorIndex( color ) {

	    			var hash = color.r.toString() + color.g.toString() + color.b.toString();

	    			if ( colorsHash[ hash ] !== undefined ) {

	    				return colorsHash[ hash ];

	    			}

	    			colorsHash[ hash ] = colors.length;
	    			colors.push( color.getHex() );

	    			return colorsHash[ hash ];

	    		}

	    		function getUvIndex( uv ) {

	    			var hash = uv.x.toString() + uv.y.toString();

	    			if ( uvsHash[ hash ] !== undefined ) {

	    				return uvsHash[ hash ];

	    			}

	    			uvsHash[ hash ] = uvs.length / 2;
	    			uvs.push( uv.x, uv.y );

	    			return uvsHash[ hash ];

	    		}

	    		data.data = {};

	    		data.data.vertices = vertices;
	    		data.data.normals = normals;
	    		if ( colors.length > 0 ) data.data.colors = colors;
	    		if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
	    		data.data.faces = faces;

	    		return data;

	    	},

	    	clone: function () {

	    		/*
	    		// Handle primitives

	    		var parameters = this.parameters;

	    		if ( parameters !== undefined ) {

	    			var values = [];

	    			for ( var key in parameters ) {

	    				values.push( parameters[ key ] );

	    			}

	    			var geometry = Object.create( this.constructor.prototype );
	    			this.constructor.apply( geometry, values );
	    			return geometry;

	    		}

	    		return new this.constructor().copy( this );
	    		*/

	    		return new Geometry().copy( this );

	    	},

	    	copy: function ( source ) {

	    		this.vertices = [];
	    		this.faces = [];
	    		this.faceVertexUvs = [ [] ];
	    		this.colors = [];

	    		var vertices = source.vertices;

	    		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

	    			this.vertices.push( vertices[ i ].clone() );

	    		}

	    		var colors = source.colors;

	    		for ( var i = 0, il = colors.length; i < il; i ++ ) {

	    			this.colors.push( colors[ i ].clone() );

	    		}

	    		var faces = source.faces;

	    		for ( var i = 0, il = faces.length; i < il; i ++ ) {

	    			this.faces.push( faces[ i ].clone() );

	    		}

	    		for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

	    			var faceVertexUvs = source.faceVertexUvs[ i ];

	    			if ( this.faceVertexUvs[ i ] === undefined ) {

	    				this.faceVertexUvs[ i ] = [];

	    			}

	    			for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

	    				var uvs = faceVertexUvs[ j ], uvsCopy = [];

	    				for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

	    					var uv = uvs[ k ];

	    					uvsCopy.push( uv.clone() );

	    				}

	    				this.faceVertexUvs[ i ].push( uvsCopy );

	    			}

	    		}

	    		return this;

	    	},

	    	dispose: function () {

	    		this.dispatchEvent( { type: 'dispose' } );

	    	}

	    } );

	    var count$3 = 0;
	    function GeometryIdCount() { return count$3++; };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function DirectGeometry() {

	    	Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

	    	this.uuid = exports.Math.generateUUID();

	    	this.name = '';
	    	this.type = 'DirectGeometry';

	    	this.indices = [];
	    	this.vertices = [];
	    	this.normals = [];
	    	this.colors = [];
	    	this.uvs = [];
	    	this.uvs2 = [];

	    	this.groups = [];

	    	this.morphTargets = {};

	    	this.skinWeights = [];
	    	this.skinIndices = [];

	    	// this.lineDistances = [];

	    	this.boundingBox = null;
	    	this.boundingSphere = null;

	    	// update flags

	    	this.verticesNeedUpdate = false;
	    	this.normalsNeedUpdate = false;
	    	this.colorsNeedUpdate = false;
	    	this.uvsNeedUpdate = false;
	    	this.groupsNeedUpdate = false;

	    }

	    Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {

	    	computeBoundingBox: Geometry.prototype.computeBoundingBox,
	    	computeBoundingSphere: Geometry.prototype.computeBoundingSphere,

	    	computeFaceNormals: function () {

	    		console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

	    	},

	    	computeVertexNormals: function () {

	    		console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

	    	},

	    	computeGroups: function ( geometry ) {

	    		var group;
	    		var groups = [];
	    		var materialIndex;

	    		var faces = geometry.faces;

	    		for ( var i = 0; i < faces.length; i ++ ) {

	    			var face = faces[ i ];

	    			// materials

	    			if ( face.materialIndex !== materialIndex ) {

	    				materialIndex = face.materialIndex;

	    				if ( group !== undefined ) {

	    					group.count = ( i * 3 ) - group.start;
	    					groups.push( group );

	    				}

	    				group = {
	    					start: i * 3,
	    					materialIndex: materialIndex
	    				};

	    			}

	    		}

	    		if ( group !== undefined ) {

	    			group.count = ( i * 3 ) - group.start;
	    			groups.push( group );

	    		}

	    		this.groups = groups;

	    	},

	    	fromGeometry: function ( geometry ) {

	    		var faces = geometry.faces;
	    		var vertices = geometry.vertices;
	    		var faceVertexUvs = geometry.faceVertexUvs;

	    		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
	    		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

	    		// morphs

	    		var morphTargets = geometry.morphTargets;
	    		var morphTargetsLength = morphTargets.length;

	    		var morphTargetsPosition;

	    		if ( morphTargetsLength > 0 ) {

	    			morphTargetsPosition = [];

	    			for ( var i = 0; i < morphTargetsLength; i ++ ) {

	    				morphTargetsPosition[ i ] = [];

	    			}

	    			this.morphTargets.position = morphTargetsPosition;

	    		}

	    		var morphNormals = geometry.morphNormals;
	    		var morphNormalsLength = morphNormals.length;

	    		var morphTargetsNormal;

	    		if ( morphNormalsLength > 0 ) {

	    			morphTargetsNormal = [];

	    			for ( var i = 0; i < morphNormalsLength; i ++ ) {

	    				morphTargetsNormal[ i ] = [];

	    			}

	    			this.morphTargets.normal = morphTargetsNormal;

	    		}

	    		// skins

	    		var skinIndices = geometry.skinIndices;
	    		var skinWeights = geometry.skinWeights;

	    		var hasSkinIndices = skinIndices.length === vertices.length;
	    		var hasSkinWeights = skinWeights.length === vertices.length;

	    		//

	    		for ( var i = 0; i < faces.length; i ++ ) {

	    			var face = faces[ i ];

	    			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

	    			var vertexNormals = face.vertexNormals;

	    			if ( vertexNormals.length === 3 ) {

	    				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

	    			} else {

	    				var normal = face.normal;

	    				this.normals.push( normal, normal, normal );

	    			}

	    			var vertexColors = face.vertexColors;

	    			if ( vertexColors.length === 3 ) {

	    				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

	    			} else {

	    				var color = face.color;

	    				this.colors.push( color, color, color );

	    			}

	    			if ( hasFaceVertexUv === true ) {

	    				var vertexUvs = faceVertexUvs[ 0 ][ i ];

	    				if ( vertexUvs !== undefined ) {

	    					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

	    				} else {

	    					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

	    					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

	    				}

	    			}

	    			if ( hasFaceVertexUv2 === true ) {

	    				var vertexUvs = faceVertexUvs[ 1 ][ i ];

	    				if ( vertexUvs !== undefined ) {

	    					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

	    				} else {

	    					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

	    					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

	    				}

	    			}

	    			// morphs

	    			for ( var j = 0; j < morphTargetsLength; j ++ ) {

	    				var morphTarget = morphTargets[ j ].vertices;

	    				morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

	    			}

	    			for ( var j = 0; j < morphNormalsLength; j ++ ) {

	    				var morphNormal = morphNormals[ j ].vertexNormals[ i ];

	    				morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

	    			}

	    			// skins

	    			if ( hasSkinIndices ) {

	    				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

	    			}

	    			if ( hasSkinWeights ) {

	    				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

	    			}

	    		}

	    		this.computeGroups( geometry );

	    		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
	    		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
	    		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
	    		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
	    		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

	    		return this;

	    	},

	    	dispose: function () {

	    		this.dispatchEvent( { type: 'dispose' } );

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function BufferGeometry() {

	    	Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

	    	this.uuid = exports.Math.generateUUID();

	    	this.name = '';
	    	this.type = 'BufferGeometry';

	    	this.index = null;
	    	this.attributes = {};

	    	this.morphAttributes = {};

	    	this.groups = [];

	    	this.boundingBox = null;
	    	this.boundingSphere = null;

	    	this.drawRange = { start: 0, count: Infinity };

	    }

	    Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

	    	isBufferGeometry: true,

	    	getIndex: function () {

	    		return this.index;

	    	},

	    	setIndex: function ( index ) {

	    		this.index = index;

	    	},

	    	addAttribute: function ( name, attribute ) {

	    		if ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {

	    			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

	    			this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

	    			return;

	    		}

	    		if ( name === 'index' ) {

	    			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
	    			this.setIndex( attribute );

	    			return;

	    		}

	    		this.attributes[ name ] = attribute;

	    		return this;

	    	},

	    	getAttribute: function ( name ) {

	    		return this.attributes[ name ];

	    	},

	    	removeAttribute: function ( name ) {

	    		delete this.attributes[ name ];

	    		return this;

	    	},

	    	addGroup: function ( start, count, materialIndex ) {

	    		this.groups.push( {

	    			start: start,
	    			count: count,
	    			materialIndex: materialIndex !== undefined ? materialIndex : 0

	    		} );

	    	},

	    	clearGroups: function () {

	    		this.groups = [];

	    	},

	    	setDrawRange: function ( start, count ) {

	    		this.drawRange.start = start;
	    		this.drawRange.count = count;

	    	},

	    	applyMatrix: function ( matrix ) {

	    		var position = this.attributes.position;

	    		if ( position !== undefined ) {

	    			matrix.applyToVector3Array( position.array );
	    			position.needsUpdate = true;

	    		}

	    		var normal = this.attributes.normal;

	    		if ( normal !== undefined ) {

	    			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

	    			normalMatrix.applyToVector3Array( normal.array );
	    			normal.needsUpdate = true;

	    		}

	    		if ( this.boundingBox !== null ) {

	    			this.computeBoundingBox();

	    		}

	    		if ( this.boundingSphere !== null ) {

	    			this.computeBoundingSphere();

	    		}

	    		return this;

	    	},

	    	rotateX: function () {

	    		// rotate geometry around world x-axis

	    		var m1;

	    		return function rotateX( angle ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeRotationX( angle );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	rotateY: function () {

	    		// rotate geometry around world y-axis

	    		var m1;

	    		return function rotateY( angle ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeRotationY( angle );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	rotateZ: function () {

	    		// rotate geometry around world z-axis

	    		var m1;

	    		return function rotateZ( angle ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeRotationZ( angle );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	translate: function () {

	    		// translate geometry

	    		var m1;

	    		return function translate( x, y, z ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeTranslation( x, y, z );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	scale: function () {

	    		// scale geometry

	    		var m1;

	    		return function scale( x, y, z ) {

	    			if ( m1 === undefined ) m1 = new Matrix4();

	    			m1.makeScale( x, y, z );

	    			this.applyMatrix( m1 );

	    			return this;

	    		};

	    	}(),

	    	lookAt: function () {

	    		var obj;

	    		return function lookAt( vector ) {

	    			if ( obj === undefined ) obj = new Object3D();

	    			obj.lookAt( vector );

	    			obj.updateMatrix();

	    			this.applyMatrix( obj.matrix );

	    		};

	    	}(),

	    	center: function () {

	    		this.computeBoundingBox();

	    		var offset = this.boundingBox.getCenter().negate();

	    		this.translate( offset.x, offset.y, offset.z );

	    		return offset;

	    	},

	    	setFromObject: function ( object ) {

	    		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

	    		var geometry = object.geometry;

	    		if ( (object && object.isPoints) || (object && object.isLine) ) {

	    			var positions = new Float32Attribute( geometry.vertices.length * 3, 3 );
	    			var colors = new Float32Attribute( geometry.colors.length * 3, 3 );

	    			this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
	    			this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

	    			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

	    				var lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );

	    				this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

	    			}

	    			if ( geometry.boundingSphere !== null ) {

	    				this.boundingSphere = geometry.boundingSphere.clone();

	    			}

	    			if ( geometry.boundingBox !== null ) {

	    				this.boundingBox = geometry.boundingBox.clone();

	    			}

	    		} else if ( (object && object.isMesh) ) {

	    			if ( (geometry && geometry.isGeometry) ) {

	    				this.fromGeometry( geometry );

	    			}

	    		}

	    		return this;

	    	},

	    	updateFromObject: function ( object ) {

	    		var geometry = object.geometry;

	    		if ( (object && object.isMesh) ) {

	    			var direct = geometry.__directGeometry;

	    			if ( geometry.elementsNeedUpdate === true ) {

	    				direct = undefined;
	    				geometry.elementsNeedUpdate = false;

	    			}

	    			if ( direct === undefined ) {

	    				return this.fromGeometry( geometry );

	    			}

	    			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
	    			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
	    			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
	    			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
	    			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

	    			geometry.verticesNeedUpdate = false;
	    			geometry.normalsNeedUpdate = false;
	    			geometry.colorsNeedUpdate = false;
	    			geometry.uvsNeedUpdate = false;
	    			geometry.groupsNeedUpdate = false;

	    			geometry = direct;

	    		}

	    		var attribute;

	    		if ( geometry.verticesNeedUpdate === true ) {

	    			attribute = this.attributes.position;

	    			if ( attribute !== undefined ) {

	    				attribute.copyVector3sArray( geometry.vertices );
	    				attribute.needsUpdate = true;

	    			}

	    			geometry.verticesNeedUpdate = false;

	    		}

	    		if ( geometry.normalsNeedUpdate === true ) {

	    			attribute = this.attributes.normal;

	    			if ( attribute !== undefined ) {

	    				attribute.copyVector3sArray( geometry.normals );
	    				attribute.needsUpdate = true;

	    			}

	    			geometry.normalsNeedUpdate = false;

	    		}

	    		if ( geometry.colorsNeedUpdate === true ) {

	    			attribute = this.attributes.color;

	    			if ( attribute !== undefined ) {

	    				attribute.copyColorsArray( geometry.colors );
	    				attribute.needsUpdate = true;

	    			}

	    			geometry.colorsNeedUpdate = false;

	    		}

	    		if ( geometry.uvsNeedUpdate ) {

	    			attribute = this.attributes.uv;

	    			if ( attribute !== undefined ) {

	    				attribute.copyVector2sArray( geometry.uvs );
	    				attribute.needsUpdate = true;

	    			}

	    			geometry.uvsNeedUpdate = false;

	    		}

	    		if ( geometry.lineDistancesNeedUpdate ) {

	    			attribute = this.attributes.lineDistance;

	    			if ( attribute !== undefined ) {

	    				attribute.copyArray( geometry.lineDistances );
	    				attribute.needsUpdate = true;

	    			}

	    			geometry.lineDistancesNeedUpdate = false;

	    		}

	    		if ( geometry.groupsNeedUpdate ) {

	    			geometry.computeGroups( object.geometry );
	    			this.groups = geometry.groups;

	    			geometry.groupsNeedUpdate = false;

	    		}

	    		return this;

	    	},

	    	fromGeometry: function ( geometry ) {

	    		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

	    		return this.fromDirectGeometry( geometry.__directGeometry );

	    	},

	    	fromDirectGeometry: function ( geometry ) {

	    		var positions = new Float32Array( geometry.vertices.length * 3 );
	    		this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

	    		if ( geometry.normals.length > 0 ) {

	    			var normals = new Float32Array( geometry.normals.length * 3 );
	    			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

	    		}

	    		if ( geometry.colors.length > 0 ) {

	    			var colors = new Float32Array( geometry.colors.length * 3 );
	    			this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

	    		}

	    		if ( geometry.uvs.length > 0 ) {

	    			var uvs = new Float32Array( geometry.uvs.length * 2 );
	    			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

	    		}

	    		if ( geometry.uvs2.length > 0 ) {

	    			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
	    			this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

	    		}

	    		if ( geometry.indices.length > 0 ) {

	    			var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
	    			var indices = new TypeArray( geometry.indices.length * 3 );
	    			this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

	    		}

	    		// groups

	    		this.groups = geometry.groups;

	    		// morphs

	    		for ( var name in geometry.morphTargets ) {

	    			var array = [];
	    			var morphTargets = geometry.morphTargets[ name ];

	    			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

	    				var morphTarget = morphTargets[ i ];

	    				var attribute = new Float32Attribute( morphTarget.length * 3, 3 );

	    				array.push( attribute.copyVector3sArray( morphTarget ) );

	    			}

	    			this.morphAttributes[ name ] = array;

	    		}

	    		// skinning

	    		if ( geometry.skinIndices.length > 0 ) {

	    			var skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );
	    			this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

	    		}

	    		if ( geometry.skinWeights.length > 0 ) {

	    			var skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );
	    			this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

	    		}

	    		//

	    		if ( geometry.boundingSphere !== null ) {

	    			this.boundingSphere = geometry.boundingSphere.clone();

	    		}

	    		if ( geometry.boundingBox !== null ) {

	    			this.boundingBox = geometry.boundingBox.clone();

	    		}

	    		return this;

	    	},

	    	computeBoundingBox: function () {

	    		if ( this.boundingBox === null ) {

	    			this.boundingBox = new Box3();

	    		}

	    		var positions = this.attributes.position.array;

	    		if ( positions !== undefined ) {

	    			this.boundingBox.setFromArray( positions );

	    		} else {

	    			this.boundingBox.makeEmpty();

	    		}

	    		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

	    			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

	    		}

	    	},

	    	computeBoundingSphere: function () {

	    		var box = new Box3();
	    		var vector = new Vector3();

	    		return function computeBoundingSphere() {

	    			if ( this.boundingSphere === null ) {

	    				this.boundingSphere = new Sphere();

	    			}

	    			var positions = this.attributes.position;

	    			if ( positions ) {

	    				var array = positions.array;
	    				var center = this.boundingSphere.center;

	    				box.setFromArray( array );
	    				box.getCenter( center );

	    				// hoping to find a boundingSphere with a radius smaller than the
	    				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

	    				var maxRadiusSq = 0;

	    				for ( var i = 0, il = array.length; i < il; i += 3 ) {

	    					vector.fromArray( array, i );
	    					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

	    				}

	    				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

	    				if ( isNaN( this.boundingSphere.radius ) ) {

	    					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

	    				}

	    			}

	    		};

	    	}(),

	    	computeFaceNormals: function () {

	    		// backwards compatibility

	    	},

	    	computeVertexNormals: function () {

	    		var index = this.index;
	    		var attributes = this.attributes;
	    		var groups = this.groups;

	    		if ( attributes.position ) {

	    			var positions = attributes.position.array;

	    			if ( attributes.normal === undefined ) {

	    				this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

	    			} else {

	    				// reset existing normals to zero

	    				var array = attributes.normal.array;

	    				for ( var i = 0, il = array.length; i < il; i ++ ) {

	    					array[ i ] = 0;

	    				}

	    			}

	    			var normals = attributes.normal.array;

	    			var vA, vB, vC,

	    			pA = new Vector3(),
	    			pB = new Vector3(),
	    			pC = new Vector3(),

	    			cb = new Vector3(),
	    			ab = new Vector3();

	    			// indexed elements

	    			if ( index ) {

	    				var indices = index.array;

	    				if ( groups.length === 0 ) {

	    					this.addGroup( 0, indices.length );

	    				}

	    				for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

	    					var group = groups[ j ];

	    					var start = group.start;
	    					var count = group.count;

	    					for ( var i = start, il = start + count; i < il; i += 3 ) {

	    						vA = indices[ i + 0 ] * 3;
	    						vB = indices[ i + 1 ] * 3;
	    						vC = indices[ i + 2 ] * 3;

	    						pA.fromArray( positions, vA );
	    						pB.fromArray( positions, vB );
	    						pC.fromArray( positions, vC );

	    						cb.subVectors( pC, pB );
	    						ab.subVectors( pA, pB );
	    						cb.cross( ab );

	    						normals[ vA ] += cb.x;
	    						normals[ vA + 1 ] += cb.y;
	    						normals[ vA + 2 ] += cb.z;

	    						normals[ vB ] += cb.x;
	    						normals[ vB + 1 ] += cb.y;
	    						normals[ vB + 2 ] += cb.z;

	    						normals[ vC ] += cb.x;
	    						normals[ vC + 1 ] += cb.y;
	    						normals[ vC + 2 ] += cb.z;

	    					}

	    				}

	    			} else {

	    				// non-indexed elements (unconnected triangle soup)

	    				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

	    					pA.fromArray( positions, i );
	    					pB.fromArray( positions, i + 3 );
	    					pC.fromArray( positions, i + 6 );

	    					cb.subVectors( pC, pB );
	    					ab.subVectors( pA, pB );
	    					cb.cross( ab );

	    					normals[ i ] = cb.x;
	    					normals[ i + 1 ] = cb.y;
	    					normals[ i + 2 ] = cb.z;

	    					normals[ i + 3 ] = cb.x;
	    					normals[ i + 4 ] = cb.y;
	    					normals[ i + 5 ] = cb.z;

	    					normals[ i + 6 ] = cb.x;
	    					normals[ i + 7 ] = cb.y;
	    					normals[ i + 8 ] = cb.z;

	    				}

	    			}

	    			this.normalizeNormals();

	    			attributes.normal.needsUpdate = true;

	    		}

	    	},

	    	merge: function ( geometry, offset ) {

	    		if ( (geometry && geometry.isBufferGeometry) === false ) {

	    			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
	    			return;

	    		}

	    		if ( offset === undefined ) offset = 0;

	    		var attributes = this.attributes;

	    		for ( var key in attributes ) {

	    			if ( geometry.attributes[ key ] === undefined ) continue;

	    			var attribute1 = attributes[ key ];
	    			var attributeArray1 = attribute1.array;

	    			var attribute2 = geometry.attributes[ key ];
	    			var attributeArray2 = attribute2.array;

	    			var attributeSize = attribute2.itemSize;

	    			for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

	    				attributeArray1[ j ] = attributeArray2[ i ];

	    			}

	    		}

	    		return this;

	    	},

	    	normalizeNormals: function () {

	    		var normals = this.attributes.normal.array;

	    		var x, y, z, n;

	    		for ( var i = 0, il = normals.length; i < il; i += 3 ) {

	    			x = normals[ i ];
	    			y = normals[ i + 1 ];
	    			z = normals[ i + 2 ];

	    			n = 1.0 / Math.sqrt( x * x + y * y + z * z );

	    			normals[ i ] *= n;
	    			normals[ i + 1 ] *= n;
	    			normals[ i + 2 ] *= n;

	    		}

	    	},

	    	toNonIndexed: function () {

	    		if ( this.index === null ) {

	    			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
	    			return this;

	    		}

	    		var geometry2 = new BufferGeometry();

	    		var indices = this.index.array;
	    		var attributes = this.attributes;

	    		for ( var name in attributes ) {

	    			var attribute = attributes[ name ];

	    			var array = attribute.array;
	    			var itemSize = attribute.itemSize;

	    			var array2 = new array.constructor( indices.length * itemSize );

	    			var index = 0, index2 = 0;

	    			for ( var i = 0, l = indices.length; i < l; i ++ ) {

	    				index = indices[ i ] * itemSize;

	    				for ( var j = 0; j < itemSize; j ++ ) {

	    					array2[ index2 ++ ] = array[ index ++ ];

	    				}

	    			}

	    			geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

	    		}

	    		return geometry2;

	    	},

	    	toJSON: function () {

	    		var data = {
	    			metadata: {
	    				version: 4.4,
	    				type: 'BufferGeometry',
	    				generator: 'BufferGeometry.toJSON'
	    			}
	    		};

	    		// standard BufferGeometry serialization

	    		data.uuid = this.uuid;
	    		data.type = this.type;
	    		if ( this.name !== '' ) data.name = this.name;

	    		if ( this.parameters !== undefined ) {

	    			var parameters = this.parameters;

	    			for ( var key in parameters ) {

	    				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

	    			}

	    			return data;

	    		}

	    		data.data = { attributes: {} };

	    		var index = this.index;

	    		if ( index !== null ) {

	    			var array = Array.prototype.slice.call( index.array );

	    			data.data.index = {
	    				type: index.array.constructor.name,
	    				array: array
	    			};

	    		}

	    		var attributes = this.attributes;

	    		for ( var key in attributes ) {

	    			var attribute = attributes[ key ];

	    			var array = Array.prototype.slice.call( attribute.array );

	    			data.data.attributes[ key ] = {
	    				itemSize: attribute.itemSize,
	    				type: attribute.array.constructor.name,
	    				array: array,
	    				normalized: attribute.normalized
	    			};

	    		}

	    		var groups = this.groups;

	    		if ( groups.length > 0 ) {

	    			data.data.groups = JSON.parse( JSON.stringify( groups ) );

	    		}

	    		var boundingSphere = this.boundingSphere;

	    		if ( boundingSphere !== null ) {

	    			data.data.boundingSphere = {
	    				center: boundingSphere.center.toArray(),
	    				radius: boundingSphere.radius
	    			};

	    		}

	    		return data;

	    	},

	    	clone: function () {

	    		/*
	    		// Handle primitives

	    		var parameters = this.parameters;

	    		if ( parameters !== undefined ) {

	    			var values = [];

	    			for ( var key in parameters ) {

	    				values.push( parameters[ key ] );

	    			}

	    			var geometry = Object.create( this.constructor.prototype );
	    			this.constructor.apply( geometry, values );
	    			return geometry;

	    		}

	    		return new this.constructor().copy( this );
	    		*/

	    		return new BufferGeometry().copy( this );

	    	},

	    	copy: function ( source ) {

	    		var index = source.index;

	    		if ( index !== null ) {

	    			this.setIndex( index.clone() );

	    		}

	    		var attributes = source.attributes;

	    		for ( var name in attributes ) {

	    			var attribute = attributes[ name ];
	    			this.addAttribute( name, attribute.clone() );

	    		}

	    		var groups = source.groups;

	    		for ( var i = 0, l = groups.length; i < l; i ++ ) {

	    			var group = groups[ i ];
	    			this.addGroup( group.start, group.count, group.materialIndex );

	    		}

	    		return this;

	    	},

	    	dispose: function () {

	    		this.dispatchEvent( { type: 'dispose' } );

	    	}

	    } );

	    BufferGeometry.MaxIndex = 65535;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     * @author mikael emtinger / http://gomo.se/
	     * @author jonobr1 / http://jonobr1.com/
	     */

	    function Mesh( geometry, material ) {

	    	Object3D.call( this );

	    	this.type = 'Mesh';

	    	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	    	this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

	    	this.drawMode = TrianglesDrawMode;

	    	this.updateMorphTargets();

	    }

	    Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Mesh,

	    	isMesh: true,

	    	setDrawMode: function ( value ) {

	    		this.drawMode = value;

	    	},

	    	copy: function ( source ) {

	    		Object3D.prototype.copy.call( this, source );

	    		this.drawMode = source.drawMode;

	    		return this;

	    	},

	    	updateMorphTargets: function () {

	    		var morphTargets = this.geometry.morphTargets;

	    		if ( morphTargets !== undefined && morphTargets.length > 0 ) {

	    			this.morphTargetInfluences = [];
	    			this.morphTargetDictionary = {};

	    			for ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {

	    				this.morphTargetInfluences.push( 0 );
	    				this.morphTargetDictionary[ morphTargets[ m ].name ] = m;

	    			}

	    		}

	    	},

	    	raycast: ( function () {

	    		var inverseMatrix = new Matrix4();
	    		var ray = new Ray();
	    		var sphere = new Sphere();

	    		var vA = new Vector3();
	    		var vB = new Vector3();
	    		var vC = new Vector3();

	    		var tempA = new Vector3();
	    		var tempB = new Vector3();
	    		var tempC = new Vector3();

	    		var uvA = new Vector2();
	    		var uvB = new Vector2();
	    		var uvC = new Vector2();

	    		var barycoord = new Vector3();

	    		var intersectionPoint = new Vector3();
	    		var intersectionPointWorld = new Vector3();

	    		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

	    			Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

	    			uv1.multiplyScalar( barycoord.x );
	    			uv2.multiplyScalar( barycoord.y );
	    			uv3.multiplyScalar( barycoord.z );

	    			uv1.add( uv2 ).add( uv3 );

	    			return uv1.clone();

	    		}

	    		function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

	    			var intersect;
	    			var material = object.material;

	    			if ( material.side === BackSide ) {

	    				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

	    			} else {

	    				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

	    			}

	    			if ( intersect === null ) return null;

	    			intersectionPointWorld.copy( point );
	    			intersectionPointWorld.applyMatrix4( object.matrixWorld );

	    			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

	    			if ( distance < raycaster.near || distance > raycaster.far ) return null;

	    			return {
	    				distance: distance,
	    				point: intersectionPointWorld.clone(),
	    				object: object
	    			};

	    		}

	    		function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

	    			vA.fromArray( positions, a * 3 );
	    			vB.fromArray( positions, b * 3 );
	    			vC.fromArray( positions, c * 3 );

	    			var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

	    			if ( intersection ) {

	    				if ( uvs ) {

	    					uvA.fromArray( uvs, a * 2 );
	    					uvB.fromArray( uvs, b * 2 );
	    					uvC.fromArray( uvs, c * 2 );

	    					intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

	    				}

	    				intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
	    				intersection.faceIndex = a;

	    			}

	    			return intersection;

	    		}

	    		return function raycast( raycaster, intersects ) {

	    			var geometry = this.geometry;
	    			var material = this.material;
	    			var matrixWorld = this.matrixWorld;

	    			if ( material === undefined ) return;

	    			// Checking boundingSphere distance to ray

	    			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

	    			sphere.copy( geometry.boundingSphere );
	    			sphere.applyMatrix4( matrixWorld );

	    			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

	    			//

	    			inverseMatrix.getInverse( matrixWorld );
	    			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

	    			// Check boundingBox before continuing

	    			if ( geometry.boundingBox !== null ) {

	    				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

	    			}

	    			var uvs, intersection;

	    			if ( (geometry && geometry.isBufferGeometry) ) {

	    				var a, b, c;
	    				var index = geometry.index;
	    				var attributes = geometry.attributes;
	    				var positions = attributes.position.array;

	    				if ( attributes.uv !== undefined ) {

	    					uvs = attributes.uv.array;

	    				}

	    				if ( index !== null ) {

	    					var indices = index.array;

	    					for ( var i = 0, l = indices.length; i < l; i += 3 ) {

	    						a = indices[ i ];
	    						b = indices[ i + 1 ];
	    						c = indices[ i + 2 ];

	    						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

	    						if ( intersection ) {

	    							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
	    							intersects.push( intersection );

	    						}

	    					}

	    				} else {


	    					for ( var i = 0, l = positions.length; i < l; i += 9 ) {

	    						a = i / 3;
	    						b = a + 1;
	    						c = a + 2;

	    						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

	    						if ( intersection ) {

	    							intersection.index = a; // triangle number in positions buffer semantics
	    							intersects.push( intersection );

	    						}

	    					}

	    				}

	    			} else if ( (geometry && geometry.isGeometry) ) {

	    				var fvA, fvB, fvC;
	    				var isFaceMaterial = (material && material.isMultiMaterial);
	    				var materials = isFaceMaterial === true ? material.materials : null;

	    				var vertices = geometry.vertices;
	    				var faces = geometry.faces;
	    				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
	    				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

	    				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

	    					var face = faces[ f ];
	    					var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

	    					if ( faceMaterial === undefined ) continue;

	    					fvA = vertices[ face.a ];
	    					fvB = vertices[ face.b ];
	    					fvC = vertices[ face.c ];

	    					if ( faceMaterial.morphTargets === true ) {

	    						var morphTargets = geometry.morphTargets;
	    						var morphInfluences = this.morphTargetInfluences;

	    						vA.set( 0, 0, 0 );
	    						vB.set( 0, 0, 0 );
	    						vC.set( 0, 0, 0 );

	    						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

	    							var influence = morphInfluences[ t ];

	    							if ( influence === 0 ) continue;

	    							var targets = morphTargets[ t ].vertices;

	    							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
	    							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
	    							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

	    						}

	    						vA.add( fvA );
	    						vB.add( fvB );
	    						vC.add( fvC );

	    						fvA = vA;
	    						fvB = vB;
	    						fvC = vC;

	    					}

	    					intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

	    					if ( intersection ) {

	    						if ( uvs ) {

	    							var uvs_f = uvs[ f ];
	    							uvA.copy( uvs_f[ 0 ] );
	    							uvB.copy( uvs_f[ 1 ] );
	    							uvC.copy( uvs_f[ 2 ] );

	    							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

	    						}

	    						intersection.face = face;
	    						intersection.faceIndex = f;
	    						intersects.push( intersection );

	    					}

	    				}

	    			}

	    		};

	    	}() ),

	    	clone: function () {

	    		return new this.constructor( this.geometry, this.material ).copy( this );

	    	}

	    } );

	    /**
	     * @author Mugen87 / https://github.com/Mugen87
	     */

	    function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	    	BufferGeometry.call( this );

	    	this.type = 'BoxBufferGeometry';

	    	this.parameters = {
	    		width: width,
	    		height: height,
	    		depth: depth,
	    		widthSegments: widthSegments,
	    		heightSegments: heightSegments,
	    		depthSegments: depthSegments
	    	};

	    	var scope = this;

	    	// segments
	    	widthSegments = Math.floor( widthSegments ) || 1;
	    	heightSegments = Math.floor( heightSegments ) || 1;
	    	depthSegments = Math.floor( depthSegments ) || 1;

	    	// these are used to calculate buffer length
	    	var vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );
	    	var indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );

	    	// buffers
	    	var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
	    	var vertices = new Float32Array( vertexCount * 3 );
	    	var normals = new Float32Array( vertexCount * 3 );
	    	var uvs = new Float32Array( vertexCount * 2 );

	    	// offset variables
	    	var vertexBufferOffset = 0;
	    	var uvBufferOffset = 0;
	    	var indexBufferOffset = 0;
	    	var numberOfVertices = 0;

	    	// group variables
	    	var groupStart = 0;

	    	// build each side of the box geometry
	    	buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
	    	buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
	    	buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
	    	buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
	    	buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
	    	buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

	    	// build geometry
	    	this.setIndex( new BufferAttribute( indices, 1 ) );
	    	this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
	    	this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
	    	this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	    	// helper functions

	    	function calculateVertexCount( w, h, d ) {

	    		var vertices = 0;

	    		// calculate the amount of vertices for each side (plane)
	    		vertices += (w + 1) * (h + 1) * 2; // xy
	    		vertices += (w + 1) * (d + 1) * 2; // xz
	    		vertices += (d + 1) * (h + 1) * 2; // zy

	    		return vertices;

	    	}

	    	function calculateIndexCount( w, h, d ) {

	    		var index = 0;

	    		// calculate the amount of squares for each side
	    		index += w * h * 2; // xy
	    		index += w * d * 2; // xz
	    		index += d * h * 2; // zy

	    		return index * 6; // two triangles per square => six vertices per square

	    	}

	    	function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

	    		var segmentWidth	= width / gridX;
	    		var segmentHeight = height / gridY;

	    		var widthHalf = width / 2;
	    		var heightHalf = height / 2;
	    		var depthHalf = depth / 2;

	    		var gridX1 = gridX + 1;
	    		var gridY1 = gridY + 1;

	    		var vertexCounter = 0;
	    		var groupCount = 0;

	    		var vector = new Vector3();

	    		// generate vertices, normals and uvs

	    		for ( var iy = 0; iy < gridY1; iy ++ ) {

	    			var y = iy * segmentHeight - heightHalf;

	    			for ( var ix = 0; ix < gridX1; ix ++ ) {

	    				var x = ix * segmentWidth - widthHalf;

	    				// set values to correct vector component
	    				vector[ u ] = x * udir;
	    				vector[ v ] = y * vdir;
	    				vector[ w ] = depthHalf;

	    				// now apply vector to vertex buffer
	    				vertices[ vertexBufferOffset ] = vector.x;
	    				vertices[ vertexBufferOffset + 1 ] = vector.y;
	    				vertices[ vertexBufferOffset + 2 ] = vector.z;

	    				// set values to correct vector component
	    				vector[ u ] = 0;
	    				vector[ v ] = 0;
	    				vector[ w ] = depth > 0 ? 1 : - 1;

	    				// now apply vector to normal buffer
	    				normals[ vertexBufferOffset ] = vector.x;
	    				normals[ vertexBufferOffset + 1 ] = vector.y;
	    				normals[ vertexBufferOffset + 2 ] = vector.z;

	    				// uvs
	    				uvs[ uvBufferOffset ] = ix / gridX;
	    				uvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );

	    				// update offsets and counters
	    				vertexBufferOffset += 3;
	    				uvBufferOffset += 2;
	    				vertexCounter += 1;

	    			}

	    		}

	    		// 1. you need three indices to draw a single face
	    		// 2. a single segment consists of two faces
	    		// 3. so we need to generate six (2*3) indices per segment

	    		for ( iy = 0; iy < gridY; iy ++ ) {

	    			for ( ix = 0; ix < gridX; ix ++ ) {

	    				// indices
	    				var a = numberOfVertices + ix + gridX1 * iy;
	    				var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
	    				var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
	    				var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

	    				// face one
	    				indices[ indexBufferOffset ] = a;
	    				indices[ indexBufferOffset + 1 ] = b;
	    				indices[ indexBufferOffset + 2 ] = d;

	    				// face two
	    				indices[ indexBufferOffset + 3 ] = b;
	    				indices[ indexBufferOffset + 4 ] = c;
	    				indices[ indexBufferOffset + 5 ] = d;

	    				// update offsets and counters
	    				indexBufferOffset += 6;
	    				groupCount += 6;

	    			}

	    		}

	    		// add a group to the geometry. this will ensure multi material support
	    		scope.addGroup( groupStart, groupCount, materialIndex );

	    		// calculate new start value for groups
	    		groupStart += groupCount;

	    		// update total number of vertices
	    		numberOfVertices += vertexCounter;

	    	}

	    }

	    BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	     */

	    function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

	    	BufferGeometry.call( this );

	    	this.type = 'PlaneBufferGeometry';

	    	this.parameters = {
	    		width: width,
	    		height: height,
	    		widthSegments: widthSegments,
	    		heightSegments: heightSegments
	    	};

	    	var width_half = width / 2;
	    	var height_half = height / 2;

	    	var gridX = Math.floor( widthSegments ) || 1;
	    	var gridY = Math.floor( heightSegments ) || 1;

	    	var gridX1 = gridX + 1;
	    	var gridY1 = gridY + 1;

	    	var segment_width = width / gridX;
	    	var segment_height = height / gridY;

	    	var vertices = new Float32Array( gridX1 * gridY1 * 3 );
	    	var normals = new Float32Array( gridX1 * gridY1 * 3 );
	    	var uvs = new Float32Array( gridX1 * gridY1 * 2 );

	    	var offset = 0;
	    	var offset2 = 0;

	    	for ( var iy = 0; iy < gridY1; iy ++ ) {

	    		var y = iy * segment_height - height_half;

	    		for ( var ix = 0; ix < gridX1; ix ++ ) {

	    			var x = ix * segment_width - width_half;

	    			vertices[ offset ] = x;
	    			vertices[ offset + 1 ] = - y;

	    			normals[ offset + 2 ] = 1;

	    			uvs[ offset2 ] = ix / gridX;
	    			uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

	    			offset += 3;
	    			offset2 += 2;

	    		}

	    	}

	    	offset = 0;

	    	var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

	    	for ( var iy = 0; iy < gridY; iy ++ ) {

	    		for ( var ix = 0; ix < gridX; ix ++ ) {

	    			var a = ix + gridX1 * iy;
	    			var b = ix + gridX1 * ( iy + 1 );
	    			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
	    			var d = ( ix + 1 ) + gridX1 * iy;

	    			indices[ offset ] = a;
	    			indices[ offset + 1 ] = b;
	    			indices[ offset + 2 ] = d;

	    			indices[ offset + 3 ] = b;
	    			indices[ offset + 4 ] = c;
	    			indices[ offset + 5 ] = d;

	    			offset += 6;

	    		}

	    	}

	    	this.setIndex( new BufferAttribute( indices, 1 ) );
	    	this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
	    	this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
	    	this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	    }

	    PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author mikael emtinger / http://gomo.se/
	     * @author WestLangley / http://github.com/WestLangley
	    */

	    function Camera() {

	    	Object3D.call( this );

	    	this.type = 'Camera';

	    	this.matrixWorldInverse = new Matrix4();
	    	this.projectionMatrix = new Matrix4();

	    }

	    Camera.prototype = Object.create( Object3D.prototype );
	    Camera.prototype.constructor = Camera;

	    Camera.prototype.isCamera = true;

	    Camera.prototype.getWorldDirection = function () {

	    	var quaternion = new Quaternion();

	    	return function getWorldDirection( optionalTarget ) {

	    		var result = optionalTarget || new Vector3();

	    		this.getWorldQuaternion( quaternion );

	    		return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

	    	};

	    }();

	    Camera.prototype.lookAt = function () {

	    	// This routine does not support cameras with rotated and/or translated parent(s)

	    	var m1 = new Matrix4();

	    	return function lookAt( vector ) {

	    		m1.lookAt( this.position, vector, this.up );

	    		this.quaternion.setFromRotationMatrix( m1 );

	    	};

	    }();

	    Camera.prototype.clone = function () {

	    	return new this.constructor().copy( this );

	    };

	    Camera.prototype.copy = function ( source ) {

	    	Object3D.prototype.copy.call( this, source );

	    	this.matrixWorldInverse.copy( source.matrixWorldInverse );
	    	this.projectionMatrix.copy( source.projectionMatrix );

	    	return this;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author greggman / http://games.greggman.com/
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     * @author tschw
	     */

	    function PerspectiveCamera( fov, aspect, near, far ) {

	    	Camera.call( this );

	    	this.type = 'PerspectiveCamera';

	    	this.fov = fov !== undefined ? fov : 50;
	    	this.zoom = 1;

	    	this.near = near !== undefined ? near : 0.1;
	    	this.far = far !== undefined ? far : 2000;
	    	this.focus = 10;

	    	this.aspect = aspect !== undefined ? aspect : 1;
	    	this.view = null;

	    	this.filmGauge = 35;	// width of the film (default in millimeters)
	    	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

	    	this.updateProjectionMatrix();

	    }

	    PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	    	constructor: PerspectiveCamera,

	    	isPerspectiveCamera: true,

	    	copy: function ( source ) {

	    		Camera.prototype.copy.call( this, source );

	    		this.fov = source.fov;
	    		this.zoom = source.zoom;

	    		this.near = source.near;
	    		this.far = source.far;
	    		this.focus = source.focus;

	    		this.aspect = source.aspect;
	    		this.view = source.view === null ? null : Object.assign( {}, source.view );

	    		this.filmGauge = source.filmGauge;
	    		this.filmOffset = source.filmOffset;

	    		return this;

	    	},

	    	/**
	    	 * Sets the FOV by focal length in respect to the current .filmGauge.
	    	 *
	    	 * The default film gauge is 35, so that the focal length can be specified for
	    	 * a 35mm (full frame) camera.
	    	 *
	    	 * Values for focal length and film gauge must have the same unit.
	    	 */
	    	setFocalLength: function ( focalLength ) {

	    		// see http://www.bobatkins.com/photography/technical/field_of_view.html
	    		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

	    		this.fov = exports.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
	    		this.updateProjectionMatrix();

	    	},

	    	/**
	    	 * Calculates the focal length from the current .fov and .filmGauge.
	    	 */
	    	getFocalLength: function () {

	    		var vExtentSlope = Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov );

	    		return 0.5 * this.getFilmHeight() / vExtentSlope;

	    	},

	    	getEffectiveFOV: function () {

	    		return exports.Math.RAD2DEG * 2 * Math.atan(
	    				Math.tan( exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

	    	},

	    	getFilmWidth: function () {

	    		// film not completely covered in portrait format (aspect < 1)
	    		return this.filmGauge * Math.min( this.aspect, 1 );

	    	},

	    	getFilmHeight: function () {

	    		// film not completely covered in landscape format (aspect > 1)
	    		return this.filmGauge / Math.max( this.aspect, 1 );

	    	},

	    	/**
	    	 * Sets an offset in a larger frustum. This is useful for multi-window or
	    	 * multi-monitor/multi-machine setups.
	    	 *
	    	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	    	 * the monitors are in grid like this
	    	 *
	    	 *   +---+---+---+
	    	 *   | A | B | C |
	    	 *   +---+---+---+
	    	 *   | D | E | F |
	    	 *   +---+---+---+
	    	 *
	    	 * then for each monitor you would call it like this
	    	 *
	    	 *   var w = 1920;
	    	 *   var h = 1080;
	    	 *   var fullWidth = w * 3;
	    	 *   var fullHeight = h * 2;
	    	 *
	    	 *   --A--
	    	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	    	 *   --B--
	    	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	    	 *   --C--
	    	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	    	 *   --D--
	    	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	    	 *   --E--
	    	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	    	 *   --F--
	    	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	    	 *
	    	 *   Note there is no reason monitors have to be the same size or in a grid.
	    	 */
	    	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

	    		this.aspect = fullWidth / fullHeight;

	    		this.view = {
	    			fullWidth: fullWidth,
	    			fullHeight: fullHeight,
	    			offsetX: x,
	    			offsetY: y,
	    			width: width,
	    			height: height
	    		};

	    		this.updateProjectionMatrix();

	    	},

	    	clearViewOffset: function() {

	    		this.view = null;
	    		this.updateProjectionMatrix();

	    	},

	    	updateProjectionMatrix: function () {

	    		var near = this.near,
	    			top = near * Math.tan(
	    					exports.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
	    			height = 2 * top,
	    			width = this.aspect * height,
	    			left = - 0.5 * width,
	    			view = this.view;

	    		if ( view !== null ) {

	    			var fullWidth = view.fullWidth,
	    				fullHeight = view.fullHeight;

	    			left += view.offsetX * width / fullWidth;
	    			top -= view.offsetY * height / fullHeight;
	    			width *= view.width / fullWidth;
	    			height *= view.height / fullHeight;

	    		}

	    		var skew = this.filmOffset;
	    		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

	    		this.projectionMatrix.makeFrustum(
	    				left, left + width, top - height, top, near, this.far );

	    	},

	    	toJSON: function ( meta ) {

	    		var data = Object3D.prototype.toJSON.call( this, meta );

	    		data.object.fov = this.fov;
	    		data.object.zoom = this.zoom;

	    		data.object.near = this.near;
	    		data.object.far = this.far;
	    		data.object.focus = this.focus;

	    		data.object.aspect = this.aspect;

	    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

	    		data.object.filmGauge = this.filmGauge;
	    		data.object.filmOffset = this.filmOffset;

	    		return data;

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author arose / http://github.com/arose
	     */

	    function OrthographicCamera( left, right, top, bottom, near, far ) {

	    	Camera.call( this );

	    	this.type = 'OrthographicCamera';

	    	this.zoom = 1;
	    	this.view = null;

	    	this.left = left;
	    	this.right = right;
	    	this.top = top;
	    	this.bottom = bottom;

	    	this.near = ( near !== undefined ) ? near : 0.1;
	    	this.far = ( far !== undefined ) ? far : 2000;

	    	this.updateProjectionMatrix();

	    }

	    OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	    	constructor: OrthographicCamera,

	    	isOrthographicCamera: true,

	    	copy: function ( source ) {

	    		Camera.prototype.copy.call( this, source );

	    		this.left = source.left;
	    		this.right = source.right;
	    		this.top = source.top;
	    		this.bottom = source.bottom;
	    		this.near = source.near;
	    		this.far = source.far;

	    		this.zoom = source.zoom;
	    		this.view = source.view === null ? null : Object.assign( {}, source.view );

	    		return this;

	    	},

	    	setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

	    		this.view = {
	    			fullWidth: fullWidth,
	    			fullHeight: fullHeight,
	    			offsetX: x,
	    			offsetY: y,
	    			width: width,
	    			height: height
	    		};

	    		this.updateProjectionMatrix();

	    	},

	    	clearViewOffset: function() {

	    		this.view = null;
	    		this.updateProjectionMatrix();

	    	},

	    	updateProjectionMatrix: function () {

	    		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
	    		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
	    		var cx = ( this.right + this.left ) / 2;
	    		var cy = ( this.top + this.bottom ) / 2;

	    		var left = cx - dx;
	    		var right = cx + dx;
	    		var top = cy + dy;
	    		var bottom = cy - dy;

	    		if ( this.view !== null ) {

	    			var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
	    			var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
	    			var scaleW = ( this.right - this.left ) / this.view.width;
	    			var scaleH = ( this.top - this.bottom ) / this.view.height;

	    			left += scaleW * ( this.view.offsetX / zoomW );
	    			right = left + scaleW * ( this.view.width / zoomW );
	    			top -= scaleH * ( this.view.offsetY / zoomH );
	    			bottom = top - scaleH * ( this.view.height / zoomH );

	    		}

	    		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

	    	},

	    	toJSON: function ( meta ) {

	    		var data = Object3D.prototype.toJSON.call( this, meta );

	    		data.object.zoom = this.zoom;
	    		data.object.left = this.left;
	    		data.object.right = this.right;
	    		data.object.top = this.top;
	    		data.object.bottom = this.bottom;
	    		data.object.near = this.near;
	    		data.object.far = this.far;

	    		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

	    		return data;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

	    	var mode;

	    	function setMode( value ) {

	    		mode = value;

	    	}

	    	var type, size;

	    	function setIndex( index ) {

	    		if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

	    			type = gl.UNSIGNED_INT;
	    			size = 4;

	    		} else {

	    			type = gl.UNSIGNED_SHORT;
	    			size = 2;

	    		}

	    	}

	    	function render( start, count ) {

	    		gl.drawElements( mode, count, type, start * size );

	    		infoRender.calls ++;
	    		infoRender.vertices += count;

	    		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

	    	}

	    	function renderInstances( geometry, start, count ) {

	    		var extension = extensions.get( 'ANGLE_instanced_arrays' );

	    		if ( extension === null ) {

	    			console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
	    			return;

	    		}

	    		extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

	    		infoRender.calls ++;
	    		infoRender.vertices += count * geometry.maxInstancedCount;

	    		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

	    	}

	    	return {

	    		setMode: setMode,
	    		setIndex: setIndex,
	    		render: render,
	    		renderInstances: renderInstances

	    	};

	    }

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function WebGLBufferRenderer( gl, extensions, infoRender ) {

	    	var mode;

	    	function setMode( value ) {

	    		mode = value;

	    	}

	    	function render( start, count ) {

	    		gl.drawArrays( mode, start, count );

	    		infoRender.calls ++;
	    		infoRender.vertices += count;

	    		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

	    	}

	    	function renderInstances( geometry ) {

	    		var extension = extensions.get( 'ANGLE_instanced_arrays' );

	    		if ( extension === null ) {

	    			console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
	    			return;

	    		}

	    		var position = geometry.attributes.position;

	    		var count = 0;

	    		if ( (position && position.isInterleavedBufferAttribute) ) {

	    			count = position.data.count;

	    			extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

	    		} else {

	    			count = position.count;

	    			extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

	    		}

	    		infoRender.calls ++;
	    		infoRender.vertices += count * geometry.maxInstancedCount;

	    		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

	    	}

	    	return {
	    		setMode: setMode,
	    		render: render,
	    		renderInstances: renderInstances
	    	};

	    }

	    function WebGLLights() {

	    	var lights = {};

	    	return {

	    		get: function ( light ) {

	    			if ( lights[ light.id ] !== undefined ) {

	    				return lights[ light.id ];

	    			}

	    			var uniforms;

	    			switch ( light.type ) {

	    				case 'DirectionalLight':
	    					uniforms = {
	    						direction: new Vector3(),
	    						color: new Color(),

	    						shadow: false,
	    						shadowBias: 0,
	    						shadowRadius: 1,
	    						shadowMapSize: new Vector2()
	    					};
	    					break;

	    				case 'SpotLight':
	    					uniforms = {
	    						position: new Vector3(),
	    						direction: new Vector3(),
	    						color: new Color(),
	    						distance: 0,
	    						coneCos: 0,
	    						penumbraCos: 0,
	    						decay: 0,

	    						shadow: false,
	    						shadowBias: 0,
	    						shadowRadius: 1,
	    						shadowMapSize: new Vector2()
	    					};
	    					break;

	    				case 'PointLight':
	    					uniforms = {
	    						position: new Vector3(),
	    						color: new Color(),
	    						distance: 0,
	    						decay: 0,

	    						shadow: false,
	    						shadowBias: 0,
	    						shadowRadius: 1,
	    						shadowMapSize: new Vector2()
	    					};
	    					break;

	    				case 'HemisphereLight':
	    					uniforms = {
	    						direction: new Vector3(),
	    						skyColor: new Color(),
	    						groundColor: new Color()
	    					};
	    					break;

	    			}

	    			lights[ light.id ] = uniforms;

	    			return uniforms;

	    		}

	    	};

	    }

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function addLineNumbers( string ) {

	    	var lines = string.split( '\n' );

	    	for ( var i = 0; i < lines.length; i ++ ) {

	    		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

	    	}

	    	return lines.join( '\n' );

	    }

	    function WebGLShader( gl, type, string ) {

	    	var shader = gl.createShader( type );

	    	gl.shaderSource( shader, string );
	    	gl.compileShader( shader );

	    	if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

	    		console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

	    	}

	    	if ( gl.getShaderInfoLog( shader ) !== '' ) {

	    		console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

	    	}

	    	// --enable-privileged-webgl-extension
	    	// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

	    	return shader;

	    }

	    var programIdCount = 0;

	    function getEncodingComponents( encoding ) {

	    	switch ( encoding ) {

	    		case LinearEncoding:
	    			return [ 'Linear','( value )' ];
	    		case sRGBEncoding:
	    			return [ 'sRGB','( value )' ];
	    		case RGBEEncoding:
	    			return [ 'RGBE','( value )' ];
	    		case RGBM7Encoding:
	    			return [ 'RGBM','( value, 7.0 )' ];
	    		case RGBM16Encoding:
	    			return [ 'RGBM','( value, 16.0 )' ];
	    		case RGBDEncoding:
	    			return [ 'RGBD','( value, 256.0 )' ];
	    		case GammaEncoding:
	    			return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
	    		default:
	    			throw new Error( 'unsupported encoding: ' + encoding );

	    	}

	    }

	    function getTexelDecodingFunction( functionName, encoding ) {

	    	var components = getEncodingComponents( encoding );
	    	return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

	    }

	    function getTexelEncodingFunction( functionName, encoding ) {

	    	var components = getEncodingComponents( encoding );
	    	return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

	    }

	    function getToneMappingFunction( functionName, toneMapping ) {

	    	var toneMappingName;

	    	switch ( toneMapping ) {

	    		case LinearToneMapping:
	    			toneMappingName = "Linear";
	    			break;

	    		case ReinhardToneMapping:
	    			toneMappingName = "Reinhard";
	    			break;

	    		case Uncharted2ToneMapping:
	    			toneMappingName = "Uncharted2";
	    			break;

	    		case CineonToneMapping:
	    			toneMappingName = "OptimizedCineon";
	    			break;

	    		default:
	    			throw new Error( 'unsupported toneMapping: ' + toneMapping );

	    	}

	    	return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

	    }

	    function generateExtensions( extensions, parameters, rendererExtensions ) {

	    	extensions = extensions || {};

	    	var chunks = [
	    		( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
	    		( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
	    		( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
	    		( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
	    	];

	    	return chunks.filter( filterEmptyLine ).join( '\n' );

	    }

	    function generateDefines( defines ) {

	    	var chunks = [];

	    	for ( var name in defines ) {

	    		var value = defines[ name ];

	    		if ( value === false ) continue;

	    		chunks.push( '#define ' + name + ' ' + value );

	    	}

	    	return chunks.join( '\n' );

	    }

	    function fetchAttributeLocations( gl, program, identifiers ) {

	    	var attributes = {};

	    	var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

	    	for ( var i = 0; i < n; i ++ ) {

	    		var info = gl.getActiveAttrib( program, i );
	    		var name = info.name;

	    		// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

	    		attributes[ name ] = gl.getAttribLocation( program, name );

	    	}

	    	return attributes;

	    }

	    function filterEmptyLine( string ) {

	    	return string !== '';

	    }

	    function replaceLightNums( string, parameters ) {

	    	return string
	    		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
	    		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
	    		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
	    		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

	    }

	    function parseIncludes( string ) {

	    	var pattern = /#include +<([\w\d.]+)>/g;

	    	function replace( match, include ) {

	    		var replace = ShaderChunk[ include ];

	    		if ( replace === undefined ) {

	    			throw new Error( 'Can not resolve #include <' + include + '>' );

	    		}

	    		return parseIncludes( replace );

	    	}

	    	return string.replace( pattern, replace );

	    }

	    function unrollLoops( string ) {

	    	var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

	    	function replace( match, start, end, snippet ) {

	    		var unroll = '';

	    		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

	    			unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

	    		}

	    		return unroll;

	    	}

	    	return string.replace( pattern, replace );

	    }

	    function WebGLProgram( renderer, code, material, parameters ) {

	    	var gl = renderer.context;

	    	var extensions = material.extensions;
	    	var defines = material.defines;

	    	var vertexShader = material.__webglShader.vertexShader;
	    	var fragmentShader = material.__webglShader.fragmentShader;

	    	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	    	if ( parameters.shadowMapType === PCFShadowMap ) {

	    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	    	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

	    		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	    	}

	    	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
	    	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
	    	var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

	    	if ( parameters.envMap ) {

	    		switch ( material.envMap.mapping ) {

	    			case CubeReflectionMapping:
	    			case CubeRefractionMapping:
	    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
	    				break;

	    			case CubeUVReflectionMapping:
	    			case CubeUVRefractionMapping:
	    				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
	    				break;

	    			case EquirectangularReflectionMapping:
	    			case EquirectangularRefractionMapping:
	    				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
	    				break;

	    			case SphericalReflectionMapping:
	    				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
	    				break;

	    		}

	    		switch ( material.envMap.mapping ) {

	    			case CubeRefractionMapping:
	    			case EquirectangularRefractionMapping:
	    				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
	    				break;

	    		}

	    		switch ( material.combine ) {

	    			case MultiplyOperation:
	    				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
	    				break;

	    			case MixOperation:
	    				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
	    				break;

	    			case AddOperation:
	    				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
	    				break;

	    		}

	    	}

	    	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

	    	// console.log( 'building new program ' );

	    	//

	    	var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

	    	var customDefines = generateDefines( defines );

	    	//

	    	var program = gl.createProgram();

	    	var prefixVertex, prefixFragment;

	    	if ( material.isRawShaderMaterial ) {

	    		prefixVertex = [

	    			customDefines,

	    			'\n'

	    		].filter( filterEmptyLine ).join( '\n' );

	    		prefixFragment = [

	    			customExtensions,
	    			customDefines,

	    			'\n'

	    		].filter( filterEmptyLine ).join( '\n' );

	    	} else {

	    		prefixVertex = [

	    			'precision ' + parameters.precision + ' float;',
	    			'precision ' + parameters.precision + ' int;',

	    			'#define SHADER_NAME ' + material.__webglShader.name,

	    			customDefines,

	    			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

	    			'#define GAMMA_FACTOR ' + gammaFactorDefine,

	    			'#define MAX_BONES ' + parameters.maxBones,

	    			parameters.map ? '#define USE_MAP' : '',
	    			parameters.envMap ? '#define USE_ENVMAP' : '',
	    			parameters.envMap ? '#define ' + envMapModeDefine : '',
	    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
	    			parameters.aoMap ? '#define USE_AOMAP' : '',
	    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
	    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
	    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
	    			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
	    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
	    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
	    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
	    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
	    			parameters.vertexColors ? '#define USE_COLOR' : '',

	    			parameters.flatShading ? '#define FLAT_SHADED' : '',

	    			parameters.skinning ? '#define USE_SKINNING' : '',
	    			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

	    			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
	    			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
	    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
	    			parameters.flipSided ? '#define FLIP_SIDED' : '',

	    			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

	    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
	    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

	    			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

	    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
	    			parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

	    			'uniform mat4 modelMatrix;',
	    			'uniform mat4 modelViewMatrix;',
	    			'uniform mat4 projectionMatrix;',
	    			'uniform mat4 viewMatrix;',
	    			'uniform mat3 normalMatrix;',
	    			'uniform vec3 cameraPosition;',

	    			'attribute vec3 position;',
	    			'attribute vec3 normal;',
	    			'attribute vec2 uv;',

	    			'#ifdef USE_COLOR',

	    			'	attribute vec3 color;',

	    			'#endif',

	    			'#ifdef USE_MORPHTARGETS',

	    			'	attribute vec3 morphTarget0;',
	    			'	attribute vec3 morphTarget1;',
	    			'	attribute vec3 morphTarget2;',
	    			'	attribute vec3 morphTarget3;',

	    			'	#ifdef USE_MORPHNORMALS',

	    			'		attribute vec3 morphNormal0;',
	    			'		attribute vec3 morphNormal1;',
	    			'		attribute vec3 morphNormal2;',
	    			'		attribute vec3 morphNormal3;',

	    			'	#else',

	    			'		attribute vec3 morphTarget4;',
	    			'		attribute vec3 morphTarget5;',
	    			'		attribute vec3 morphTarget6;',
	    			'		attribute vec3 morphTarget7;',

	    			'	#endif',

	    			'#endif',

	    			'#ifdef USE_SKINNING',

	    			'	attribute vec4 skinIndex;',
	    			'	attribute vec4 skinWeight;',

	    			'#endif',

	    			'\n'

	    		].filter( filterEmptyLine ).join( '\n' );

	    		prefixFragment = [

	    			customExtensions,

	    			'precision ' + parameters.precision + ' float;',
	    			'precision ' + parameters.precision + ' int;',

	    			'#define SHADER_NAME ' + material.__webglShader.name,

	    			customDefines,

	    			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

	    			'#define GAMMA_FACTOR ' + gammaFactorDefine,

	    			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
	    			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

	    			parameters.map ? '#define USE_MAP' : '',
	    			parameters.envMap ? '#define USE_ENVMAP' : '',
	    			parameters.envMap ? '#define ' + envMapTypeDefine : '',
	    			parameters.envMap ? '#define ' + envMapModeDefine : '',
	    			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
	    			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
	    			parameters.aoMap ? '#define USE_AOMAP' : '',
	    			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
	    			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
	    			parameters.normalMap ? '#define USE_NORMALMAP' : '',
	    			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
	    			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
	    			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
	    			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
	    			parameters.vertexColors ? '#define USE_COLOR' : '',

	    			parameters.flatShading ? '#define FLAT_SHADED' : '',

	    			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
	    			parameters.flipSided ? '#define FLIP_SIDED' : '',

	    			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

	    			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
	    			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

	    			parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

	    			parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

	    			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
	    			parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

	    			parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

	    			'uniform mat4 viewMatrix;',
	    			'uniform vec3 cameraPosition;',

	    			( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
	    			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
	    			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

	    			( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
	    			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
	    			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
	    			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
	    			parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

	    			parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

	    			'\n'

	    		].filter( filterEmptyLine ).join( '\n' );

	    	}

	    	vertexShader = parseIncludes( vertexShader, parameters );
	    	vertexShader = replaceLightNums( vertexShader, parameters );

	    	fragmentShader = parseIncludes( fragmentShader, parameters );
	    	fragmentShader = replaceLightNums( fragmentShader, parameters );

	    	if ( ! material.isShaderMaterial ) {

	    		vertexShader = unrollLoops( vertexShader );
	    		fragmentShader = unrollLoops( fragmentShader );

	    	}

	    	var vertexGlsl = prefixVertex + vertexShader;
	    	var fragmentGlsl = prefixFragment + fragmentShader;

	    	// console.log( '*VERTEX*', vertexGlsl );
	    	// console.log( '*FRAGMENT*', fragmentGlsl );

	    	var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
	    	var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

	    	gl.attachShader( program, glVertexShader );
	    	gl.attachShader( program, glFragmentShader );

	    	// Force a particular attribute to index 0.

	    	if ( material.index0AttributeName !== undefined ) {

	    		gl.bindAttribLocation( program, 0, material.index0AttributeName );

	    	} else if ( parameters.morphTargets === true ) {

	    		// programs with morphTargets displace position out of attribute 0
	    		gl.bindAttribLocation( program, 0, 'position' );

	    	}

	    	gl.linkProgram( program );

	    	var programLog = gl.getProgramInfoLog( program );
	    	var vertexLog = gl.getShaderInfoLog( glVertexShader );
	    	var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

	    	var runnable = true;
	    	var haveDiagnostics = true;

	    	// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
	    	// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

	    	if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

	    		runnable = false;

	    		console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

	    	} else if ( programLog !== '' ) {

	    		console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

	    	} else if ( vertexLog === '' || fragmentLog === '' ) {

	    		haveDiagnostics = false;

	    	}

	    	if ( haveDiagnostics ) {

	    		this.diagnostics = {

	    			runnable: runnable,
	    			material: material,

	    			programLog: programLog,

	    			vertexShader: {

	    				log: vertexLog,
	    				prefix: prefixVertex

	    			},

	    			fragmentShader: {

	    				log: fragmentLog,
	    				prefix: prefixFragment

	    			}

	    		};

	    	}

	    	// clean up

	    	gl.deleteShader( glVertexShader );
	    	gl.deleteShader( glFragmentShader );

	    	// set up caching for uniform locations

	    	var cachedUniforms;

	    	this.getUniforms = function() {

	    		if ( cachedUniforms === undefined ) {

	    			cachedUniforms =
	    					new WebGLUniforms( gl, program, renderer );

	    		}

	    		return cachedUniforms;

	    	};

	    	// set up caching for attribute locations

	    	var cachedAttributes;

	    	this.getAttributes = function() {

	    		if ( cachedAttributes === undefined ) {

	    			cachedAttributes = fetchAttributeLocations( gl, program );

	    		}

	    		return cachedAttributes;

	    	};

	    	// free resource

	    	this.destroy = function() {

	    		gl.deleteProgram( program );
	    		this.program = undefined;

	    	};

	    	// DEPRECATED

	    	Object.defineProperties( this, {

	    		uniforms: {
	    			get: function() {

	    				console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
	    				return this.getUniforms();

	    			}
	    		},

	    		attributes: {
	    			get: function() {

	    				console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
	    				return this.getAttributes();

	    			}
	    		}

	    	} );


	    	//

	    	this.id = programIdCount ++;
	    	this.code = code;
	    	this.usedTimes = 1;
	    	this.program = program;
	    	this.vertexShader = glVertexShader;
	    	this.fragmentShader = glFragmentShader;

	    	return this;

	    }

	    function WebGLPrograms( renderer, capabilities ) {

	    	var programs = [];

	    	var shaderIDs = {
	    		MeshDepthMaterial: 'depth',
	    		MeshNormalMaterial: 'normal',
	    		MeshBasicMaterial: 'basic',
	    		MeshLambertMaterial: 'lambert',
	    		MeshPhongMaterial: 'phong',
	    		MeshStandardMaterial: 'physical',
	    		MeshPhysicalMaterial: 'physical',
	    		LineBasicMaterial: 'basic',
	    		LineDashedMaterial: 'dashed',
	    		PointsMaterial: 'points'
	    	};

	    	var parameterNames = [
	    		"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
	    		"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
	    		"roughnessMap", "metalnessMap",
	    		"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
	    		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
	    		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
	    		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
	    		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
	    		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
	    		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "depthPacking"
	    	];


	    	function allocateBones( object ) {

	    		if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

	    			return 1024;

	    		} else {

	    			// default for when object is not specified
	    			// ( for example when prebuilding shader to be used with multiple objects )
	    			//
	    			//  - leave some extra space for other uniforms
	    			//  - limit here is ANGLE's 254 max uniform vectors
	    			//    (up to 54 should be safe)

	    			var nVertexUniforms = capabilities.maxVertexUniforms;
	    			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

	    			var maxBones = nVertexMatrices;

	    			if ( object !== undefined && (object && object.isSkinnedMesh) ) {

	    				maxBones = Math.min( object.skeleton.bones.length, maxBones );

	    				if ( maxBones < object.skeleton.bones.length ) {

	    					console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

	    				}

	    			}

	    			return maxBones;

	    		}

	    	}

	    	function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

	    		var encoding;

	    		if ( ! map ) {

	    			encoding = LinearEncoding;

	    		} else if ( (map && map.isTexture) ) {

	    			encoding = map.encoding;

	    		} else if ( (map && map.isWebGLRenderTarget) ) {

	    			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
	    			encoding = map.texture.encoding;

	    		}

	    		// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
	    		if ( encoding === LinearEncoding && gammaOverrideLinear ) {

	    			encoding = GammaEncoding;

	    		}

	    		return encoding;

	    	}

	    	this.getParameters = function ( material, lights, fog, nClipPlanes, object ) {

	    		var shaderID = shaderIDs[ material.type ];

	    		// heuristics to create shader parameters according to lights in the scene
	    		// (not to blow over maxLights budget)

	    		var maxBones = allocateBones( object );
	    		var precision = renderer.getPrecision();

	    		if ( material.precision !== null ) {

	    			precision = capabilities.getMaxPrecision( material.precision );

	    			if ( precision !== material.precision ) {

	    				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

	    			}

	    		}

	    		var currentRenderTarget = renderer.getCurrentRenderTarget();

	    		var parameters = {

	    			shaderID: shaderID,

	    			precision: precision,
	    			supportsVertexTextures: capabilities.vertexTextures,
	    			outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
	    			map: !! material.map,
	    			mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
	    			envMap: !! material.envMap,
	    			envMapMode: material.envMap && material.envMap.mapping,
	    			envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
	    			envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
	    			lightMap: !! material.lightMap,
	    			aoMap: !! material.aoMap,
	    			emissiveMap: !! material.emissiveMap,
	    			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
	    			bumpMap: !! material.bumpMap,
	    			normalMap: !! material.normalMap,
	    			displacementMap: !! material.displacementMap,
	    			roughnessMap: !! material.roughnessMap,
	    			metalnessMap: !! material.metalnessMap,
	    			specularMap: !! material.specularMap,
	    			alphaMap: !! material.alphaMap,

	    			combine: material.combine,

	    			vertexColors: material.vertexColors,

	    			fog: !! fog,
	    			useFog: material.fog,
	    			fogExp: (fog && fog.isFogExp2),

	    			flatShading: material.shading === FlatShading,

	    			sizeAttenuation: material.sizeAttenuation,
	    			logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

	    			skinning: material.skinning,
	    			maxBones: maxBones,
	    			useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

	    			morphTargets: material.morphTargets,
	    			morphNormals: material.morphNormals,
	    			maxMorphTargets: renderer.maxMorphTargets,
	    			maxMorphNormals: renderer.maxMorphNormals,

	    			numDirLights: lights.directional.length,
	    			numPointLights: lights.point.length,
	    			numSpotLights: lights.spot.length,
	    			numHemiLights: lights.hemi.length,

	    			numClippingPlanes: nClipPlanes,

	    			shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
	    			shadowMapType: renderer.shadowMap.type,

	    			toneMapping: renderer.toneMapping,
	    			physicallyCorrectLights: renderer.physicallyCorrectLights,

	    			premultipliedAlpha: material.premultipliedAlpha,

	    			alphaTest: material.alphaTest,
	    			doubleSided: material.side === DoubleSide,
	    			flipSided: material.side === BackSide,

	    			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

	    		};

	    		return parameters;

	    	};

	    	this.getProgramCode = function ( material, parameters ) {

	    		var array = [];

	    		if ( parameters.shaderID ) {

	    			array.push( parameters.shaderID );

	    		} else {

	    			array.push( material.fragmentShader );
	    			array.push( material.vertexShader );

	    		}

	    		if ( material.defines !== undefined ) {

	    			for ( var name in material.defines ) {

	    				array.push( name );
	    				array.push( material.defines[ name ] );

	    			}

	    		}

	    		for ( var i = 0; i < parameterNames.length; i ++ ) {

	    			array.push( parameters[ parameterNames[ i ] ] );

	    		}

	    		return array.join();

	    	};

	    	this.acquireProgram = function ( material, parameters, code ) {

	    		var program;

	    		// Check if code has been already compiled
	    		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

	    			var programInfo = programs[ p ];

	    			if ( programInfo.code === code ) {

	    				program = programInfo;
	    				++ program.usedTimes;

	    				break;

	    			}

	    		}

	    		if ( program === undefined ) {

	    			program = new WebGLProgram( renderer, code, material, parameters );
	    			programs.push( program );

	    		}

	    		return program;

	    	};

	    	this.releaseProgram = function( program ) {

	    		if ( -- program.usedTimes === 0 ) {

	    			// Remove from unordered set
	    			var i = programs.indexOf( program );
	    			programs[ i ] = programs[ programs.length - 1 ];
	    			programs.pop();

	    			// Free WebGL resources
	    			program.destroy();

	    		}

	    	};

	    	// Exposed for resource monitoring & error feedback via renderer.info:
	    	this.programs = programs;

	    }

	    function WebGLGeometries( gl, properties, info ) {

	    	var geometries = {};

	    	function onGeometryDispose( event ) {

	    		var geometry = event.target;
	    		var buffergeometry = geometries[ geometry.id ];

	    		if ( buffergeometry.index !== null ) {

	    			deleteAttribute( buffergeometry.index );

	    		}

	    		deleteAttributes( buffergeometry.attributes );

	    		geometry.removeEventListener( 'dispose', onGeometryDispose );

	    		delete geometries[ geometry.id ];

	    		// TODO

	    		var property = properties.get( geometry );

	    		if ( property.wireframe ) {

	    			deleteAttribute( property.wireframe );

	    		}

	    		properties.delete( geometry );

	    		var bufferproperty = properties.get( buffergeometry );

	    		if ( bufferproperty.wireframe ) {

	    			deleteAttribute( bufferproperty.wireframe );

	    		}

	    		properties.delete( buffergeometry );

	    		//

	    		info.memory.geometries --;

	    	}

	    	function getAttributeBuffer( attribute ) {

	    		if ( attribute.isInterleavedBufferAttribute ) {

	    			return properties.get( attribute.data ).__webglBuffer;

	    		}

	    		return properties.get( attribute ).__webglBuffer;

	    	}

	    	function deleteAttribute( attribute ) {

	    		var buffer = getAttributeBuffer( attribute );

	    		if ( buffer !== undefined ) {

	    			gl.deleteBuffer( buffer );
	    			removeAttributeBuffer( attribute );

	    		}

	    	}

	    	function deleteAttributes( attributes ) {

	    		for ( var name in attributes ) {

	    			deleteAttribute( attributes[ name ] );

	    		}

	    	}

	    	function removeAttributeBuffer( attribute ) {

	    		if ( attribute.isInterleavedBufferAttribute ) {

	    			properties.delete( attribute.data );

	    		} else {

	    			properties.delete( attribute );

	    		}

	    	}

	    	return {

	    		get: function ( object ) {

	    			var geometry = object.geometry;

	    			if ( geometries[ geometry.id ] !== undefined ) {

	    				return geometries[ geometry.id ];

	    			}

	    			geometry.addEventListener( 'dispose', onGeometryDispose );

	    			var buffergeometry;

	    			if ( geometry.isBufferGeometry ) {

	    				buffergeometry = geometry;

	    			} else if ( geometry.isGeometry ) {

	    				if ( geometry._bufferGeometry === undefined ) {

	    					geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

	    				}

	    				buffergeometry = geometry._bufferGeometry;

	    			}

	    			geometries[ geometry.id ] = buffergeometry;

	    			info.memory.geometries ++;

	    			return buffergeometry;

	    		}

	    	};

	    }

	    function WebGLObjects( gl, properties, info ) {

	    	var geometries = new WebGLGeometries( gl, properties, info );

	    	//

	    	function update( object ) {

	    		// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

	    		var geometry = geometries.get( object );

	    		if ( object.geometry.isGeometry ) {

	    			geometry.updateFromObject( object );

	    		}

	    		var index = geometry.index;
	    		var attributes = geometry.attributes;

	    		if ( index !== null ) {

	    			updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

	    		}

	    		for ( var name in attributes ) {

	    			updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

	    		}

	    		// morph targets

	    		var morphAttributes = geometry.morphAttributes;

	    		for ( var name in morphAttributes ) {

	    			var array = morphAttributes[ name ];

	    			for ( var i = 0, l = array.length; i < l; i ++ ) {

	    				updateAttribute( array[ i ], gl.ARRAY_BUFFER );

	    			}

	    		}

	    		return geometry;

	    	}

	    	function updateAttribute( attribute, bufferType ) {

	    		var data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;

	    		var attributeProperties = properties.get( data );

	    		if ( attributeProperties.__webglBuffer === undefined ) {

	    			createBuffer( attributeProperties, data, bufferType );

	    		} else if ( attributeProperties.version !== data.version ) {

	    			updateBuffer( attributeProperties, data, bufferType );

	    		}

	    	}

	    	function createBuffer( attributeProperties, data, bufferType ) {

	    		attributeProperties.__webglBuffer = gl.createBuffer();
	    		gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

	    		var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

	    		gl.bufferData( bufferType, data.array, usage );

	    		attributeProperties.version = data.version;

	    	}

	    	function updateBuffer( attributeProperties, data, bufferType ) {

	    		gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

	    		if ( data.dynamic === false || data.updateRange.count === - 1 ) {

	    			// Not using update ranges

	    			gl.bufferSubData( bufferType, 0, data.array );

	    		} else if ( data.updateRange.count === 0 ) {

	    			console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

	    		} else {

	    			gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
	    							  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

	    			data.updateRange.count = 0; // reset range

	    		}

	    		attributeProperties.version = data.version;

	    	}

	    	function getAttributeBuffer( attribute ) {

	    		if ( attribute.isInterleavedBufferAttribute ) {

	    			return properties.get( attribute.data ).__webglBuffer;

	    		}

	    		return properties.get( attribute ).__webglBuffer;

	    	}

	    	function getWireframeAttribute( geometry ) {

	    		var property = properties.get( geometry );

	    		if ( property.wireframe !== undefined ) {

	    			return property.wireframe;

	    		}

	    		var indices = [];

	    		var index = geometry.index;
	    		var attributes = geometry.attributes;
	    		var position = attributes.position;

	    		// console.time( 'wireframe' );

	    		if ( index !== null ) {

	    			var edges = {};
	    			var array = index.array;

	    			for ( var i = 0, l = array.length; i < l; i += 3 ) {

	    				var a = array[ i + 0 ];
	    				var b = array[ i + 1 ];
	    				var c = array[ i + 2 ];

	    				indices.push( a, b, b, c, c, a );

	    			}

	    		} else {

	    			var array = attributes.position.array;

	    			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

	    				var a = i + 0;
	    				var b = i + 1;
	    				var c = i + 2;

	    				indices.push( a, b, b, c, c, a );

	    			}

	    		}

	    		// console.timeEnd( 'wireframe' );

	    		var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
	    		var attribute = new BufferAttribute( new TypeArray( indices ), 1 );

	    		updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

	    		property.wireframe = attribute;

	    		return attribute;

	    	}

	    	return {

	    		getAttributeBuffer: getAttributeBuffer,
	    		getWireframeAttribute: getWireframeAttribute,

	    		update: update

	    	};

	    }

	    function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {

	    	var _infoMemory = info.memory;
	    	var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

	    	//

	    	function clampToMaxSize( image, maxSize ) {

	    		if ( image.width > maxSize || image.height > maxSize ) {

	    			// Warning: Scaling through the canvas will only work with images that use
	    			// premultiplied alpha.

	    			var scale = maxSize / Math.max( image.width, image.height );

	    			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	    			canvas.width = Math.floor( image.width * scale );
	    			canvas.height = Math.floor( image.height * scale );

	    			var context = canvas.getContext( '2d' );
	    			context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

	    			console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

	    			return canvas;

	    		}

	    		return image;

	    	}

	    	function isPowerOfTwo( image ) {

	    		return exports.Math.isPowerOfTwo( image.width ) && exports.Math.isPowerOfTwo( image.height );

	    	}

	    	function makePowerOfTwo( image ) {

	    		if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

	    			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	    			canvas.width = exports.Math.nearestPowerOfTwo( image.width );
	    			canvas.height = exports.Math.nearestPowerOfTwo( image.height );

	    			var context = canvas.getContext( '2d' );
	    			context.drawImage( image, 0, 0, canvas.width, canvas.height );

	    			console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

	    			return canvas;

	    		}

	    		return image;

	    	}

	    	function textureNeedsPowerOfTwo( texture ) {

	    		if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;
	    		if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;

	    		return false;

	    	}

	    	// Fallback filters for non-power-of-2 textures

	    	function filterFallback( f ) {

	    		if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

	    			return _gl.NEAREST;

	    		}

	    		return _gl.LINEAR;

	    	}

	    	//

	    	function onTextureDispose( event ) {

	    		var texture = event.target;

	    		texture.removeEventListener( 'dispose', onTextureDispose );

	    		deallocateTexture( texture );

	    		_infoMemory.textures --;


	    	}

	    	function onRenderTargetDispose( event ) {

	    		var renderTarget = event.target;

	    		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

	    		deallocateRenderTarget( renderTarget );

	    		_infoMemory.textures --;

	    	}

	    	//

	    	function deallocateTexture( texture ) {

	    		var textureProperties = properties.get( texture );

	    		if ( texture.image && textureProperties.__image__webglTextureCube ) {

	    			// cube texture

	    			_gl.deleteTexture( textureProperties.__image__webglTextureCube );

	    		} else {

	    			// 2D texture

	    			if ( textureProperties.__webglInit === undefined ) return;

	    			_gl.deleteTexture( textureProperties.__webglTexture );

	    		}

	    		// remove all webgl properties
	    		properties.delete( texture );

	    	}

	    	function deallocateRenderTarget( renderTarget ) {

	    		var renderTargetProperties = properties.get( renderTarget );
	    		var textureProperties = properties.get( renderTarget.texture );

	    		if ( ! renderTarget ) return;

	    		if ( textureProperties.__webglTexture !== undefined ) {

	    			_gl.deleteTexture( textureProperties.__webglTexture );

	    		}

	    		if ( renderTarget.depthTexture ) {

	    			renderTarget.depthTexture.dispose();

	    		}

	    		if ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {

	    			for ( var i = 0; i < 6; i ++ ) {

	    				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
	    				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

	    			}

	    		} else {

	    			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
	    			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

	    		}

	    		properties.delete( renderTarget.texture );
	    		properties.delete( renderTarget );

	    	}

	    	//



	    	function setTexture2D( texture, slot ) {

	    		var textureProperties = properties.get( texture );

	    		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

	    			var image = texture.image;

	    			if ( image === undefined ) {

	    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

	    			} else if ( image.complete === false ) {

	    				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

	    			} else {

	    				uploadTexture( textureProperties, texture, slot );
	    				return;

	    			}

	    		}

	    		state.activeTexture( _gl.TEXTURE0 + slot );
	    		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

	    	}

	    	function setTextureCube( texture, slot ) {

	    		var textureProperties = properties.get( texture );

	    		if ( texture.image.length === 6 ) {

	    			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

	    				if ( ! textureProperties.__image__webglTextureCube ) {

	    					texture.addEventListener( 'dispose', onTextureDispose );

	    					textureProperties.__image__webglTextureCube = _gl.createTexture();

	    					_infoMemory.textures ++;

	    				}

	    				state.activeTexture( _gl.TEXTURE0 + slot );
	    				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

	    				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

	    				var isCompressed = (texture && texture.isCompressedTexture);
	    				var isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);

	    				var cubeImage = [];

	    				for ( var i = 0; i < 6; i ++ ) {

	    					if ( ! isCompressed && ! isDataTexture ) {

	    						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

	    					} else {

	    						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

	    					}

	    				}

	    				var image = cubeImage[ 0 ],
	    				isPowerOfTwoImage = isPowerOfTwo( image ),
	    				glFormat = paramThreeToGL( texture.format ),
	    				glType = paramThreeToGL( texture.type );

	    				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

	    				for ( var i = 0; i < 6; i ++ ) {

	    					if ( ! isCompressed ) {

	    						if ( isDataTexture ) {

	    							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

	    						} else {

	    							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

	    						}

	    					} else {

	    						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

	    						for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

	    							mipmap = mipmaps[ j ];

	    							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

	    								if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

	    									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

	    								} else {

	    									console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

	    								}

	    							} else {

	    								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

	    							}

	    						}

	    					}

	    				}

	    				if ( texture.generateMipmaps && isPowerOfTwoImage ) {

	    					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

	    				}

	    				textureProperties.__version = texture.version;

	    				if ( texture.onUpdate ) texture.onUpdate( texture );

	    			} else {

	    				state.activeTexture( _gl.TEXTURE0 + slot );
	    				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

	    			}

	    		}

	    	}

	    	function setTextureCubeDynamic( texture, slot ) {

	    		state.activeTexture( _gl.TEXTURE0 + slot );
	    		state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

	    	}

	    	function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

	    		var extension;

	    		if ( isPowerOfTwoImage ) {

	    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
	    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

	    			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
	    			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

	    		} else {

	    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
	    			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

	    			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

	    				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

	    			}

	    			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
	    			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

	    			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

	    				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

	    			}

	    		}

	    		extension = extensions.get( 'EXT_texture_filter_anisotropic' );

	    		if ( extension ) {

	    			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
	    			if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

	    			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

	    				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
	    				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

	    			}

	    		}

	    	}

	    	function uploadTexture( textureProperties, texture, slot ) {

	    		if ( textureProperties.__webglInit === undefined ) {

	    			textureProperties.__webglInit = true;

	    			texture.addEventListener( 'dispose', onTextureDispose );

	    			textureProperties.__webglTexture = _gl.createTexture();

	    			_infoMemory.textures ++;

	    		}

	    		state.activeTexture( _gl.TEXTURE0 + slot );
	    		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

	    		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
	    		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
	    		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

	    		var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

	    		if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

	    			image = makePowerOfTwo( image );

	    		}

	    		var isPowerOfTwoImage = isPowerOfTwo( image ),
	    		glFormat = paramThreeToGL( texture.format ),
	    		glType = paramThreeToGL( texture.type );

	    		setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

	    		var mipmap, mipmaps = texture.mipmaps;

	    		if ( (texture && texture.isDepthTexture) ) {

	    			// populate depth texture with dummy data

	    			var internalFormat = _gl.DEPTH_COMPONENT;

	    			if ( texture.type === FloatType ) {

	    				if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
	    				internalFormat = _gl.DEPTH_COMPONENT32F;

	    			} else if ( _isWebGL2 ) {

	    				// WebGL 2.0 requires signed internalformat for glTexImage2D
	    				internalFormat = _gl.DEPTH_COMPONENT16;

	    			}

	    			// Depth stencil textures need the DEPTH_STENCIL internal format
	    			// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
	    			if ( texture.format === DepthStencilFormat ) {

	    				internalFormat = _gl.DEPTH_STENCIL;

	    			}

	    			state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

	    		} else if ( (texture && texture.isDataTexture) ) {

	    			// use manually created mipmaps if available
	    			// if there are no manual mipmaps
	    			// set 0 level mipmap and then use GL to generate other mipmap levels

	    			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

	    				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

	    					mipmap = mipmaps[ i ];
	    					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

	    				}

	    				texture.generateMipmaps = false;

	    			} else {

	    				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

	    			}

	    		} else if ( (texture && texture.isCompressedTexture) ) {

	    			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

	    				mipmap = mipmaps[ i ];

	    				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

	    					if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

	    						state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

	    					} else {

	    						console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

	    					}

	    				} else {

	    					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

	    				}

	    			}

	    		} else {

	    			// regular Texture (image, video, canvas)

	    			// use manually created mipmaps if available
	    			// if there are no manual mipmaps
	    			// set 0 level mipmap and then use GL to generate other mipmap levels

	    			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

	    				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

	    					mipmap = mipmaps[ i ];
	    					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

	    				}

	    				texture.generateMipmaps = false;

	    			} else {

	    				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

	    			}

	    		}

	    		if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );

	    		textureProperties.__version = texture.version;

	    		if ( texture.onUpdate ) texture.onUpdate( texture );

	    	}

	    	// Render targets

	    	// Setup storage for target texture and bind it to correct framebuffer
	    	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

	    		var glFormat = paramThreeToGL( renderTarget.texture.format );
	    		var glType = paramThreeToGL( renderTarget.texture.type );
	    		state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
	    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
	    		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
	    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	    	}

	    	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	    	function setupRenderBufferStorage( renderbuffer, renderTarget ) {

	    		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

	    		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

	    			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
	    			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

	    		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

	    			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
	    			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

	    		} else {

	    			// FIXME: We don't support !depth !stencil
	    			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

	    		}

	    		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

	    	}

	    	// Setup resources for a Depth Texture for a FBO (needs an extension)
	    	function setupDepthTexture( framebuffer, renderTarget ) {

	    		var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
	    		if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');

	    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

	    		if ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {

	    			throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

	    		}

	    		// upload an empty depth texture with framebuffer size
	    		if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
	    				renderTarget.depthTexture.image.width !== renderTarget.width ||
	    				renderTarget.depthTexture.image.height !== renderTarget.height ) {
	    			renderTarget.depthTexture.image.width = renderTarget.width;
	    			renderTarget.depthTexture.image.height = renderTarget.height;
	    			renderTarget.depthTexture.needsUpdate = true;
	    		}

	    		setTexture2D( renderTarget.depthTexture, 0 );

	    		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

	    		if ( renderTarget.depthTexture.format === DepthFormat ) {

	    			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

	    		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

	    			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

	    		} else {

	    			throw new Error('Unknown depthTexture format')

	    		}

	    	}

	    	// Setup GL resources for a non-texture depth buffer
	    	function setupDepthRenderbuffer( renderTarget ) {

	    		var renderTargetProperties = properties.get( renderTarget );

	    		var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );

	    		if ( renderTarget.depthTexture ) {

	    			if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');

	    			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

	    		} else {

	    			if ( isCube ) {

	    				renderTargetProperties.__webglDepthbuffer = [];

	    				for ( var i = 0; i < 6; i ++ ) {

	    					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
	    					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
	    					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

	    				}

	    			} else {

	    				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
	    				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
	    				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

	    			}

	    		}

	    		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	    	}

	    	// Set up GL resources for the render target
	    	function setupRenderTarget( renderTarget ) {

	    		var renderTargetProperties = properties.get( renderTarget );
	    		var textureProperties = properties.get( renderTarget.texture );

	    		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

	    		textureProperties.__webglTexture = _gl.createTexture();

	    		_infoMemory.textures ++;

	    		var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
	    		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

	    		// Setup framebuffer

	    		if ( isCube ) {

	    			renderTargetProperties.__webglFramebuffer = [];

	    			for ( var i = 0; i < 6; i ++ ) {

	    				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

	    			}

	    		} else {

	    			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

	    		}

	    		// Setup color buffer

	    		if ( isCube ) {

	    			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
	    			setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

	    			for ( var i = 0; i < 6; i ++ ) {

	    				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

	    			}

	    			if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
	    			state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

	    		} else {

	    			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
	    			setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
	    			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

	    			if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
	    			state.bindTexture( _gl.TEXTURE_2D, null );

	    		}

	    		// Setup depth and stencil buffers

	    		if ( renderTarget.depthBuffer ) {

	    			setupDepthRenderbuffer( renderTarget );

	    		}

	    	}

	    	function updateRenderTargetMipmap( renderTarget ) {

	    		var texture = renderTarget.texture;

	    		if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
	    				texture.minFilter !== NearestFilter &&
	    				texture.minFilter !== LinearFilter ) {

	    			var target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
	    			var webglTexture = properties.get( texture ).__webglTexture;

	    			state.bindTexture( target, webglTexture );
	    			_gl.generateMipmap( target );
	    			state.bindTexture( target, null );

	    		}

	    	}

	    	this.setTexture2D = setTexture2D;
	    	this.setTextureCube = setTextureCube;
	    	this.setTextureCubeDynamic = setTextureCubeDynamic;
	    	this.setupRenderTarget = setupRenderTarget;
	    	this.updateRenderTargetMipmap = updateRenderTargetMipmap;

	    }

	    /**
	     * @author fordacious / fordacious.github.io
	     */

	    function WebGLProperties() {

	    	var properties = {};

	    	return {

	    		get: function ( object ) {

	    			var uuid = object.uuid;
	    			var map = properties[ uuid ];

	    			if ( map === undefined ) {

	    				map = {};
	    				properties[ uuid ] = map;

	    			}

	    			return map;

	    		},

	    		delete: function ( object ) {

	    			delete properties[ object.uuid ];

	    		},

	    		clear: function () {

	    			properties = {};

	    		}

	    	};

	    }

	    function WebGLState( gl, extensions, paramThreeToGL ) {

	    	function ColorBuffer() {

	    		var locked = false;

	    		var color = new Vector4();
	    		var currentColorMask = null;
	    		var currentColorClear = new Vector4();

	    		return {

	    			setMask: function ( colorMask ) {

	    				if ( currentColorMask !== colorMask && ! locked ) {

	    					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
	    					currentColorMask = colorMask;

	    				}

	    			},

	    			setLocked: function ( lock ) {

	    				locked = lock;

	    			},

	    			setClear: function ( r, g, b, a ) {

	    				color.set( r, g, b, a );

	    				if ( currentColorClear.equals( color ) === false ) {

	    					gl.clearColor( r, g, b, a );
	    					currentColorClear.copy( color );

	    				}

	    			},

	    			reset: function () {

	    				locked = false;

	    				currentColorMask = null;
	    				currentColorClear.set( 0, 0, 0, 1 );

	    			}

	    		};

	    	}

	    	function DepthBuffer() {

	    		var locked = false;

	    		var currentDepthMask = null;
	    		var currentDepthFunc = null;
	    		var currentDepthClear = null;

	    		return {

	    			setTest: function ( depthTest ) {

	    				if ( depthTest ) {

	    					enable( gl.DEPTH_TEST );

	    				} else {

	    					disable( gl.DEPTH_TEST );

	    				}

	    			},

	    			setMask: function ( depthMask ) {

	    				if ( currentDepthMask !== depthMask && ! locked ) {

	    					gl.depthMask( depthMask );
	    					currentDepthMask = depthMask;

	    				}

	    			},

	    			setFunc: function ( depthFunc ) {

	    				if ( currentDepthFunc !== depthFunc ) {

	    					if ( depthFunc ) {

	    						switch ( depthFunc ) {

	    							case NeverDepth:

	    								gl.depthFunc( gl.NEVER );
	    								break;

	    							case AlwaysDepth:

	    								gl.depthFunc( gl.ALWAYS );
	    								break;

	    							case LessDepth:

	    								gl.depthFunc( gl.LESS );
	    								break;

	    							case LessEqualDepth:

	    								gl.depthFunc( gl.LEQUAL );
	    								break;

	    							case EqualDepth:

	    								gl.depthFunc( gl.EQUAL );
	    								break;

	    							case GreaterEqualDepth:

	    								gl.depthFunc( gl.GEQUAL );
	    								break;

	    							case GreaterDepth:

	    								gl.depthFunc( gl.GREATER );
	    								break;

	    							case NotEqualDepth:

	    								gl.depthFunc( gl.NOTEQUAL );
	    								break;

	    							default:

	    								gl.depthFunc( gl.LEQUAL );

	    						}

	    					} else {

	    						gl.depthFunc( gl.LEQUAL );

	    					}

	    					currentDepthFunc = depthFunc;

	    				}

	    			},

	    			setLocked: function ( lock ) {

	    				locked = lock;

	    			},

	    			setClear: function ( depth ) {

	    				if ( currentDepthClear !== depth ) {

	    					gl.clearDepth( depth );
	    					currentDepthClear = depth;

	    				}

	    			},

	    			reset: function () {

	    				locked = false;

	    				currentDepthMask = null;
	    				currentDepthFunc = null;
	    				currentDepthClear = null;

	    			}

	    		};

	    	}

	    	function StencilBuffer() {

	    		var locked = false;

	    		var currentStencilMask = null;
	    		var currentStencilFunc = null;
	    		var currentStencilRef = null;
	    		var currentStencilFuncMask = null;
	    		var currentStencilFail  = null;
	    		var currentStencilZFail = null;
	    		var currentStencilZPass = null;
	    		var currentStencilClear = null;

	    		return {

	    			setTest: function ( stencilTest ) {

	    				if ( stencilTest ) {

	    					enable( gl.STENCIL_TEST );

	    				} else {

	    					disable( gl.STENCIL_TEST );

	    				}

	    			},

	    			setMask: function ( stencilMask ) {

	    				if ( currentStencilMask !== stencilMask && ! locked ) {

	    					gl.stencilMask( stencilMask );
	    					currentStencilMask = stencilMask;

	    				}

	    			},

	    			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

	    				if ( currentStencilFunc !== stencilFunc ||
	    				     currentStencilRef 	!== stencilRef 	||
	    				     currentStencilFuncMask !== stencilMask ) {

	    					gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );

	    					currentStencilFunc = stencilFunc;
	    					currentStencilRef  = stencilRef;
	    					currentStencilFuncMask = stencilMask;

	    				}

	    			},

	    			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

	    				if ( currentStencilFail	 !== stencilFail 	||
	    				     currentStencilZFail !== stencilZFail ||
	    				     currentStencilZPass !== stencilZPass ) {

	    					gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );

	    					currentStencilFail  = stencilFail;
	    					currentStencilZFail = stencilZFail;
	    					currentStencilZPass = stencilZPass;

	    				}

	    			},

	    			setLocked: function ( lock ) {

	    				locked = lock;

	    			},

	    			setClear: function ( stencil ) {

	    				if ( currentStencilClear !== stencil ) {

	    					gl.clearStencil( stencil );
	    					currentStencilClear = stencil;

	    				}

	    			},

	    			reset: function () {

	    				locked = false;

	    				currentStencilMask = null;
	    				currentStencilFunc = null;
	    				currentStencilRef = null;
	    				currentStencilFuncMask = null;
	    				currentStencilFail = null;
	    				currentStencilZFail = null;
	    				currentStencilZPass = null;
	    				currentStencilClear = null;

	    			}

	    		};

	    	}

	    	//

	    	var colorBuffer = new ColorBuffer();
	    	var depthBuffer = new DepthBuffer();
	    	var stencilBuffer = new StencilBuffer();

	    	var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	    	var newAttributes = new Uint8Array( maxVertexAttributes );
	    	var enabledAttributes = new Uint8Array( maxVertexAttributes );
	    	var attributeDivisors = new Uint8Array( maxVertexAttributes );

	    	var capabilities = {};

	    	var compressedTextureFormats = null;

	    	var currentBlending = null;
	    	var currentBlendEquation = null;
	    	var currentBlendSrc = null;
	    	var currentBlendDst = null;
	    	var currentBlendEquationAlpha = null;
	    	var currentBlendSrcAlpha = null;
	    	var currentBlendDstAlpha = null;
	    	var currentPremultipledAlpha = false;

	    	var currentFlipSided = null;
	    	var currentCullFace = null;

	    	var currentLineWidth = null;

	    	var currentPolygonOffsetFactor = null;
	    	var currentPolygonOffsetUnits = null;

	    	var currentScissorTest = null;

	    	var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

	    	var currentTextureSlot = null;
	    	var currentBoundTextures = {};

	    	var currentScissor = new Vector4();
	    	var currentViewport = new Vector4();

	    	function createTexture( type, target, count ) {

	    		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
	    		var texture = gl.createTexture();

	    		gl.bindTexture( type, texture );
	    		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	    		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

	    		for ( var i = 0; i < count; i ++ ) {

	    			gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

	    		}

	    		return texture;

	    	}

	    	var emptyTextures = {};
	    	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
	    	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

	    	//

	    	function init() {

	    		clearColor( 0, 0, 0, 1 );
	    		clearDepth( 1 );
	    		clearStencil( 0 );

	    		enable( gl.DEPTH_TEST );
	    		setDepthFunc( LessEqualDepth );

	    		setFlipSided( false );
	    		setCullFace( CullFaceBack );
	    		enable( gl.CULL_FACE );

	    		enable( gl.BLEND );
	    		setBlending( NormalBlending );

	    	}

	    	function initAttributes() {

	    		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

	    			newAttributes[ i ] = 0;

	    		}

	    	}

	    	function enableAttribute( attribute ) {

	    		newAttributes[ attribute ] = 1;

	    		if ( enabledAttributes[ attribute ] === 0 ) {

	    			gl.enableVertexAttribArray( attribute );
	    			enabledAttributes[ attribute ] = 1;

	    		}

	    		if ( attributeDivisors[ attribute ] !== 0 ) {

	    			var extension = extensions.get( 'ANGLE_instanced_arrays' );

	    			extension.vertexAttribDivisorANGLE( attribute, 0 );
	    			attributeDivisors[ attribute ] = 0;

	    		}

	    	}

	    	function enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {

	    		newAttributes[ attribute ] = 1;

	    		if ( enabledAttributes[ attribute ] === 0 ) {

	    			gl.enableVertexAttribArray( attribute );
	    			enabledAttributes[ attribute ] = 1;

	    		}

	    		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

	    			extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
	    			attributeDivisors[ attribute ] = meshPerAttribute;

	    		}

	    	}

	    	function disableUnusedAttributes() {

	    		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

	    			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

	    				gl.disableVertexAttribArray( i );
	    				enabledAttributes[ i ] = 0;

	    			}

	    		}

	    	}

	    	function enable( id ) {

	    		if ( capabilities[ id ] !== true ) {

	    			gl.enable( id );
	    			capabilities[ id ] = true;

	    		}

	    	}

	    	function disable( id ) {

	    		if ( capabilities[ id ] !== false ) {

	    			gl.disable( id );
	    			capabilities[ id ] = false;

	    		}

	    	}

	    	function getCompressedTextureFormats() {

	    		if ( compressedTextureFormats === null ) {

	    			compressedTextureFormats = [];

	    			if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
	    			     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
	    			     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

	    				var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

	    				for ( var i = 0; i < formats.length; i ++ ) {

	    					compressedTextureFormats.push( formats[ i ] );

	    				}

	    			}

	    		}

	    		return compressedTextureFormats;

	    	}

	    	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

	    		if ( blending !== NoBlending ) {

	    			enable( gl.BLEND );

	    		} else {

	    			disable( gl.BLEND );
	    			currentBlending = blending; // no blending, that is
	    			return;

	    		}

	    		if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

	    			if ( blending === AdditiveBlending ) {

	    				if ( premultipliedAlpha ) {

	    					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
	    					gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

	    				} else {

	    					gl.blendEquation( gl.FUNC_ADD );
	    					gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

	    				}

	    			} else if ( blending === SubtractiveBlending ) {

	    				if ( premultipliedAlpha ) {

	    					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
	    					gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

	    				} else {

	    					gl.blendEquation( gl.FUNC_ADD );
	    					gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

	    				}

	    			} else if ( blending === MultiplyBlending ) {

	    				if ( premultipliedAlpha ) {

	    					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
	    					gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

	    				} else {

	    					gl.blendEquation( gl.FUNC_ADD );
	    					gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

	    				}

	    			} else {

	    				if ( premultipliedAlpha ) {

	    					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
	    					gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

	    				} else {

	    					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
	    					gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

	    				}

	    			}

	    			currentBlending = blending;
	    			currentPremultipledAlpha = premultipliedAlpha;

	    		}

	    		if ( blending === CustomBlending ) {

	    			blendEquationAlpha = blendEquationAlpha || blendEquation;
	    			blendSrcAlpha = blendSrcAlpha || blendSrc;
	    			blendDstAlpha = blendDstAlpha || blendDst;

	    			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

	    				gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

	    				currentBlendEquation = blendEquation;
	    				currentBlendEquationAlpha = blendEquationAlpha;

	    			}

	    			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

	    				gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

	    				currentBlendSrc = blendSrc;
	    				currentBlendDst = blendDst;
	    				currentBlendSrcAlpha = blendSrcAlpha;
	    				currentBlendDstAlpha = blendDstAlpha;

	    			}

	    		} else {

	    			currentBlendEquation = null;
	    			currentBlendSrc = null;
	    			currentBlendDst = null;
	    			currentBlendEquationAlpha = null;
	    			currentBlendSrcAlpha = null;
	    			currentBlendDstAlpha = null;

	    		}

	    	}

	    	// TODO Deprecate

	    	function setColorWrite( colorWrite ) {

	    		colorBuffer.setMask( colorWrite );

	    	}

	    	function setDepthTest( depthTest ) {

	    		depthBuffer.setTest( depthTest );

	    	}

	    	function setDepthWrite( depthWrite ) {

	    		depthBuffer.setMask( depthWrite );

	    	}

	    	function setDepthFunc( depthFunc ) {

	    		depthBuffer.setFunc( depthFunc );

	    	}

	    	function setStencilTest( stencilTest ) {

	    		stencilBuffer.setTest( stencilTest );

	    	}

	    	function setStencilWrite( stencilWrite ) {

	    		stencilBuffer.setMask( stencilWrite );

	    	}

	    	function setStencilFunc( stencilFunc, stencilRef, stencilMask ) {

	    		stencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );

	    	}

	    	function setStencilOp( stencilFail, stencilZFail, stencilZPass ) {

	    		stencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );

	    	}

	    	//

	    	function setFlipSided( flipSided ) {

	    		if ( currentFlipSided !== flipSided ) {

	    			if ( flipSided ) {

	    				gl.frontFace( gl.CW );

	    			} else {

	    				gl.frontFace( gl.CCW );

	    			}

	    			currentFlipSided = flipSided;

	    		}

	    	}

	    	function setCullFace( cullFace ) {

	    		if ( cullFace !== CullFaceNone ) {

	    			enable( gl.CULL_FACE );

	    			if ( cullFace !== currentCullFace ) {

	    				if ( cullFace === CullFaceBack ) {

	    					gl.cullFace( gl.BACK );

	    				} else if ( cullFace === CullFaceFront ) {

	    					gl.cullFace( gl.FRONT );

	    				} else {

	    					gl.cullFace( gl.FRONT_AND_BACK );

	    				}

	    			}

	    		} else {

	    			disable( gl.CULL_FACE );

	    		}

	    		currentCullFace = cullFace;

	    	}

	    	function setLineWidth( width ) {

	    		if ( width !== currentLineWidth ) {

	    			gl.lineWidth( width );

	    			currentLineWidth = width;

	    		}

	    	}

	    	function setPolygonOffset( polygonOffset, factor, units ) {

	    		if ( polygonOffset ) {

	    			enable( gl.POLYGON_OFFSET_FILL );

	    			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

	    				gl.polygonOffset( factor, units );

	    				currentPolygonOffsetFactor = factor;
	    				currentPolygonOffsetUnits = units;

	    			}

	    		} else {

	    			disable( gl.POLYGON_OFFSET_FILL );

	    		}

	    	}

	    	function getScissorTest() {

	    		return currentScissorTest;

	    	}

	    	function setScissorTest( scissorTest ) {

	    		currentScissorTest = scissorTest;

	    		if ( scissorTest ) {

	    			enable( gl.SCISSOR_TEST );

	    		} else {

	    			disable( gl.SCISSOR_TEST );

	    		}

	    	}

	    	// texture

	    	function activeTexture( webglSlot ) {

	    		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

	    		if ( currentTextureSlot !== webglSlot ) {

	    			gl.activeTexture( webglSlot );
	    			currentTextureSlot = webglSlot;

	    		}

	    	}

	    	function bindTexture( webglType, webglTexture ) {

	    		if ( currentTextureSlot === null ) {

	    			activeTexture();

	    		}

	    		var boundTexture = currentBoundTextures[ currentTextureSlot ];

	    		if ( boundTexture === undefined ) {

	    			boundTexture = { type: undefined, texture: undefined };
	    			currentBoundTextures[ currentTextureSlot ] = boundTexture;

	    		}

	    		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

	    			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

	    			boundTexture.type = webglType;
	    			boundTexture.texture = webglTexture;

	    		}

	    	}

	    	function compressedTexImage2D() {

	    		try {

	    			gl.compressedTexImage2D.apply( gl, arguments );

	    		} catch ( error ) {

	    			console.error( error );

	    		}

	    	}

	    	function texImage2D() {

	    		try {

	    			gl.texImage2D.apply( gl, arguments );

	    		} catch ( error ) {

	    			console.error( error );

	    		}

	    	}

	    	// TODO Deprecate

	    	function clearColor( r, g, b, a ) {

	    		colorBuffer.setClear( r, g, b, a );

	    	}

	    	function clearDepth( depth ) {

	    		depthBuffer.setClear( depth );

	    	}

	    	function clearStencil( stencil ) {

	    		stencilBuffer.setClear( stencil );

	    	}

	    	//

	    	function scissor( scissor ) {

	    		if ( currentScissor.equals( scissor ) === false ) {

	    			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
	    			currentScissor.copy( scissor );

	    		}

	    	}

	    	function viewport( viewport ) {

	    		if ( currentViewport.equals( viewport ) === false ) {

	    			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
	    			currentViewport.copy( viewport );

	    		}

	    	}

	    	//

	    	function reset() {

	    		for ( var i = 0; i < enabledAttributes.length; i ++ ) {

	    			if ( enabledAttributes[ i ] === 1 ) {

	    				gl.disableVertexAttribArray( i );
	    				enabledAttributes[ i ] = 0;

	    			}

	    		}

	    		capabilities = {};

	    		compressedTextureFormats = null;

	    		currentTextureSlot = null;
	    		currentBoundTextures = {};

	    		currentBlending = null;

	    		currentFlipSided = null;
	    		currentCullFace = null;

	    		colorBuffer.reset();
	    		depthBuffer.reset();
	    		stencilBuffer.reset();

	    	}

	    	return {

	    		buffers: {
	    			color: colorBuffer,
	    			depth: depthBuffer,
	    			stencil: stencilBuffer
	    		},

	    		init: init,
	    		initAttributes: initAttributes,
	    		enableAttribute: enableAttribute,
	    		enableAttributeAndDivisor: enableAttributeAndDivisor,
	    		disableUnusedAttributes: disableUnusedAttributes,
	    		enable: enable,
	    		disable: disable,
	    		getCompressedTextureFormats: getCompressedTextureFormats,

	    		setBlending: setBlending,

	    		setColorWrite: setColorWrite,
	    		setDepthTest: setDepthTest,
	    		setDepthWrite: setDepthWrite,
	    		setDepthFunc: setDepthFunc,
	    		setStencilTest: setStencilTest,
	    		setStencilWrite: setStencilWrite,
	    		setStencilFunc: setStencilFunc,
	    		setStencilOp: setStencilOp,

	    		setFlipSided: setFlipSided,
	    		setCullFace: setCullFace,

	    		setLineWidth: setLineWidth,
	    		setPolygonOffset: setPolygonOffset,

	    		getScissorTest: getScissorTest,
	    		setScissorTest: setScissorTest,

	    		activeTexture: activeTexture,
	    		bindTexture: bindTexture,
	    		compressedTexImage2D: compressedTexImage2D,
	    		texImage2D: texImage2D,

	    		clearColor: clearColor,
	    		clearDepth: clearDepth,
	    		clearStencil: clearStencil,

	    		scissor: scissor,
	    		viewport: viewport,

	    		reset: reset

	    	};

	    }

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function WebGLCapabilities( gl, extensions, parameters ) {

	    	var maxAnisotropy;

	    	function getMaxAnisotropy() {

	    		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

	    		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

	    		if ( extension !== null ) {

	    			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

	    		} else {

	    			maxAnisotropy = 0;

	    		}

	    		return maxAnisotropy;

	    	}

	    	function getMaxPrecision( precision ) {

	    		if ( precision === 'highp' ) {

	    			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
	    			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

	    				return 'highp';

	    			}

	    			precision = 'mediump';

	    		}

	    		if ( precision === 'mediump' ) {

	    			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
	    			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

	    				return 'mediump';

	    			}

	    		}

	    		return 'lowp';

	    	}

	    	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	    	var maxPrecision = getMaxPrecision( precision );

	    	if ( maxPrecision !== precision ) {

	    		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
	    		precision = maxPrecision;

	    	}

	    	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );

	    	var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	    	var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	    	var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
	    	var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	    	var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	    	var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
	    	var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
	    	var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

	    	var vertexTextures = maxVertexTextures > 0;
	    	var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
	    	var floatVertexTextures = vertexTextures && floatFragmentTextures;

	    	return {

	    		getMaxAnisotropy: getMaxAnisotropy,
	    		getMaxPrecision: getMaxPrecision,

	    		precision: precision,
	    		logarithmicDepthBuffer: logarithmicDepthBuffer,

	    		maxTextures: maxTextures,
	    		maxVertexTextures: maxVertexTextures,
	    		maxTextureSize: maxTextureSize,
	    		maxCubemapSize: maxCubemapSize,

	    		maxAttributes: maxAttributes,
	    		maxVertexUniforms: maxVertexUniforms,
	    		maxVaryings: maxVaryings,
	    		maxFragmentUniforms: maxFragmentUniforms,

	    		vertexTextures: vertexTextures,
	    		floatFragmentTextures: floatFragmentTextures,
	    		floatVertexTextures: floatVertexTextures

	    	};

	    }

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function WebGLExtensions( gl ) {

	    	var extensions = {};

	    	return {

	    		get: function ( name ) {

	    			if ( extensions[ name ] !== undefined ) {

	    				return extensions[ name ];

	    			}

	    			var extension;

	    			switch ( name ) {

	    				case 'WEBGL_depth_texture':
	    					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
	    					break;

	    				case 'EXT_texture_filter_anisotropic':
	    					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
	    					break;

	    				case 'WEBGL_compressed_texture_s3tc':
	    					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
	    					break;

	    				case 'WEBGL_compressed_texture_pvrtc':
	    					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
	    					break;

	    				case 'WEBGL_compressed_texture_etc1':
	    					extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
	    					break;

	    				default:
	    					extension = gl.getExtension( name );

	    			}

	    			if ( extension === null ) {

	    				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

	    			}

	    			extensions[ name ] = extension;

	    			return extension;

	    		}

	    	};

	    }

	    function WebGLClipping() {

	    	var scope = this,

	    		globalState = null,
	    		numGlobalPlanes = 0,
	    		localClippingEnabled = false,
	    		renderingShadows = false,

	    		plane = new Plane(),
	    		viewNormalMatrix = new Matrix3(),

	    		uniform = { value: null, needsUpdate: false };

	    	this.uniform = uniform;
	    	this.numPlanes = 0;

	    	this.init = function( planes, enableLocalClipping, camera ) {

	    		var enabled =
	    			planes.length !== 0 ||
	    			enableLocalClipping ||
	    			// enable state of previous frame - the clipping code has to
	    			// run another frame in order to reset the state:
	    			numGlobalPlanes !== 0 ||
	    			localClippingEnabled;

	    		localClippingEnabled = enableLocalClipping;

	    		globalState = projectPlanes( planes, camera, 0 );
	    		numGlobalPlanes = planes.length;

	    		return enabled;

	    	};

	    	this.beginShadows = function() {

	    		renderingShadows = true;
	    		projectPlanes( null );

	    	};

	    	this.endShadows = function() {

	    		renderingShadows = false;
	    		resetGlobalState();

	    	};

	    	this.setState = function( planes, clipShadows, camera, cache, fromCache ) {

	    		if ( ! localClippingEnabled ||
	    				planes === null || planes.length === 0 ||
	    				renderingShadows && ! clipShadows ) {
	    			// there's no local clipping

	    			if ( renderingShadows ) {
	    				// there's no global clipping

	    				projectPlanes( null );

	    			} else {

	    				resetGlobalState();
	    			}

	    		} else {

	    			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
	    				lGlobal = nGlobal * 4,

	    				dstArray = cache.clippingState || null;

	    			uniform.value = dstArray; // ensure unique state

	    			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

	    			for ( var i = 0; i !== lGlobal; ++ i ) {

	    				dstArray[ i ] = globalState[ i ];

	    			}

	    			cache.clippingState = dstArray;
	    			this.numPlanes += nGlobal;

	    		}


	    	};

	    	function resetGlobalState() {

	    		if ( uniform.value !== globalState ) {

	    			uniform.value = globalState;
	    			uniform.needsUpdate = numGlobalPlanes > 0;

	    		}

	    		scope.numPlanes = numGlobalPlanes;

	    	}

	    	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

	    		var nPlanes = planes !== null ? planes.length : 0,
	    			dstArray = null;

	    		if ( nPlanes !== 0 ) {

	    			dstArray = uniform.value;

	    			if ( skipTransform !== true || dstArray === null ) {

	    				var flatSize = dstOffset + nPlanes * 4,
	    					viewMatrix = camera.matrixWorldInverse;

	    				viewNormalMatrix.getNormalMatrix( viewMatrix );

	    				if ( dstArray === null || dstArray.length < flatSize ) {

	    					dstArray = new Float32Array( flatSize );

	    				}

	    				for ( var i = 0, i4 = dstOffset;
	    									i !== nPlanes; ++ i, i4 += 4 ) {

	    					plane.copy( planes[ i ] ).
	    							applyMatrix4( viewMatrix, viewNormalMatrix );

	    					plane.normal.toArray( dstArray, i4 );
	    					dstArray[ i4 + 3 ] = plane.constant;

	    				}

	    			}

	    			uniform.value = dstArray;
	    			uniform.needsUpdate = true;

	    		}

	    		scope.numPlanes = nPlanes;
	    		return dstArray;

	    	}

	    }

	    /**
	     * @author supereggbert / http://www.paulbrunt.co.uk/
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     * @author szimek / https://github.com/szimek/
	     * @author tschw
	     */

	    function WebGLRenderer( parameters ) {

	    	console.log( 'THREE.WebGLRenderer', REVISION );

	    	parameters = parameters || {};

	    	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
	    	_context = parameters.context !== undefined ? parameters.context : null,

	    	_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
	    	_depth = parameters.depth !== undefined ? parameters.depth : true,
	    	_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
	    	_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
	    	_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
	    	_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

	    	var lights = [];

	    	var opaqueObjects = [];
	    	var opaqueObjectsLastIndex = - 1;
	    	var transparentObjects = [];
	    	var transparentObjectsLastIndex = - 1;

	    	var morphInfluences = new Float32Array( 8 );

	    	var sprites = [];
	    	var lensFlares = [];

	    	// public properties

	    	this.domElement = _canvas;
	    	this.context = null;

	    	// clearing

	    	this.autoClear = true;
	    	this.autoClearColor = true;
	    	this.autoClearDepth = true;
	    	this.autoClearStencil = true;

	    	// scene graph

	    	this.sortObjects = true;

	    	// user-defined clipping

	    	this.clippingPlanes = [];
	    	this.localClippingEnabled = false;

	    	// physically based shading

	    	this.gammaFactor = 2.0;	// for backwards compatibility
	    	this.gammaInput = false;
	    	this.gammaOutput = false;

	    	// physical lights

	    	this.physicallyCorrectLights = false;

	    	// tone mapping

	    	this.toneMapping = LinearToneMapping;
	    	this.toneMappingExposure = 1.0;
	    	this.toneMappingWhitePoint = 1.0;

	    	// morphs

	    	this.maxMorphTargets = 8;
	    	this.maxMorphNormals = 4;

	    	// internal properties

	    	var _this = this,

	    	// internal state cache

	    	_currentProgram = null,
	    	_currentRenderTarget = null,
	    	_currentFramebuffer = null,
	    	_currentMaterialId = - 1,
	    	_currentGeometryProgram = '',
	    	_currentCamera = null,

	    	_currentScissor = new Vector4(),
	    	_currentScissorTest = null,

	    	_currentViewport = new Vector4(),

	    	//

	    	_usedTextureUnits = 0,

	    	//

	    	_clearColor = new Color( 0x000000 ),
	    	_clearAlpha = 0,

	    	_width = _canvas.width,
	    	_height = _canvas.height,

	    	_pixelRatio = 1,

	    	_scissor = new Vector4( 0, 0, _width, _height ),
	    	_scissorTest = false,

	    	_viewport = new Vector4( 0, 0, _width, _height ),

	    	// frustum

	    	_frustum = new Frustum(),

	    	// clipping

	    	_clipping = new WebGLClipping(),
	    	_clippingEnabled = false,
	    	_localClippingEnabled = false,

	    	_sphere = new Sphere(),

	    	// camera matrices cache

	    	_projScreenMatrix = new Matrix4(),

	    	_vector3 = new Vector3(),

	    	// light arrays cache

	    	_lights = {

	    		hash: '',

	    		ambient: [ 0, 0, 0 ],
	    		directional: [],
	    		directionalShadowMap: [],
	    		directionalShadowMatrix: [],
	    		spot: [],
	    		spotShadowMap: [],
	    		spotShadowMatrix: [],
	    		point: [],
	    		pointShadowMap: [],
	    		pointShadowMatrix: [],
	    		hemi: [],

	    		shadows: []

	    	},

	    	// info

	    	_infoRender = {

	    		calls: 0,
	    		vertices: 0,
	    		faces: 0,
	    		points: 0

	    	};

	    	this.info = {

	    		render: _infoRender,
	    		memory: {

	    			geometries: 0,
	    			textures: 0

	    		},
	    		programs: null

	    	};


	    	// initialize

	    	var _gl;

	    	try {

	    		var attributes = {
	    			alpha: _alpha,
	    			depth: _depth,
	    			stencil: _stencil,
	    			antialias: _antialias,
	    			premultipliedAlpha: _premultipliedAlpha,
	    			preserveDrawingBuffer: _preserveDrawingBuffer
	    		};

	    		_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

	    		if ( _gl === null ) {

	    			if ( _canvas.getContext( 'webgl' ) !== null ) {

	    				throw 'Error creating WebGL context with your selected attributes.';

	    			} else {

	    				throw 'Error creating WebGL context.';

	    			}

	    		}

	    		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

	    		if ( _gl.getShaderPrecisionFormat === undefined ) {

	    			_gl.getShaderPrecisionFormat = function () {

	    				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

	    			};

	    		}

	    		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

	    	} catch ( error ) {

	    		console.error( 'THREE.WebGLRenderer: ' + error );

	    	}

	    	var extensions = new WebGLExtensions( _gl );

	    	extensions.get( 'WEBGL_depth_texture' );
	    	extensions.get( 'OES_texture_float' );
	    	extensions.get( 'OES_texture_float_linear' );
	    	extensions.get( 'OES_texture_half_float' );
	    	extensions.get( 'OES_texture_half_float_linear' );
	    	extensions.get( 'OES_standard_derivatives' );
	    	extensions.get( 'ANGLE_instanced_arrays' );

	    	if ( extensions.get( 'OES_element_index_uint' ) ) {

	    		BufferGeometry.MaxIndex = 4294967296;

	    	}

	    	var capabilities = new WebGLCapabilities( _gl, extensions, parameters );

	    	var state = new WebGLState( _gl, extensions, paramThreeToGL );
	    	var properties = new WebGLProperties();
	    	var textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );
	    	var objects = new WebGLObjects( _gl, properties, this.info );
	    	var programCache = new WebGLPrograms( this, capabilities );
	    	var lightCache = new WebGLLights();

	    	this.info.programs = programCache.programs;

	    	var bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
	    	var indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

	    	//

	    	var backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
	    	var backgroundCamera2 = new PerspectiveCamera();
	    	var backgroundPlaneMesh = new Mesh(
	    		new PlaneBufferGeometry( 2, 2 ),
	    		new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
	    	);
	    	var backgroundBoxShader = ShaderLib[ 'cube' ];
	    	var backgroundBoxMesh = new Mesh(
	    		new BoxBufferGeometry( 5, 5, 5 ),
	    		new ShaderMaterial( {
	    			uniforms: backgroundBoxShader.uniforms,
	    			vertexShader: backgroundBoxShader.vertexShader,
	    			fragmentShader: backgroundBoxShader.fragmentShader,
	    			side: BackSide,
	    			depthTest: false,
	    			depthWrite: false,
	    			fog: false
	    		} )
	    	);

	    	//

	    	function getTargetPixelRatio() {

	    		return _currentRenderTarget === null ? _pixelRatio : 1;

	    	}

	    	function glClearColor( r, g, b, a ) {

	    		if ( _premultipliedAlpha === true ) {

	    			r *= a; g *= a; b *= a;

	    		}

	    		state.clearColor( r, g, b, a );

	    	}

	    	function setDefaultGLState() {

	    		state.init();

	    		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
	    		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

	    		glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	    	}

	    	function resetGLState() {

	    		_currentProgram = null;
	    		_currentCamera = null;

	    		_currentGeometryProgram = '';
	    		_currentMaterialId = - 1;

	    		state.reset();

	    	}

	    	setDefaultGLState();

	    	this.context = _gl;
	    	this.capabilities = capabilities;
	    	this.extensions = extensions;
	    	this.properties = properties;
	    	this.state = state;

	    	// shadow map

	    	var shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );

	    	this.shadowMap = shadowMap;


	    	// Plugins

	    	var spritePlugin = new SpritePlugin( this, sprites );
	    	var lensFlarePlugin = new LensFlarePlugin( this, lensFlares );

	    	// API

	    	this.getContext = function () {

	    		return _gl;

	    	};

	    	this.getContextAttributes = function () {

	    		return _gl.getContextAttributes();

	    	};

	    	this.forceContextLoss = function () {

	    		extensions.get( 'WEBGL_lose_context' ).loseContext();

	    	};

	    	this.getMaxAnisotropy = function () {

	    		return capabilities.getMaxAnisotropy();

	    	};

	    	this.getPrecision = function () {

	    		return capabilities.precision;

	    	};

	    	this.getPixelRatio = function () {

	    		return _pixelRatio;

	    	};

	    	this.setPixelRatio = function ( value ) {

	    		if ( value === undefined ) return;

	    		_pixelRatio = value;

	    		this.setSize( _viewport.z, _viewport.w, false );

	    	};

	    	this.getSize = function () {

	    		return {
	    			width: _width,
	    			height: _height
	    		};

	    	};

	    	this.setSize = function ( width, height, updateStyle ) {

	    		_width = width;
	    		_height = height;

	    		_canvas.width = width * _pixelRatio;
	    		_canvas.height = height * _pixelRatio;

	    		if ( updateStyle !== false ) {

	    			_canvas.style.width = width + 'px';
	    			_canvas.style.height = height + 'px';

	    		}

	    		this.setViewport( 0, 0, width, height );

	    	};

	    	this.setViewport = function ( x, y, width, height ) {

	    		state.viewport( _viewport.set( x, y, width, height ) );

	    	};

	    	this.setScissor = function ( x, y, width, height ) {

	    		state.scissor( _scissor.set( x, y, width, height ) );

	    	};

	    	this.setScissorTest = function ( boolean ) {

	    		state.setScissorTest( _scissorTest = boolean );

	    	};

	    	// Clearing

	    	this.getClearColor = function () {

	    		return _clearColor;

	    	};

	    	this.setClearColor = function ( color, alpha ) {

	    		_clearColor.set( color );

	    		_clearAlpha = alpha !== undefined ? alpha : 1;

	    		glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	    	};

	    	this.getClearAlpha = function () {

	    		return _clearAlpha;

	    	};

	    	this.setClearAlpha = function ( alpha ) {

	    		_clearAlpha = alpha;

	    		glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	    	};

	    	this.clear = function ( color, depth, stencil ) {

	    		var bits = 0;

	    		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
	    		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
	    		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

	    		_gl.clear( bits );

	    	};

	    	this.clearColor = function () {

	    		this.clear( true, false, false );

	    	};

	    	this.clearDepth = function () {

	    		this.clear( false, true, false );

	    	};

	    	this.clearStencil = function () {

	    		this.clear( false, false, true );

	    	};

	    	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

	    		this.setRenderTarget( renderTarget );
	    		this.clear( color, depth, stencil );

	    	};

	    	// Reset

	    	this.resetGLState = resetGLState;

	    	this.dispose = function() {

	    		transparentObjects = [];
	    		transparentObjectsLastIndex = -1;
	    		opaqueObjects = [];
	    		opaqueObjectsLastIndex = -1;

	    		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

	    	};

	    	// Events

	    	function onContextLost( event ) {

	    		event.preventDefault();

	    		resetGLState();
	    		setDefaultGLState();

	    		properties.clear();

	    	}

	    	function onMaterialDispose( event ) {

	    		var material = event.target;

	    		material.removeEventListener( 'dispose', onMaterialDispose );

	    		deallocateMaterial( material );

	    	}

	    	// Buffer deallocation

	    	function deallocateMaterial( material ) {

	    		releaseMaterialProgramReference( material );

	    		properties.delete( material );

	    	}


	    	function releaseMaterialProgramReference( material ) {

	    		var programInfo = properties.get( material ).program;

	    		material.program = undefined;

	    		if ( programInfo !== undefined ) {

	    			programCache.releaseProgram( programInfo );

	    		}

	    	}

	    	// Buffer rendering

	    	this.renderBufferImmediate = function ( object, program, material ) {

	    		state.initAttributes();

	    		var buffers = properties.get( object );

	    		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
	    		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
	    		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
	    		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

	    		var attributes = program.getAttributes();

	    		if ( object.hasPositions ) {

	    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
	    			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

	    			state.enableAttribute( attributes.position );
	    			_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

	    		}

	    		if ( object.hasNormals ) {

	    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

	    			if ( ! material.isMeshPhongMaterial &&
	    			     ! material.isMeshStandardMaterial &&
	    			       material.shading === FlatShading ) {

	    				for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

	    					var array = object.normalArray;

	    					var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
	    					var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
	    					var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

	    					array[ i + 0 ] = nx;
	    					array[ i + 1 ] = ny;
	    					array[ i + 2 ] = nz;

	    					array[ i + 3 ] = nx;
	    					array[ i + 4 ] = ny;
	    					array[ i + 5 ] = nz;

	    					array[ i + 6 ] = nx;
	    					array[ i + 7 ] = ny;
	    					array[ i + 8 ] = nz;

	    				}

	    			}

	    			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

	    			state.enableAttribute( attributes.normal );

	    			_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

	    		}

	    		if ( object.hasUvs && material.map ) {

	    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
	    			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

	    			state.enableAttribute( attributes.uv );

	    			_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

	    		}

	    		if ( object.hasColors && material.vertexColors !== NoColors ) {

	    			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
	    			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

	    			state.enableAttribute( attributes.color );

	    			_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

	    		}

	    		state.disableUnusedAttributes();

	    		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

	    		object.count = 0;

	    	};

	    	this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

	    		setMaterial( material );

	    		var program = setProgram( camera, fog, material, object );

	    		var updateBuffers = false;
	    		var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

	    		if ( geometryProgram !== _currentGeometryProgram ) {

	    			_currentGeometryProgram = geometryProgram;
	    			updateBuffers = true;

	    		}

	    		// morph targets

	    		var morphTargetInfluences = object.morphTargetInfluences;

	    		if ( morphTargetInfluences !== undefined ) {

	    			var activeInfluences = [];

	    			for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

	    				var influence = morphTargetInfluences[ i ];
	    				activeInfluences.push( [ influence, i ] );

	    			}

	    			activeInfluences.sort( absNumericalSort );

	    			if ( activeInfluences.length > 8 ) {

	    				activeInfluences.length = 8;

	    			}

	    			var morphAttributes = geometry.morphAttributes;

	    			for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

	    				var influence = activeInfluences[ i ];
	    				morphInfluences[ i ] = influence[ 0 ];

	    				if ( influence[ 0 ] !== 0 ) {

	    					var index = influence[ 1 ];

	    					if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
	    					if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

	    				} else {

	    					if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
	    					if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

	    				}

	    			}

	    			for ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {

	    				morphInfluences[ i ] = 0.0;

	    			}

	    			program.getUniforms().setValue(
	    					_gl, 'morphTargetInfluences', morphInfluences );

	    			updateBuffers = true;

	    		}

	    		//

	    		var index = geometry.index;
	    		var position = geometry.attributes.position;
	    		var rangeFactor = 1;

	    		if ( material.wireframe === true ) {

	    			index = objects.getWireframeAttribute( geometry );
	    			rangeFactor = 2;

	    		}

	    		var renderer;

	    		if ( index !== null ) {

	    			renderer = indexedBufferRenderer;
	    			renderer.setIndex( index );

	    		} else {

	    			renderer = bufferRenderer;

	    		}

	    		if ( updateBuffers ) {

	    			setupVertexAttributes( material, program, geometry );

	    			if ( index !== null ) {

	    				_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

	    			}

	    		}

	    		//

	    		var dataCount = 0;

	    		if ( index !== null ) {

	    			dataCount = index.count;

	    		} else if ( position !== undefined ) {

	    			dataCount = position.count;

	    		}

	    		var rangeStart = geometry.drawRange.start * rangeFactor;
	    		var rangeCount = geometry.drawRange.count * rangeFactor;

	    		var groupStart = group !== null ? group.start * rangeFactor : 0;
	    		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

	    		var drawStart = Math.max( rangeStart, groupStart );
	    		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

	    		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

	    		if ( drawCount === 0 ) return;

	    		//

	    		if ( object.isMesh ) {

	    			if ( material.wireframe === true ) {

	    				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
	    				renderer.setMode( _gl.LINES );

	    			} else {

	    				switch ( object.drawMode ) {

	    					case TrianglesDrawMode:
	    						renderer.setMode( _gl.TRIANGLES );
	    						break;

	    					case TriangleStripDrawMode:
	    						renderer.setMode( _gl.TRIANGLE_STRIP );
	    						break;

	    					case TriangleFanDrawMode:
	    						renderer.setMode( _gl.TRIANGLE_FAN );
	    						break;

	    				}

	    			}


	    		} else if ( object.isLine ) {

	    			var lineWidth = material.linewidth;

	    			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

	    			state.setLineWidth( lineWidth * getTargetPixelRatio() );

	    			if ( object.isLineSegments ) {

	    				renderer.setMode( _gl.LINES );

	    			} else {

	    				renderer.setMode( _gl.LINE_STRIP );

	    			}

	    		} else if ( object.isPoints ) {

	    			renderer.setMode( _gl.POINTS );

	    		}

	    		if ( geometry && geometry.isInstancedBufferGeometry ) {

	    			if ( geometry.maxInstancedCount > 0 ) {

	    				renderer.renderInstances( geometry, drawStart, drawCount );

	    			}

	    		} else {

	    			renderer.render( drawStart, drawCount );

	    		}

	    	};

	    	function setupVertexAttributes( material, program, geometry, startIndex ) {

	    		var extension;

	    		if ( geometry && geometry.isInstancedBufferGeometry ) {

	    			extension = extensions.get( 'ANGLE_instanced_arrays' );

	    			if ( extension === null ) {

	    				console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
	    				return;

	    			}

	    		}

	    		if ( startIndex === undefined ) startIndex = 0;

	    		state.initAttributes();

	    		var geometryAttributes = geometry.attributes;

	    		var programAttributes = program.getAttributes();

	    		var materialDefaultAttributeValues = material.defaultAttributeValues;

	    		for ( var name in programAttributes ) {

	    			var programAttribute = programAttributes[ name ];

	    			if ( programAttribute >= 0 ) {

	    				var geometryAttribute = geometryAttributes[ name ];

	    				if ( geometryAttribute !== undefined ) {

	    					var type = _gl.FLOAT;
	    					var array = geometryAttribute.array;
	    					var normalized = geometryAttribute.normalized;

	    					if ( array instanceof Float32Array ) {

	    						type = _gl.FLOAT;

	    					} else if ( array instanceof Float64Array ) {

	    						console.warn( "Unsupported data buffer format: Float64Array" );

	    					} else if ( array instanceof Uint16Array ) {

	    						type = _gl.UNSIGNED_SHORT;

	    					} else if ( array instanceof Int16Array ) {

	    						type = _gl.SHORT;

	    					} else if ( array instanceof Uint32Array ) {

	    						type = _gl.UNSIGNED_INT;

	    					} else if ( array instanceof Int32Array ) {

	    						type = _gl.INT;

	    					} else if ( array instanceof Int8Array ) {

	    						type = _gl.BYTE;

	    					} else if ( array instanceof Uint8Array ) {

	    						type = _gl.UNSIGNED_BYTE;

	    					}

	    					var size = geometryAttribute.itemSize;
	    					var buffer = objects.getAttributeBuffer( geometryAttribute );

	    					if ( geometryAttribute && geometryAttribute.isInterleavedBufferAttribute ) {

	    						var data = geometryAttribute.data;
	    						var stride = data.stride;
	    						var offset = geometryAttribute.offset;

	    						if ( data && data.isInstancedInterleavedBuffer ) {

	    							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

	    							if ( geometry.maxInstancedCount === undefined ) {

	    								geometry.maxInstancedCount = data.meshPerAttribute * data.count;

	    							}

	    						} else {

	    							state.enableAttribute( programAttribute );

	    						}

	    						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
	    						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

	    					} else {

	    						if ( geometryAttribute && geometryAttribute.isInstancedBufferAttribute ) {

	    							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

	    							if ( geometry.maxInstancedCount === undefined ) {

	    								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

	    							}

	    						} else {

	    							state.enableAttribute( programAttribute );

	    						}

	    						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
	    						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );

	    					}

	    				} else if ( materialDefaultAttributeValues !== undefined ) {

	    					var value = materialDefaultAttributeValues[ name ];

	    					if ( value !== undefined ) {

	    						switch ( value.length ) {

	    							case 2:
	    								_gl.vertexAttrib2fv( programAttribute, value );
	    								break;

	    							case 3:
	    								_gl.vertexAttrib3fv( programAttribute, value );
	    								break;

	    							case 4:
	    								_gl.vertexAttrib4fv( programAttribute, value );
	    								break;

	    							default:
	    								_gl.vertexAttrib1fv( programAttribute, value );

	    						}

	    					}

	    				}

	    			}

	    		}

	    		state.disableUnusedAttributes();

	    	}

	    	// Sorting

	    	function absNumericalSort( a, b ) {

	    		return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

	    	}

	    	function painterSortStable( a, b ) {

	    		if ( a.object.renderOrder !== b.object.renderOrder ) {

	    			return a.object.renderOrder - b.object.renderOrder;

	    		} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {

	    			return a.material.program.id - b.material.program.id;

	    		} else if ( a.material.id !== b.material.id ) {

	    			return a.material.id - b.material.id;

	    		} else if ( a.z !== b.z ) {

	    			return a.z - b.z;

	    		} else {

	    			return a.id - b.id;

	    		}

	    	}

	    	function reversePainterSortStable( a, b ) {

	    		if ( a.object.renderOrder !== b.object.renderOrder ) {

	    			return a.object.renderOrder - b.object.renderOrder;

	    		} if ( a.z !== b.z ) {

	    			return b.z - a.z;

	    		} else {

	    			return a.id - b.id;

	    		}

	    	}

	    	// Rendering

	    	this.render = function ( scene, camera, renderTarget, forceClear ) {

	    		if ( camera !== undefined && camera.isCamera !== true ) {

	    			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
	    			return;

	    		}

	    		var fog = scene.fog;

	    		// reset caching for this frame

	    		_currentGeometryProgram = '';
	    		_currentMaterialId = - 1;
	    		_currentCamera = null;

	    		// update scene graph

	    		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

	    		// update camera matrices and frustum

	    		if ( camera.parent === null ) camera.updateMatrixWorld();

	    		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

	    		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
	    		_frustum.setFromMatrix( _projScreenMatrix );

	    		lights.length = 0;

	    		opaqueObjectsLastIndex = - 1;
	    		transparentObjectsLastIndex = - 1;

	    		sprites.length = 0;
	    		lensFlares.length = 0;

	    		_localClippingEnabled = this.localClippingEnabled;
	    		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

	    		projectObject( scene, camera );

	    		opaqueObjects.length = opaqueObjectsLastIndex + 1;
	    		transparentObjects.length = transparentObjectsLastIndex + 1;

	    		if ( _this.sortObjects === true ) {

	    			opaqueObjects.sort( painterSortStable );
	    			transparentObjects.sort( reversePainterSortStable );

	    		}

	    		//

	    		if ( _clippingEnabled ) _clipping.beginShadows();

	    		setupShadows( lights );

	    		shadowMap.render( scene, camera );

	    		setupLights( lights, camera );

	    		if ( _clippingEnabled ) _clipping.endShadows();

	    		//

	    		_infoRender.calls = 0;
	    		_infoRender.vertices = 0;
	    		_infoRender.faces = 0;
	    		_infoRender.points = 0;

	    		if ( renderTarget === undefined ) {

	    			renderTarget = null;

	    		}

	    		this.setRenderTarget( renderTarget );

	    		//

	    		var background = scene.background;

	    		if ( background === null ) {

	    			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	    		} else if ( background && background.isColor ) {

	    			glClearColor( background.r, background.g, background.b, 1 );
	    			forceClear = true;

	    		}

	    		if ( this.autoClear || forceClear ) {

	    			this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

	    		}

	    		if ( background && background.isCubeTexture ) {

	    			backgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );

	    			backgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );
	    			backgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );

	    			backgroundBoxMesh.material.uniforms[ "tCube" ].value = background;
	    			backgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );

	    			objects.update( backgroundBoxMesh );

	    			_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );

	    		} else if ( background && background.isTexture ) {

	    			backgroundPlaneMesh.material.map = background;

	    			objects.update( backgroundPlaneMesh );

	    			_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );

	    		}

	    		//

	    		if ( scene.overrideMaterial ) {

	    			var overrideMaterial = scene.overrideMaterial;

	    			renderObjects( opaqueObjects, camera, fog, overrideMaterial );
	    			renderObjects( transparentObjects, camera, fog, overrideMaterial );

	    		} else {

	    			// opaque pass (front-to-back order)

	    			state.setBlending( NoBlending );
	    			renderObjects( opaqueObjects, camera, fog );

	    			// transparent pass (back-to-front order)

	    			renderObjects( transparentObjects, camera, fog );

	    		}

	    		// custom render plugins (post pass)

	    		spritePlugin.render( scene, camera );
	    		lensFlarePlugin.render( scene, camera, _currentViewport );

	    		// Generate mipmap if we're using any kind of mipmap filtering

	    		if ( renderTarget ) {

	    			textures.updateRenderTargetMipmap( renderTarget );

	    		}

	    		// Ensure depth buffer writing is enabled so it can be cleared on next render

	    		state.setDepthTest( true );
	    		state.setDepthWrite( true );
	    		state.setColorWrite( true );

	    		// _gl.finish();

	    	};

	    	function pushRenderItem( object, geometry, material, z, group ) {

	    		var array, index;

	    		// allocate the next position in the appropriate array

	    		if ( material.transparent ) {

	    			array = transparentObjects;
	    			index = ++ transparentObjectsLastIndex;

	    		} else {

	    			array = opaqueObjects;
	    			index = ++ opaqueObjectsLastIndex;

	    		}

	    		// recycle existing render item or grow the array

	    		var renderItem = array[ index ];

	    		if ( renderItem !== undefined ) {

	    			renderItem.id = object.id;
	    			renderItem.object = object;
	    			renderItem.geometry = geometry;
	    			renderItem.material = material;
	    			renderItem.z = _vector3.z;
	    			renderItem.group = group;

	    		} else {

	    			renderItem = {
	    				id: object.id,
	    				object: object,
	    				geometry: geometry,
	    				material: material,
	    				z: _vector3.z,
	    				group: group
	    			};

	    			// assert( index === array.length );
	    			array.push( renderItem );

	    		}

	    	}

	    	// TODO Duplicated code (Frustum)

	    	function isObjectViewable( object ) {

	    		var geometry = object.geometry;

	    		if ( geometry.boundingSphere === null )
	    			geometry.computeBoundingSphere();

	    		_sphere.copy( geometry.boundingSphere ).
	    			applyMatrix4( object.matrixWorld );

	    		return isSphereViewable( _sphere );

	    	}

	    	function isSpriteViewable( sprite ) {

	    		_sphere.center.set( 0, 0, 0 );
	    		_sphere.radius = 0.7071067811865476;
	    		_sphere.applyMatrix4( sprite.matrixWorld );

	    		return isSphereViewable( _sphere );

	    	}

	    	function isSphereViewable( sphere ) {

	    		if ( ! _frustum.intersectsSphere( sphere ) ) return false;

	    		var numPlanes = _clipping.numPlanes;

	    		if ( numPlanes === 0 ) return true;

	    		var planes = _this.clippingPlanes,

	    			center = sphere.center,
	    			negRad = - sphere.radius,
	    			i = 0;

	    		do {

	    			// out when deeper than radius in the negative halfspace
	    			if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

	    		} while ( ++ i !== numPlanes );

	    		return true;

	    	}

	    	function projectObject( object, camera ) {

	    		if ( object.visible === false ) return;

	    		var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

	    		if ( visible ) {

	    			if ( object.isLight ) {

	    				lights.push( object );

	    			} else if ( object.isSprite ) {

	    				if ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {

	    					sprites.push( object );

	    				}

	    			} else if ( object.isLensFlare ) {

	    				lensFlares.push( object );

	    			} else if ( object.isImmediateRenderObject ) {

	    				if ( _this.sortObjects === true ) {

	    					_vector3.setFromMatrixPosition( object.matrixWorld );
	    					_vector3.applyProjection( _projScreenMatrix );

	    				}

	    				pushRenderItem( object, null, object.material, _vector3.z, null );

	    			} else if ( object.isMesh || object.isLine || object.isPoints ) {

	    				if ( object.isSkinnedMesh ) {

	    					object.skeleton.update();

	    				}

	    				if ( object.frustumCulled === false || isObjectViewable( object ) === true ) {

	    					var material = object.material;

	    					if ( material.visible === true ) {

	    						if ( _this.sortObjects === true ) {

	    							_vector3.setFromMatrixPosition( object.matrixWorld );
	    							_vector3.applyProjection( _projScreenMatrix );

	    						}

	    						var geometry = objects.update( object );

	    						if ( material.isMultiMaterial ) {

	    							var groups = geometry.groups;
	    							var materials = material.materials;

	    							for ( var i = 0, l = groups.length; i < l; i ++ ) {

	    								var group = groups[ i ];
	    								var groupMaterial = materials[ group.materialIndex ];

	    								if ( groupMaterial.visible === true ) {

	    									pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

	    								}

	    							}

	    						} else {

	    							pushRenderItem( object, geometry, material, _vector3.z, null );

	    						}

	    					}

	    				}

	    			}

	    		}

	    		var children = object.children;

	    		for ( var i = 0, l = children.length; i < l; i ++ ) {

	    			projectObject( children[ i ], camera );

	    		}

	    	}

	    	function renderObjects( renderList, camera, fog, overrideMaterial ) {

	    		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

	    			var renderItem = renderList[ i ];

	    			var object = renderItem.object;
	    			var geometry = renderItem.geometry;
	    			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
	    			var group = renderItem.group;

	    			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
	    			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

	    			if ( object.isImmediateRenderObject ) {

	    				setMaterial( material );

	    				var program = setProgram( camera, fog, material, object );

	    				_currentGeometryProgram = '';

	    				object.render( function ( object ) {

	    					_this.renderBufferImmediate( object, program, material );

	    				} );

	    			} else {

	    				if ( object.onBeforeRender !== null ) object.onBeforeRender();

	    				_this.renderBufferDirect( camera, fog, geometry, material, object, group );

	    			}

	    		}

	    	}

	    	function initMaterial( material, fog, object ) {

	    		var materialProperties = properties.get( material );

	    		var parameters = programCache.getParameters(
	    				material, _lights, fog, _clipping.numPlanes, object );

	    		var code = programCache.getProgramCode( material, parameters );

	    		var program = materialProperties.program;
	    		var programChange = true;

	    		if ( program === undefined ) {

	    			// new material
	    			material.addEventListener( 'dispose', onMaterialDispose );

	    		} else if ( program.code !== code ) {

	    			// changed glsl or parameters
	    			releaseMaterialProgramReference( material );

	    		} else if ( parameters.shaderID !== undefined ) {

	    			// same glsl and uniform list
	    			return;

	    		} else {

	    			// only rebuild uniform list
	    			programChange = false;

	    		}

	    		if ( programChange ) {

	    			if ( parameters.shaderID ) {

	    				var shader = ShaderLib[ parameters.shaderID ];

	    				materialProperties.__webglShader = {
	    					name: material.type,
	    					uniforms: exports.UniformsUtils.clone( shader.uniforms ),
	    					vertexShader: shader.vertexShader,
	    					fragmentShader: shader.fragmentShader
	    				};

	    			} else {

	    				materialProperties.__webglShader = {
	    					name: material.type,
	    					uniforms: material.uniforms,
	    					vertexShader: material.vertexShader,
	    					fragmentShader: material.fragmentShader
	    				};

	    			}

	    			material.__webglShader = materialProperties.__webglShader;

	    			program = programCache.acquireProgram( material, parameters, code );

	    			materialProperties.program = program;
	    			material.program = program;

	    		}

	    		var attributes = program.getAttributes();

	    		if ( material.morphTargets ) {

	    			material.numSupportedMorphTargets = 0;

	    			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

	    				if ( attributes[ 'morphTarget' + i ] >= 0 ) {

	    					material.numSupportedMorphTargets ++;

	    				}

	    			}

	    		}

	    		if ( material.morphNormals ) {

	    			material.numSupportedMorphNormals = 0;

	    			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

	    				if ( attributes[ 'morphNormal' + i ] >= 0 ) {

	    					material.numSupportedMorphNormals ++;

	    				}

	    			}

	    		}

	    		var uniforms = materialProperties.__webglShader.uniforms;

	    		if ( ! material.isShaderMaterial &&
	    		     ! material.isRawShaderMaterial ||
	    		       material.clipping === true ) {

	    			materialProperties.numClippingPlanes = _clipping.numPlanes;
	    			uniforms.clippingPlanes = _clipping.uniform;

	    		}

	    		materialProperties.fog = fog;

	    		// store the light setup it was created for

	    		materialProperties.lightsHash = _lights.hash;

	    		if ( material.lights ) {

	    			// wire up the material to this renderer's lighting state

	    			uniforms.ambientLightColor.value = _lights.ambient;
	    			uniforms.directionalLights.value = _lights.directional;
	    			uniforms.spotLights.value = _lights.spot;
	    			uniforms.pointLights.value = _lights.point;
	    			uniforms.hemisphereLights.value = _lights.hemi;

	    			uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
	    			uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
	    			uniforms.spotShadowMap.value = _lights.spotShadowMap;
	    			uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
	    			uniforms.pointShadowMap.value = _lights.pointShadowMap;
	    			uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;

	    		}

	    		var progUniforms = materialProperties.program.getUniforms(),
	    			uniformsList =
	    					WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

	    		materialProperties.uniformsList = uniformsList;
	    		materialProperties.dynamicUniforms =
	    				WebGLUniforms.splitDynamic( uniformsList, uniforms );

	    	}

	    	function setMaterial( material ) {

	    		material.side === DoubleSide
	    			? state.disable( _gl.CULL_FACE )
	    			: state.enable( _gl.CULL_FACE );

	    		state.setFlipSided( material.side === BackSide );

	    		material.transparent === true
	    			? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
	    			: state.setBlending( NoBlending );

	    		state.setDepthFunc( material.depthFunc );
	    		state.setDepthTest( material.depthTest );
	    		state.setDepthWrite( material.depthWrite );
	    		state.setColorWrite( material.colorWrite );
	    		state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

	    	}

	    	function setProgram( camera, fog, material, object ) {

	    		_usedTextureUnits = 0;

	    		var materialProperties = properties.get( material );

	    		if ( _clippingEnabled ) {

	    			if ( _localClippingEnabled || camera !== _currentCamera ) {

	    				var useCache =
	    						camera === _currentCamera &&
	    						material.id === _currentMaterialId;

	    				// we might want to call this function with some ClippingGroup
	    				// object instead of the material, once it becomes feasible
	    				// (#8465, #8379)
	    				_clipping.setState(
	    						material.clippingPlanes, material.clipShadows,
	    						camera, materialProperties, useCache );

	    			}

	    		}

	    		if ( material.needsUpdate === false ) {

	    			if ( materialProperties.program === undefined ) {

	    				material.needsUpdate = true;

	    			} else if ( material.fog && materialProperties.fog !== fog ) {

	    				material.needsUpdate = true;

	    			} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {

	    				material.needsUpdate = true;

	    			} else if ( materialProperties.numClippingPlanes !== undefined &&
	    				materialProperties.numClippingPlanes !== _clipping.numPlanes ) {

	    				material.needsUpdate = true;

	    			}

	    		}

	    		if ( material.needsUpdate ) {

	    			initMaterial( material, fog, object );
	    			material.needsUpdate = false;

	    		}

	    		var refreshProgram = false;
	    		var refreshMaterial = false;
	    		var refreshLights = false;

	    		var program = materialProperties.program,
	    			p_uniforms = program.getUniforms(),
	    			m_uniforms = materialProperties.__webglShader.uniforms;

	    		if ( program.id !== _currentProgram ) {

	    			_gl.useProgram( program.program );
	    			_currentProgram = program.id;

	    			refreshProgram = true;
	    			refreshMaterial = true;
	    			refreshLights = true;

	    		}

	    		if ( material.id !== _currentMaterialId ) {

	    			_currentMaterialId = material.id;

	    			refreshMaterial = true;

	    		}

	    		if ( refreshProgram || camera !== _currentCamera ) {

	    			p_uniforms.set( _gl, camera, 'projectionMatrix' );

	    			if ( capabilities.logarithmicDepthBuffer ) {

	    				p_uniforms.setValue( _gl, 'logDepthBufFC',
	    						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

	    			}


	    			if ( camera !== _currentCamera ) {

	    				_currentCamera = camera;

	    				// lighting uniforms depend on the camera so enforce an update
	    				// now, in case this material supports lights - or later, when
	    				// the next material that does gets activated:

	    				refreshMaterial = true;		// set to true on material change
	    				refreshLights = true;		// remains set until update done

	    			}

	    			// load material specific uniforms
	    			// (shader material also gets them for the sake of genericity)

	    			if ( material.isShaderMaterial ||
	    			     material.isMeshPhongMaterial ||
	    			     material.isMeshStandardMaterial ||
	    			     material.envMap ) {

	    				var uCamPos = p_uniforms.map.cameraPosition;

	    				if ( uCamPos !== undefined ) {

	    					uCamPos.setValue( _gl,
	    							_vector3.setFromMatrixPosition( camera.matrixWorld ) );

	    				}

	    			}

	    			if ( material.isMeshPhongMaterial ||
	    			     material.isMeshLambertMaterial ||
	    			     material.isMeshBasicMaterial ||
	    			     material.isMeshStandardMaterial ||
	    			     material.isShaderMaterial ||
	    			     material.skinning ) {

	    				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

	    			}

	    			p_uniforms.set( _gl, _this, 'toneMappingExposure' );
	    			p_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );

	    		}

	    		// skinning uniforms must be set even if material didn't change
	    		// auto-setting of texture unit for bone texture must go before other textures
	    		// not sure why, but otherwise weird things happen

	    		if ( material.skinning ) {

	    			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
	    			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

	    			var skeleton = object.skeleton;

	    			if ( skeleton ) {

	    				if ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {

	    					p_uniforms.set( _gl, skeleton, 'boneTexture' );
	    					p_uniforms.set( _gl, skeleton, 'boneTextureWidth' );
	    					p_uniforms.set( _gl, skeleton, 'boneTextureHeight' );

	    				} else {

	    					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

	    				}

	    			}

	    		}

	    		if ( refreshMaterial ) {

	    			if ( material.lights ) {

	    				// the current material requires lighting info

	    				// note: all lighting uniforms are always set correctly
	    				// they simply reference the renderer's state for their
	    				// values
	    				//
	    				// use the current material's .needsUpdate flags to set
	    				// the GL state when required

	    				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

	    			}

	    			// refresh uniforms common to several materials

	    			if ( fog && material.fog ) {

	    				refreshUniformsFog( m_uniforms, fog );

	    			}

	    			if ( material.isMeshBasicMaterial ||
	    			     material.isMeshLambertMaterial ||
	    			     material.isMeshPhongMaterial ||
	    			     material.isMeshStandardMaterial ||
	    			     material.isMeshDepthMaterial ) {

	    				refreshUniformsCommon( m_uniforms, material );

	    			}

	    			// refresh single material specific uniforms

	    			if ( material.isLineBasicMaterial ) {

	    				refreshUniformsLine( m_uniforms, material );

	    			} else if ( material.isLineDashedMaterial ) {

	    				refreshUniformsLine( m_uniforms, material );
	    				refreshUniformsDash( m_uniforms, material );

	    			} else if ( material.isPointsMaterial ) {

	    				refreshUniformsPoints( m_uniforms, material );

	    			} else if ( material.isMeshLambertMaterial ) {

	    				refreshUniformsLambert( m_uniforms, material );

	    			} else if ( material.isMeshPhongMaterial ) {

	    				refreshUniformsPhong( m_uniforms, material );

	    			} else if ( material.isMeshPhysicalMaterial ) {

	    				refreshUniformsPhysical( m_uniforms, material );

	    			} else if ( material.isMeshStandardMaterial ) {

	    				refreshUniformsStandard( m_uniforms, material );

	    			} else if ( material.isMeshDepthMaterial ) {

	    				if ( material.displacementMap ) {

	    					m_uniforms.displacementMap.value = material.displacementMap;
	    					m_uniforms.displacementScale.value = material.displacementScale;
	    					m_uniforms.displacementBias.value = material.displacementBias;

	    				}

	    			} else if ( material.isMeshNormalMaterial ) {

	    				m_uniforms.opacity.value = material.opacity;

	    			}

	    			WebGLUniforms.upload(
	    					_gl, materialProperties.uniformsList, m_uniforms, _this );

	    		}


	    		// common matrices

	    		p_uniforms.set( _gl, object, 'modelViewMatrix' );
	    		p_uniforms.set( _gl, object, 'normalMatrix' );
	    		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );


	    		// dynamic uniforms

	    		var dynUniforms = materialProperties.dynamicUniforms;

	    		if ( dynUniforms !== null ) {

	    			WebGLUniforms.evalDynamic( dynUniforms, m_uniforms, object, material, camera );
	    			WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );

	    		}

	    		return program;

	    	}

	    	// Uniforms (refresh uniforms objects)

	    	function refreshUniformsCommon( uniforms, material ) {

	    		uniforms.opacity.value = material.opacity;

	    		uniforms.diffuse.value = material.color;

	    		if ( material.emissive ) {

	    			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

	    		}

	    		uniforms.map.value = material.map;
	    		uniforms.specularMap.value = material.specularMap;
	    		uniforms.alphaMap.value = material.alphaMap;

	    		if ( material.aoMap ) {

	    			uniforms.aoMap.value = material.aoMap;
	    			uniforms.aoMapIntensity.value = material.aoMapIntensity;

	    		}

	    		// uv repeat and offset setting priorities
	    		// 1. color map
	    		// 2. specular map
	    		// 3. normal map
	    		// 4. bump map
	    		// 5. alpha map
	    		// 6. emissive map

	    		var uvScaleMap;

	    		if ( material.map ) {

	    			uvScaleMap = material.map;

	    		} else if ( material.specularMap ) {

	    			uvScaleMap = material.specularMap;

	    		} else if ( material.displacementMap ) {

	    			uvScaleMap = material.displacementMap;

	    		} else if ( material.normalMap ) {

	    			uvScaleMap = material.normalMap;

	    		} else if ( material.bumpMap ) {

	    			uvScaleMap = material.bumpMap;

	    		} else if ( material.roughnessMap ) {

	    			uvScaleMap = material.roughnessMap;

	    		} else if ( material.metalnessMap ) {

	    			uvScaleMap = material.metalnessMap;

	    		} else if ( material.alphaMap ) {

	    			uvScaleMap = material.alphaMap;

	    		} else if ( material.emissiveMap ) {

	    			uvScaleMap = material.emissiveMap;

	    		}

	    		if ( uvScaleMap !== undefined ) {

	    			// backwards compatibility
	    			if ( uvScaleMap.isWebGLRenderTarget ) {

	    				uvScaleMap = uvScaleMap.texture;

	    			}

	    			var offset = uvScaleMap.offset;
	    			var repeat = uvScaleMap.repeat;

	    			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

	    		}

	    		uniforms.envMap.value = material.envMap;

	    		// don't flip CubeTexture envMaps, flip everything else:
	    		//  WebGLRenderTargetCube will be flipped for backwards compatibility
	    		//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
	    		// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
	    		uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

	    		uniforms.reflectivity.value = material.reflectivity;
	    		uniforms.refractionRatio.value = material.refractionRatio;

	    	}

	    	function refreshUniformsLine( uniforms, material ) {

	    		uniforms.diffuse.value = material.color;
	    		uniforms.opacity.value = material.opacity;

	    	}

	    	function refreshUniformsDash( uniforms, material ) {

	    		uniforms.dashSize.value = material.dashSize;
	    		uniforms.totalSize.value = material.dashSize + material.gapSize;
	    		uniforms.scale.value = material.scale;

	    	}

	    	function refreshUniformsPoints( uniforms, material ) {

	    		uniforms.diffuse.value = material.color;
	    		uniforms.opacity.value = material.opacity;
	    		uniforms.size.value = material.size * _pixelRatio;
	    		uniforms.scale.value = _canvas.clientHeight * 0.5;

	    		uniforms.map.value = material.map;

	    		if ( material.map !== null ) {

	    			var offset = material.map.offset;
	    			var repeat = material.map.repeat;

	    			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

	    		}

	    	}

	    	function refreshUniformsFog( uniforms, fog ) {

	    		uniforms.fogColor.value = fog.color;

	    		if ( fog.isFog ) {

	    			uniforms.fogNear.value = fog.near;
	    			uniforms.fogFar.value = fog.far;

	    		} else if ( fog.isFogExp2 ) {

	    			uniforms.fogDensity.value = fog.density;

	    		}

	    	}

	    	function refreshUniformsLambert( uniforms, material ) {

	    		if ( material.lightMap ) {

	    			uniforms.lightMap.value = material.lightMap;
	    			uniforms.lightMapIntensity.value = material.lightMapIntensity;

	    		}

	    		if ( material.emissiveMap ) {

	    			uniforms.emissiveMap.value = material.emissiveMap;

	    		}

	    	}

	    	function refreshUniformsPhong( uniforms, material ) {

	    		uniforms.specular.value = material.specular;
	    		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

	    		if ( material.lightMap ) {

	    			uniforms.lightMap.value = material.lightMap;
	    			uniforms.lightMapIntensity.value = material.lightMapIntensity;

	    		}

	    		if ( material.emissiveMap ) {

	    			uniforms.emissiveMap.value = material.emissiveMap;

	    		}

	    		if ( material.bumpMap ) {

	    			uniforms.bumpMap.value = material.bumpMap;
	    			uniforms.bumpScale.value = material.bumpScale;

	    		}

	    		if ( material.normalMap ) {

	    			uniforms.normalMap.value = material.normalMap;
	    			uniforms.normalScale.value.copy( material.normalScale );

	    		}

	    		if ( material.displacementMap ) {

	    			uniforms.displacementMap.value = material.displacementMap;
	    			uniforms.displacementScale.value = material.displacementScale;
	    			uniforms.displacementBias.value = material.displacementBias;

	    		}

	    	}

	    	function refreshUniformsStandard( uniforms, material ) {

	    		uniforms.roughness.value = material.roughness;
	    		uniforms.metalness.value = material.metalness;

	    		if ( material.roughnessMap ) {

	    			uniforms.roughnessMap.value = material.roughnessMap;

	    		}

	    		if ( material.metalnessMap ) {

	    			uniforms.metalnessMap.value = material.metalnessMap;

	    		}

	    		if ( material.lightMap ) {

	    			uniforms.lightMap.value = material.lightMap;
	    			uniforms.lightMapIntensity.value = material.lightMapIntensity;

	    		}

	    		if ( material.emissiveMap ) {

	    			uniforms.emissiveMap.value = material.emissiveMap;

	    		}

	    		if ( material.bumpMap ) {

	    			uniforms.bumpMap.value = material.bumpMap;
	    			uniforms.bumpScale.value = material.bumpScale;

	    		}

	    		if ( material.normalMap ) {

	    			uniforms.normalMap.value = material.normalMap;
	    			uniforms.normalScale.value.copy( material.normalScale );

	    		}

	    		if ( material.displacementMap ) {

	    			uniforms.displacementMap.value = material.displacementMap;
	    			uniforms.displacementScale.value = material.displacementScale;
	    			uniforms.displacementBias.value = material.displacementBias;

	    		}

	    		if ( material.envMap ) {

	    			//uniforms.envMap.value = material.envMap; // part of uniforms common
	    			uniforms.envMapIntensity.value = material.envMapIntensity;

	    		}

	    	}

	    	function refreshUniformsPhysical( uniforms, material ) {

	    		uniforms.clearCoat.value = material.clearCoat;
	    		uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

	    		refreshUniformsStandard( uniforms, material );

	    	}

	    	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	    	function markUniformsLightsNeedsUpdate( uniforms, value ) {

	    		uniforms.ambientLightColor.needsUpdate = value;

	    		uniforms.directionalLights.needsUpdate = value;
	    		uniforms.pointLights.needsUpdate = value;
	    		uniforms.spotLights.needsUpdate = value;
	    		uniforms.hemisphereLights.needsUpdate = value;

	    	}

	    	// Lighting

	    	function setupShadows( lights ) {

	    		var lightShadowsLength = 0;

	    		for ( var i = 0, l = lights.length; i < l; i ++ ) {

	    			var light = lights[ i ];

	    			if ( light.castShadow ) {

	    				_lights.shadows[ lightShadowsLength ++ ] = light;

	    			}

	    		}

	    		_lights.shadows.length = lightShadowsLength;

	    	}

	    	function setupLights( lights, camera ) {

	    		var l, ll, light,
	    		r = 0, g = 0, b = 0,
	    		color,
	    		intensity,
	    		distance,
	    		shadowMap,

	    		viewMatrix = camera.matrixWorldInverse,

	    		directionalLength = 0,
	    		pointLength = 0,
	    		spotLength = 0,
	    		hemiLength = 0;

	    		for ( l = 0, ll = lights.length; l < ll; l ++ ) {

	    			light = lights[ l ];

	    			color = light.color;
	    			intensity = light.intensity;
	    			distance = light.distance;

	    			shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

	    			if ( light.isAmbientLight ) {

	    				r += color.r * intensity;
	    				g += color.g * intensity;
	    				b += color.b * intensity;

	    			} else if ( light.isDirectionalLight ) {

	    				var uniforms = lightCache.get( light );

	    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
	    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
	    				_vector3.setFromMatrixPosition( light.target.matrixWorld );
	    				uniforms.direction.sub( _vector3 );
	    				uniforms.direction.transformDirection( viewMatrix );

	    				uniforms.shadow = light.castShadow;

	    				if ( light.castShadow ) {

	    					uniforms.shadowBias = light.shadow.bias;
	    					uniforms.shadowRadius = light.shadow.radius;
	    					uniforms.shadowMapSize = light.shadow.mapSize;

	    				}

	    				_lights.directionalShadowMap[ directionalLength ] = shadowMap;
	    				_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
	    				_lights.directional[ directionalLength ++ ] = uniforms;

	    			} else if ( light.isSpotLight ) {

	    				var uniforms = lightCache.get( light );

	    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
	    				uniforms.position.applyMatrix4( viewMatrix );

	    				uniforms.color.copy( color ).multiplyScalar( intensity );
	    				uniforms.distance = distance;

	    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
	    				_vector3.setFromMatrixPosition( light.target.matrixWorld );
	    				uniforms.direction.sub( _vector3 );
	    				uniforms.direction.transformDirection( viewMatrix );

	    				uniforms.coneCos = Math.cos( light.angle );
	    				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
	    				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

	    				uniforms.shadow = light.castShadow;

	    				if ( light.castShadow ) {

	    					uniforms.shadowBias = light.shadow.bias;
	    					uniforms.shadowRadius = light.shadow.radius;
	    					uniforms.shadowMapSize = light.shadow.mapSize;

	    				}

	    				_lights.spotShadowMap[ spotLength ] = shadowMap;
	    				_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
	    				_lights.spot[ spotLength ++ ] = uniforms;

	    			} else if ( light.isPointLight ) {

	    				var uniforms = lightCache.get( light );

	    				uniforms.position.setFromMatrixPosition( light.matrixWorld );
	    				uniforms.position.applyMatrix4( viewMatrix );

	    				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
	    				uniforms.distance = light.distance;
	    				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

	    				uniforms.shadow = light.castShadow;

	    				if ( light.castShadow ) {

	    					uniforms.shadowBias = light.shadow.bias;
	    					uniforms.shadowRadius = light.shadow.radius;
	    					uniforms.shadowMapSize = light.shadow.mapSize;

	    				}

	    				_lights.pointShadowMap[ pointLength ] = shadowMap;

	    				if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {

	    					_lights.pointShadowMatrix[ pointLength ] = new Matrix4();

	    				}

	    				// for point lights we set the shadow matrix to be a translation-only matrix
	    				// equal to inverse of the light's position
	    				_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
	    				_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );

	    				_lights.point[ pointLength ++ ] = uniforms;

	    			} else if ( light.isHemisphereLight ) {

	    				var uniforms = lightCache.get( light );

	    				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
	    				uniforms.direction.transformDirection( viewMatrix );
	    				uniforms.direction.normalize();

	    				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
	    				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

	    				_lights.hemi[ hemiLength ++ ] = uniforms;

	    			}

	    		}

	    		_lights.ambient[ 0 ] = r;
	    		_lights.ambient[ 1 ] = g;
	    		_lights.ambient[ 2 ] = b;

	    		_lights.directional.length = directionalLength;
	    		_lights.spot.length = spotLength;
	    		_lights.point.length = pointLength;
	    		_lights.hemi.length = hemiLength;

	    		_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;

	    	}

	    	// GL state setting

	    	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

	    		state.setCullFace( cullFace );
	    		state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

	    	};

	    	// Textures

	    	function allocTextureUnit() {

	    		var textureUnit = _usedTextureUnits;

	    		if ( textureUnit >= capabilities.maxTextures ) {

	    			console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

	    		}

	    		_usedTextureUnits += 1;

	    		return textureUnit;

	    	}

	    	this.allocTextureUnit = allocTextureUnit;

	    	// this.setTexture2D = setTexture2D;
	    	this.setTexture2D = ( function() {

	    		var warned = false;

	    		// backwards compatibility: peel texture.texture
	    		return function setTexture2D( texture, slot ) {

	    			if ( texture && texture.isWebGLRenderTarget ) {

	    				if ( ! warned ) {

	    					console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
	    					warned = true;

	    				}

	    				texture = texture.texture;

	    			}

	    			textures.setTexture2D( texture, slot );

	    		};

	    	}() );

	    	this.setTexture = ( function() {

	    		var warned = false;

	    		return function setTexture( texture, slot ) {

	    			if ( ! warned ) {

	    				console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
	    				warned = true;

	    			}

	    			textures.setTexture2D( texture, slot );

	    		};

	    	}() );

	    	this.setTextureCube = ( function() {

	    		var warned = false;

	    		return function setTextureCube( texture, slot ) {

	    			// backwards compatibility: peel texture.texture
	    			if ( texture && texture.isWebGLRenderTargetCube ) {

	    				if ( ! warned ) {

	    					console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
	    					warned = true;

	    				}

	    				texture = texture.texture;

	    			}

	    			// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
	    			// TODO: unify these code paths
	    			if ( ( texture && texture.isCubeTexture ) ||
	    				 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

	    				// CompressedTexture can have Array in image :/

	    				// this function alone should take care of cube textures
	    				textures.setTextureCube( texture, slot );

	    			} else {

	    				// assumed: texture property of THREE.WebGLRenderTargetCube

	    				textures.setTextureCubeDynamic( texture, slot );

	    			}

	    		};

	    	}() );

	    	this.getCurrentRenderTarget = function() {

	    		return _currentRenderTarget;

	    	};

	    	this.setRenderTarget = function ( renderTarget ) {

	    		_currentRenderTarget = renderTarget;

	    		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

	    			textures.setupRenderTarget( renderTarget );

	    		}

	    		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
	    		var framebuffer;

	    		if ( renderTarget ) {

	    			var renderTargetProperties = properties.get( renderTarget );

	    			if ( isCube ) {

	    				framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

	    			} else {

	    				framebuffer = renderTargetProperties.__webglFramebuffer;

	    			}

	    			_currentScissor.copy( renderTarget.scissor );
	    			_currentScissorTest = renderTarget.scissorTest;

	    			_currentViewport.copy( renderTarget.viewport );

	    		} else {

	    			framebuffer = null;

	    			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
	    			_currentScissorTest = _scissorTest;

	    			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

	    		}

	    		if ( _currentFramebuffer !== framebuffer ) {

	    			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
	    			_currentFramebuffer = framebuffer;

	    		}

	    		state.scissor( _currentScissor );
	    		state.setScissorTest( _currentScissorTest );

	    		state.viewport( _currentViewport );

	    		if ( isCube ) {

	    			var textureProperties = properties.get( renderTarget.texture );
	    			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

	    		}

	    	};

	    	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

	    		if ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {

	    			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
	    			return;

	    		}

	    		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

	    		if ( framebuffer ) {

	    			var restore = false;

	    			if ( framebuffer !== _currentFramebuffer ) {

	    				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

	    				restore = true;

	    			}

	    			try {

	    				var texture = renderTarget.texture;
	    				var textureFormat = texture.format;
	    				var textureType = texture.type;

	    				if ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

	    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
	    					return;

	    				}

	    				if ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
	    				     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
	    				     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

	    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
	    					return;

	    				}

	    				if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

	    					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

	    					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

	    						_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );

	    					}

	    				} else {

	    					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

	    				}

	    			} finally {

	    				if ( restore ) {

	    					_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

	    				}

	    			}

	    		}

	    	};

	    	// Map three.js constants to WebGL constants

	    	function paramThreeToGL( p ) {

	    		var extension;

	    		if ( p === RepeatWrapping ) return _gl.REPEAT;
	    		if ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
	    		if ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

	    		if ( p === NearestFilter ) return _gl.NEAREST;
	    		if ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
	    		if ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

	    		if ( p === LinearFilter ) return _gl.LINEAR;
	    		if ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
	    		if ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

	    		if ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;
	    		if ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
	    		if ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
	    		if ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

	    		if ( p === ByteType ) return _gl.BYTE;
	    		if ( p === ShortType ) return _gl.SHORT;
	    		if ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;
	    		if ( p === IntType ) return _gl.INT;
	    		if ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;
	    		if ( p === FloatType ) return _gl.FLOAT;

	    		extension = extensions.get( 'OES_texture_half_float' );

	    		if ( extension !== null ) {

	    			if ( p === HalfFloatType ) return extension.HALF_FLOAT_OES;

	    		}

	    		if ( p === AlphaFormat ) return _gl.ALPHA;
	    		if ( p === RGBFormat ) return _gl.RGB;
	    		if ( p === RGBAFormat ) return _gl.RGBA;
	    		if ( p === LuminanceFormat ) return _gl.LUMINANCE;
	    		if ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
	    		if ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;
	    		if ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;

	    		if ( p === AddEquation ) return _gl.FUNC_ADD;
	    		if ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;
	    		if ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

	    		if ( p === ZeroFactor ) return _gl.ZERO;
	    		if ( p === OneFactor ) return _gl.ONE;
	    		if ( p === SrcColorFactor ) return _gl.SRC_COLOR;
	    		if ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
	    		if ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;
	    		if ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
	    		if ( p === DstAlphaFactor ) return _gl.DST_ALPHA;
	    		if ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

	    		if ( p === DstColorFactor ) return _gl.DST_COLOR;
	    		if ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
	    		if ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

	    		extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

	    		if ( extension !== null ) {

	    			if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
	    			if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
	    			if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
	    			if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

	    		}

	    		extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

	    		if ( extension !== null ) {

	    			if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
	    			if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
	    			if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
	    			if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

	    		}

	    		extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

	    		if ( extension !== null ) {

	    			if ( p === RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

	    		}

	    		extension = extensions.get( 'EXT_blend_minmax' );

	    		if ( extension !== null ) {

	    			if ( p === MinEquation ) return extension.MIN_EXT;
	    			if ( p === MaxEquation ) return extension.MAX_EXT;

	    		}

	    		extension = extensions.get( 'WEBGL_depth_texture' );

	    		if ( extension !== null ){

	    			if ( p === UnsignedInt248Type ) return extension.UNSIGNED_INT_24_8_WEBGL;

	    		}

	    		return 0;

	    	}

	    }

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function FogExp2 ( color, density ) {

	    	this.name = '';

	    	this.color = new Color( color );
	    	this.density = ( density !== undefined ) ? density : 0.00025;

	    }

	    FogExp2.prototype.isFogExp2 = true;

	    FogExp2.prototype.clone = function () {

	    	return new FogExp2( this.color.getHex(), this.density );

	    };

	    FogExp2.prototype.toJSON = function ( meta ) {

	    	return {
	    		type: 'FogExp2',
	    		color: this.color.getHex(),
	    		density: this.density
	    	};

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Fog ( color, near, far ) {

	    	this.name = '';

	    	this.color = new Color( color );

	    	this.near = ( near !== undefined ) ? near : 1;
	    	this.far = ( far !== undefined ) ? far : 1000;

	    }

	    Fog.prototype.isFog = true;

	    Fog.prototype.clone = function () {

	    	return new Fog( this.color.getHex(), this.near, this.far );

	    };

	    Fog.prototype.toJSON = function ( meta ) {

	    	return {
	    		type: 'Fog',
	    		color: this.color.getHex(),
	    		near: this.near,
	    		far: this.far
	    	};

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Scene () {

	    	Object3D.call( this );

	    	this.type = 'Scene';

	    	this.background = null;
	    	this.fog = null;
	    	this.overrideMaterial = null;

	    	this.autoUpdate = true; // checked by the renderer

	    }

	    Scene.prototype = Object.create( Object3D.prototype );

	    Scene.prototype.constructor = Scene;

	    Scene.prototype.copy = function ( source, recursive ) {

	    	Object3D.prototype.copy.call( this, source, recursive );

	    	if ( source.background !== null ) this.background = source.background.clone();
	    	if ( source.fog !== null ) this.fog = source.fog.clone();
	    	if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

	    	this.autoUpdate = source.autoUpdate;
	    	this.matrixAutoUpdate = source.matrixAutoUpdate;

	    	return this;

	    };

	    Scene.prototype.toJSON = function ( meta ) {

	    	var data = Object3D.prototype.toJSON.call( this, meta );

	    	if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
	    	if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

	    	return data;

	    };

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function LensFlare( texture, size, distance, blending, color ) {

	    	Object3D.call( this );

	    	this.lensFlares = [];

	    	this.positionScreen = new Vector3();
	    	this.customUpdateCallback = undefined;

	    	if ( texture !== undefined ) {

	    		this.add( texture, size, distance, blending, color );

	    	}

	    }

	    LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: LensFlare,

	    	isLensFlare: true,

	    	copy: function ( source ) {

	    		Object3D.prototype.copy.call( this, source );

	    		this.positionScreen.copy( source.positionScreen );
	    		this.customUpdateCallback = source.customUpdateCallback;

	    		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

	    			this.lensFlares.push( source.lensFlares[ i ] );

	    		}

	    		return this;

	    	},

	    	add: function ( texture, size, distance, blending, color, opacity ) {

	    		if ( size === undefined ) size = - 1;
	    		if ( distance === undefined ) distance = 0;
	    		if ( opacity === undefined ) opacity = 1;
	    		if ( color === undefined ) color = new Color( 0xffffff );
	    		if ( blending === undefined ) blending = NormalBlending;

	    		distance = Math.min( distance, Math.max( 0, distance ) );

	    		this.lensFlares.push( {
	    			texture: texture,	// THREE.Texture
	    			size: size, 		// size in pixels (-1 = use texture.width)
	    			distance: distance, 	// distance (0-1) from light source (0=at light source)
	    			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
	    			scale: 1, 		// scale
	    			rotation: 0, 		// rotation
	    			opacity: opacity,	// opacity
	    			color: color,		// color
	    			blending: blending	// blending
	    		} );

	    	},

	    	/*
	    	 * Update lens flares update positions on all flares based on the screen position
	    	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	    	 */

	    	updateLensFlares: function () {

	    		var f, fl = this.lensFlares.length;
	    		var flare;
	    		var vecX = - this.positionScreen.x * 2;
	    		var vecY = - this.positionScreen.y * 2;

	    		for ( f = 0; f < fl; f ++ ) {

	    			flare = this.lensFlares[ f ];

	    			flare.x = this.positionScreen.x + vecX * flare.distance;
	    			flare.y = this.positionScreen.y + vecY * flare.distance;

	    			flare.wantedRotation = flare.x * Math.PI * 0.25;
	    			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

	    		}

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  opacity: <float>,
	     *  map: new THREE.Texture( <Image> ),
	     *
	     *	uvOffset: new THREE.Vector2(),
	     *	uvScale: new THREE.Vector2()
	     * }
	     */

	    function SpriteMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'SpriteMaterial';

	    	this.color = new Color( 0xffffff );
	    	this.map = null;

	    	this.rotation = 0;

	    	this.fog = false;
	    	this.lights = false;

	    	this.setValues( parameters );

	    }

	    SpriteMaterial.prototype = Object.create( Material.prototype );
	    SpriteMaterial.prototype.constructor = SpriteMaterial;

	    SpriteMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.color.copy( source.color );
	    	this.map = source.map;

	    	this.rotation = source.rotation;

	    	return this;

	    };

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Sprite( material ) {

	    	Object3D.call( this );

	    	this.type = 'Sprite';

	    	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

	    }

	    Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Sprite,

	    	isSprite: true,

	    	raycast: ( function () {

	    		var matrixPosition = new Vector3();

	    		return function raycast( raycaster, intersects ) {

	    			matrixPosition.setFromMatrixPosition( this.matrixWorld );

	    			var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
	    			var guessSizeSq = this.scale.x * this.scale.y / 4;

	    			if ( distanceSq > guessSizeSq ) {

	    				return;

	    			}

	    			intersects.push( {

	    				distance: Math.sqrt( distanceSq ),
	    				point: this.position,
	    				face: null,
	    				object: this

	    			} );

	    		};

	    	}() ),

	    	clone: function () {

	    		return new this.constructor( this.material ).copy( this );

	    	}

	    } );

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function LOD() {

	    	Object3D.call( this );

	    	this.type = 'LOD';

	    	Object.defineProperties( this, {
	    		levels: {
	    			enumerable: true,
	    			value: []
	    		}
	    	} );

	    }


	    LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: LOD,

	    	copy: function ( source ) {

	    		Object3D.prototype.copy.call( this, source, false );

	    		var levels = source.levels;

	    		for ( var i = 0, l = levels.length; i < l; i ++ ) {

	    			var level = levels[ i ];

	    			this.addLevel( level.object.clone(), level.distance );

	    		}

	    		return this;

	    	},

	    	addLevel: function ( object, distance ) {

	    		if ( distance === undefined ) distance = 0;

	    		distance = Math.abs( distance );

	    		var levels = this.levels;

	    		for ( var l = 0; l < levels.length; l ++ ) {

	    			if ( distance < levels[ l ].distance ) {

	    				break;

	    			}

	    		}

	    		levels.splice( l, 0, { distance: distance, object: object } );

	    		this.add( object );

	    	},

	    	getObjectForDistance: function ( distance ) {

	    		var levels = this.levels;

	    		for ( var i = 1, l = levels.length; i < l; i ++ ) {

	    			if ( distance < levels[ i ].distance ) {

	    				break;

	    			}

	    		}

	    		return levels[ i - 1 ].object;

	    	},

	    	raycast: ( function () {

	    		var matrixPosition = new Vector3();

	    		return function raycast( raycaster, intersects ) {

	    			matrixPosition.setFromMatrixPosition( this.matrixWorld );

	    			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

	    			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

	    		};

	    	}() ),

	    	update: function () {

	    		var v1 = new Vector3();
	    		var v2 = new Vector3();

	    		return function update( camera ) {

	    			var levels = this.levels;

	    			if ( levels.length > 1 ) {

	    				v1.setFromMatrixPosition( camera.matrixWorld );
	    				v2.setFromMatrixPosition( this.matrixWorld );

	    				var distance = v1.distanceTo( v2 );

	    				levels[ 0 ].object.visible = true;

	    				for ( var i = 1, l = levels.length; i < l; i ++ ) {

	    					if ( distance >= levels[ i ].distance ) {

	    						levels[ i - 1 ].object.visible = false;
	    						levels[ i ].object.visible = true;

	    					} else {

	    						break;

	    					}

	    				}

	    				for ( ; i < l; i ++ ) {

	    					levels[ i ].object.visible = false;

	    				}

	    			}

	    		};

	    	}(),

	    	toJSON: function ( meta ) {

	    		var data = Object3D.prototype.toJSON.call( this, meta );

	    		data.object.levels = [];

	    		var levels = this.levels;

	    		for ( var i = 0, l = levels.length; i < l; i ++ ) {

	    			var level = levels[ i ];

	    			data.object.levels.push( {
	    				object: level.object.uuid,
	    				distance: level.distance
	    			} );

	    		}

	    		return data;

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	    	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	    	this.image = { data: data, width: width, height: height };

	    	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	    	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	    	this.flipY = false;
	    	this.generateMipmaps  = false;

	    }

	    DataTexture.prototype = Object.create( Texture.prototype );
	    DataTexture.prototype.constructor = DataTexture;

	    DataTexture.prototype.isDataTexture = true;

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     * @author michael guerrero / http://realitymeltdown.com
	     * @author ikerr / http://verold.com
	     */

	    function Skeleton( bones, boneInverses, useVertexTexture ) {

	    	this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

	    	this.identityMatrix = new Matrix4();

	    	// copy the bone array

	    	bones = bones || [];

	    	this.bones = bones.slice( 0 );

	    	// create a bone texture or an array of floats

	    	if ( this.useVertexTexture ) {

	    		// layout (1 matrix = 4 pixels)
	    		//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
	    		//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
	    		//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
	    		//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
	    		//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


	    		var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
	    		size = exports.Math.nextPowerOfTwo( Math.ceil( size ) );
	    		size = Math.max( size, 4 );

	    		this.boneTextureWidth = size;
	    		this.boneTextureHeight = size;

	    		this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
	    		this.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );

	    	} else {

	    		this.boneMatrices = new Float32Array( 16 * this.bones.length );

	    	}

	    	// use the supplied bone inverses or calculate the inverses

	    	if ( boneInverses === undefined ) {

	    		this.calculateInverses();

	    	} else {

	    		if ( this.bones.length === boneInverses.length ) {

	    			this.boneInverses = boneInverses.slice( 0 );

	    		} else {

	    			console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

	    			this.boneInverses = [];

	    			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

	    				this.boneInverses.push( new Matrix4() );

	    			}

	    		}

	    	}

	    }

	    Object.assign( Skeleton.prototype, {

	    	calculateInverses: function () {

	    		this.boneInverses = [];

	    		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

	    			var inverse = new Matrix4();

	    			if ( this.bones[ b ] ) {

	    				inverse.getInverse( this.bones[ b ].matrixWorld );

	    			}

	    			this.boneInverses.push( inverse );

	    		}

	    	},

	    	pose: function () {

	    		var bone;

	    		// recover the bind-time world matrices

	    		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

	    			bone = this.bones[ b ];

	    			if ( bone ) {

	    				bone.matrixWorld.getInverse( this.boneInverses[ b ] );

	    			}

	    		}

	    		// compute the local matrices, positions, rotations and scales

	    		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

	    			bone = this.bones[ b ];

	    			if ( bone ) {

	    				if ( (bone.parent && bone.parent.isBone) ) {

	    					bone.matrix.getInverse( bone.parent.matrixWorld );
	    					bone.matrix.multiply( bone.matrixWorld );

	    				} else {

	    					bone.matrix.copy( bone.matrixWorld );

	    				}

	    				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

	    			}

	    		}

	    	},

	    	update: ( function () {

	    		var offsetMatrix = new Matrix4();

	    		return function update() {

	    			// flatten bone matrices to array

	    			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

	    				// compute the offset between the current and the original transform

	    				var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

	    				offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
	    				offsetMatrix.toArray( this.boneMatrices, b * 16 );

	    			}

	    			if ( this.useVertexTexture ) {

	    				this.boneTexture.needsUpdate = true;

	    			}

	    		};

	    	} )(),

	    	clone: function () {

	    		return new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

	    	}

	    } );

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     * @author ikerr / http://verold.com
	     */

	    function Bone( skin ) {

	    	Object3D.call( this );

	    	this.type = 'Bone';

	    	this.skin = skin;

	    }

	    Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Bone,

	    	isBone: true,

	    	copy: function ( source ) {

	    		Object3D.prototype.copy.call( this, source );

	    		this.skin = source.skin;

	    		return this;

	    	}

	    } );

	    /**
	     * @author mikael emtinger / http://gomo.se/
	     * @author alteredq / http://alteredqualia.com/
	     * @author ikerr / http://verold.com
	     */

	    function SkinnedMesh( geometry, material, useVertexTexture ) {

	    	Mesh.call( this, geometry, material );

	    	this.type = 'SkinnedMesh';

	    	this.bindMode = "attached";
	    	this.bindMatrix = new Matrix4();
	    	this.bindMatrixInverse = new Matrix4();

	    	// init bones

	    	// TODO: remove bone creation as there is no reason (other than
	    	// convenience) for THREE.SkinnedMesh to do this.

	    	var bones = [];

	    	if ( this.geometry && this.geometry.bones !== undefined ) {

	    		var bone, gbone;

	    		for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

	    			gbone = this.geometry.bones[ b ];

	    			bone = new Bone( this );
	    			bones.push( bone );

	    			bone.name = gbone.name;
	    			bone.position.fromArray( gbone.pos );
	    			bone.quaternion.fromArray( gbone.rotq );
	    			if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

	    		}

	    		for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

	    			gbone = this.geometry.bones[ b ];

	    			if ( gbone.parent !== - 1 && gbone.parent !== null &&
	    					bones[ gbone.parent ] !== undefined ) {

	    				bones[ gbone.parent ].add( bones[ b ] );

	    			} else {

	    				this.add( bones[ b ] );

	    			}

	    		}

	    	}

	    	this.normalizeSkinWeights();

	    	this.updateMatrixWorld( true );
	    	this.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

	    }


	    SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

	    	constructor: SkinnedMesh,

	    	isSkinnedMesh: true,

	    	bind: function( skeleton, bindMatrix ) {

	    		this.skeleton = skeleton;

	    		if ( bindMatrix === undefined ) {

	    			this.updateMatrixWorld( true );

	    			this.skeleton.calculateInverses();

	    			bindMatrix = this.matrixWorld;

	    		}

	    		this.bindMatrix.copy( bindMatrix );
	    		this.bindMatrixInverse.getInverse( bindMatrix );

	    	},

	    	pose: function () {

	    		this.skeleton.pose();

	    	},

	    	normalizeSkinWeights: function () {

	    		if ( (this.geometry && this.geometry.isGeometry) ) {

	    			for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {

	    				var sw = this.geometry.skinWeights[ i ];

	    				var scale = 1.0 / sw.lengthManhattan();

	    				if ( scale !== Infinity ) {

	    					sw.multiplyScalar( scale );

	    				} else {

	    					sw.set( 1, 0, 0, 0 ); // do something reasonable

	    				}

	    			}

	    		} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {

	    			var vec = new Vector4();

	    			var skinWeight = this.geometry.attributes.skinWeight;

	    			for ( var i = 0; i < skinWeight.count; i ++ ) {

	    				vec.x = skinWeight.getX( i );
	    				vec.y = skinWeight.getY( i );
	    				vec.z = skinWeight.getZ( i );
	    				vec.w = skinWeight.getW( i );

	    				var scale = 1.0 / vec.lengthManhattan();

	    				if ( scale !== Infinity ) {

	    					vec.multiplyScalar( scale );

	    				} else {

	    					vec.set( 1, 0, 0, 0 ); // do something reasonable

	    				}

	    				skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

	    			}

	    		}

	    	},

	    	updateMatrixWorld: function( force ) {

	    		Mesh.prototype.updateMatrixWorld.call( this, true );

	    		if ( this.bindMode === "attached" ) {

	    			this.bindMatrixInverse.getInverse( this.matrixWorld );

	    		} else if ( this.bindMode === "detached" ) {

	    			this.bindMatrixInverse.getInverse( this.bindMatrix );

	    		} else {

	    			console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

	    		}

	    	},

	    	clone: function() {

	    		return new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  opacity: <float>,
	     *
	     *  linewidth: <float>,
	     *  linecap: "round",
	     *  linejoin: "round"
	     * }
	     */

	    function LineBasicMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'LineBasicMaterial';

	    	this.color = new Color( 0xffffff );

	    	this.linewidth = 1;
	    	this.linecap = 'round';
	    	this.linejoin = 'round';

	    	this.lights = false;

	    	this.setValues( parameters );

	    }

	    LineBasicMaterial.prototype = Object.create( Material.prototype );
	    LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	    LineBasicMaterial.prototype.isLineBasicMaterial = true;

	    LineBasicMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.color.copy( source.color );

	    	this.linewidth = source.linewidth;
	    	this.linecap = source.linecap;
	    	this.linejoin = source.linejoin;

	    	return this;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Line( geometry, material, mode ) {

	    	if ( mode === 1 ) {

	    		console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
	    		return new LineSegments( geometry, material );

	    	}

	    	Object3D.call( this );

	    	this.type = 'Line';

	    	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	    	this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	    }

	    Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Line,

	    	isLine: true,

	    	raycast: ( function () {

	    		var inverseMatrix = new Matrix4();
	    		var ray = new Ray();
	    		var sphere = new Sphere();

	    		return function raycast( raycaster, intersects ) {

	    			var precision = raycaster.linePrecision;
	    			var precisionSq = precision * precision;

	    			var geometry = this.geometry;
	    			var matrixWorld = this.matrixWorld;

	    			// Checking boundingSphere distance to ray

	    			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

	    			sphere.copy( geometry.boundingSphere );
	    			sphere.applyMatrix4( matrixWorld );

	    			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

	    			//

	    			inverseMatrix.getInverse( matrixWorld );
	    			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

	    			var vStart = new Vector3();
	    			var vEnd = new Vector3();
	    			var interSegment = new Vector3();
	    			var interRay = new Vector3();
	    			var step = (this && this.isLineSegments) ? 2 : 1;

	    			if ( (geometry && geometry.isBufferGeometry) ) {

	    				var index = geometry.index;
	    				var attributes = geometry.attributes;
	    				var positions = attributes.position.array;

	    				if ( index !== null ) {

	    					var indices = index.array;

	    					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

	    						var a = indices[ i ];
	    						var b = indices[ i + 1 ];

	    						vStart.fromArray( positions, a * 3 );
	    						vEnd.fromArray( positions, b * 3 );

	    						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

	    						if ( distSq > precisionSq ) continue;

	    						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

	    						var distance = raycaster.ray.origin.distanceTo( interRay );

	    						if ( distance < raycaster.near || distance > raycaster.far ) continue;

	    						intersects.push( {

	    							distance: distance,
	    							// What do we want? intersection point on the ray or on the segment??
	    							// point: raycaster.ray.at( distance ),
	    							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
	    							index: i,
	    							face: null,
	    							faceIndex: null,
	    							object: this

	    						} );

	    					}

	    				} else {

	    					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

	    						vStart.fromArray( positions, 3 * i );
	    						vEnd.fromArray( positions, 3 * i + 3 );

	    						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

	    						if ( distSq > precisionSq ) continue;

	    						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

	    						var distance = raycaster.ray.origin.distanceTo( interRay );

	    						if ( distance < raycaster.near || distance > raycaster.far ) continue;

	    						intersects.push( {

	    							distance: distance,
	    							// What do we want? intersection point on the ray or on the segment??
	    							// point: raycaster.ray.at( distance ),
	    							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
	    							index: i,
	    							face: null,
	    							faceIndex: null,
	    							object: this

	    						} );

	    					}

	    				}

	    			} else if ( (geometry && geometry.isGeometry) ) {

	    				var vertices = geometry.vertices;
	    				var nbVertices = vertices.length;

	    				for ( var i = 0; i < nbVertices - 1; i += step ) {

	    					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

	    					if ( distSq > precisionSq ) continue;

	    					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

	    					var distance = raycaster.ray.origin.distanceTo( interRay );

	    					if ( distance < raycaster.near || distance > raycaster.far ) continue;

	    					intersects.push( {

	    						distance: distance,
	    						// What do we want? intersection point on the ray or on the segment??
	    						// point: raycaster.ray.at( distance ),
	    						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
	    						index: i,
	    						face: null,
	    						faceIndex: null,
	    						object: this

	    					} );

	    				}

	    			}

	    		};

	    	}() ),

	    	clone: function () {

	    		return new this.constructor( this.geometry, this.material ).copy( this );

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function LineSegments( geometry, material ) {

	    	Line.call( this, geometry, material );

	    	this.type = 'LineSegments';

	    }

	    LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

	    	constructor: LineSegments,

	    	isLineSegments: true

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  opacity: <float>,
	     *  map: new THREE.Texture( <Image> ),
	     *
	     *  size: <float>,
	     *  sizeAttenuation: <bool>
	     * }
	     */

	    function PointsMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'PointsMaterial';

	    	this.color = new Color( 0xffffff );

	    	this.map = null;

	    	this.size = 1;
	    	this.sizeAttenuation = true;

	    	this.lights = false;

	    	this.setValues( parameters );

	    }

	    PointsMaterial.prototype = Object.create( Material.prototype );
	    PointsMaterial.prototype.constructor = PointsMaterial;

	    PointsMaterial.prototype.isPointsMaterial = true;

	    PointsMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.color.copy( source.color );

	    	this.map = source.map;

	    	this.size = source.size;
	    	this.sizeAttenuation = source.sizeAttenuation;

	    	return this;

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Points( geometry, material ) {

	    	Object3D.call( this );

	    	this.type = 'Points';

	    	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	    	this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

	    }

	    Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Points,

	    	isPoints: true,

	    	raycast: ( function () {

	    		var inverseMatrix = new Matrix4();
	    		var ray = new Ray();
	    		var sphere = new Sphere();

	    		return function raycast( raycaster, intersects ) {

	    			var object = this;
	    			var geometry = this.geometry;
	    			var matrixWorld = this.matrixWorld;
	    			var threshold = raycaster.params.Points.threshold;

	    			// Checking boundingSphere distance to ray

	    			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

	    			sphere.copy( geometry.boundingSphere );
	    			sphere.applyMatrix4( matrixWorld );

	    			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

	    			//

	    			inverseMatrix.getInverse( matrixWorld );
	    			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

	    			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
	    			var localThresholdSq = localThreshold * localThreshold;
	    			var position = new Vector3();

	    			function testPoint( point, index ) {

	    				var rayPointDistanceSq = ray.distanceSqToPoint( point );

	    				if ( rayPointDistanceSq < localThresholdSq ) {

	    					var intersectPoint = ray.closestPointToPoint( point );
	    					intersectPoint.applyMatrix4( matrixWorld );

	    					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

	    					if ( distance < raycaster.near || distance > raycaster.far ) return;

	    					intersects.push( {

	    						distance: distance,
	    						distanceToRay: Math.sqrt( rayPointDistanceSq ),
	    						point: intersectPoint.clone(),
	    						index: index,
	    						face: null,
	    						object: object

	    					} );

	    				}

	    			}

	    			if ( (geometry && geometry.isBufferGeometry) ) {

	    				var index = geometry.index;
	    				var attributes = geometry.attributes;
	    				var positions = attributes.position.array;

	    				if ( index !== null ) {

	    					var indices = index.array;

	    					for ( var i = 0, il = indices.length; i < il; i ++ ) {

	    						var a = indices[ i ];

	    						position.fromArray( positions, a * 3 );

	    						testPoint( position, a );

	    					}

	    				} else {

	    					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

	    						position.fromArray( positions, i * 3 );

	    						testPoint( position, i );

	    					}

	    				}

	    			} else {

	    				var vertices = geometry.vertices;

	    				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

	    					testPoint( vertices[ i ], i );

	    				}

	    			}

	    		};

	    	}() ),

	    	clone: function () {

	    		return new this.constructor( this.geometry, this.material ).copy( this );

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Group() {

	    	Object3D.call( this );

	    	this.type = 'Group';

	    }

	    Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Group

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	    	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	    	this.generateMipmaps = false;

	    	var scope = this;

	    	function update() {

	    		requestAnimationFrame( update );

	    		if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

	    			scope.needsUpdate = true;

	    		}

	    	}

	    	update();

	    }

	    VideoTexture.prototype = Object.create( Texture.prototype );
	    VideoTexture.prototype.constructor = VideoTexture;

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	    	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	    	this.image = { width: width, height: height };
	    	this.mipmaps = mipmaps;

	    	// no flipping for cube textures
	    	// (also flipping doesn't work for compressed textures )

	    	this.flipY = false;

	    	// can't generate mipmaps for compressed textures
	    	// mips must be embedded in DDS files

	    	this.generateMipmaps = false;

	    }

	    CompressedTexture.prototype = Object.create( Texture.prototype );
	    CompressedTexture.prototype.constructor = CompressedTexture;

	    CompressedTexture.prototype.isCompressedTexture = true;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	    	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	    	this.needsUpdate = true;

	    }

	    CanvasTexture.prototype = Object.create( Texture.prototype );
	    CanvasTexture.prototype.constructor = CanvasTexture;

	    /**
	     * @author Matt DesLauriers / @mattdesl
	     * @author atix / arthursilber.de
	     */

	    function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

	    	format = format !== undefined ? format : DepthFormat;

	    	if ( format !== DepthFormat && format !== DepthStencilFormat ) {

	    		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )

	    	}

	    	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	    	this.image = { width: width, height: height };

	    	this.type = type !== undefined ? type : UnsignedShortType;

	    	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	    	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	    	this.flipY = false;
	    	this.generateMipmaps	= false;

	    }

	    DepthTexture.prototype = Object.create( Texture.prototype );
	    DepthTexture.prototype.constructor = DepthTexture;
	    DepthTexture.prototype.isDepthTexture = true;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function WireframeGeometry( geometry ) {

	    	BufferGeometry.call( this );

	    	var edge = [ 0, 0 ], hash = {};

	    	function sortFunction( a, b ) {

	    		return a - b;

	    	}

	    	var keys = [ 'a', 'b', 'c' ];

	    	if ( (geometry && geometry.isGeometry) ) {

	    		var vertices = geometry.vertices;
	    		var faces = geometry.faces;
	    		var numEdges = 0;

	    		// allocate maximal size
	    		var edges = new Uint32Array( 6 * faces.length );

	    		for ( var i = 0, l = faces.length; i < l; i ++ ) {

	    			var face = faces[ i ];

	    			for ( var j = 0; j < 3; j ++ ) {

	    				edge[ 0 ] = face[ keys[ j ] ];
	    				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
	    				edge.sort( sortFunction );

	    				var key = edge.toString();

	    				if ( hash[ key ] === undefined ) {

	    					edges[ 2 * numEdges ] = edge[ 0 ];
	    					edges[ 2 * numEdges + 1 ] = edge[ 1 ];
	    					hash[ key ] = true;
	    					numEdges ++;

	    				}

	    			}

	    		}

	    		var coords = new Float32Array( numEdges * 2 * 3 );

	    		for ( var i = 0, l = numEdges; i < l; i ++ ) {

	    			for ( var j = 0; j < 2; j ++ ) {

	    				var vertex = vertices[ edges [ 2 * i + j ] ];

	    				var index = 6 * i + 3 * j;
	    				coords[ index + 0 ] = vertex.x;
	    				coords[ index + 1 ] = vertex.y;
	    				coords[ index + 2 ] = vertex.z;

	    			}

	    		}

	    		this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

	    	} else if ( (geometry && geometry.isBufferGeometry) ) {

	    		if ( geometry.index !== null ) {

	    			// Indexed BufferGeometry

	    			var indices = geometry.index.array;
	    			var vertices = geometry.attributes.position;
	    			var groups = geometry.groups;
	    			var numEdges = 0;

	    			if ( groups.length === 0 ) {

	    				geometry.addGroup( 0, indices.length );

	    			}

	    			// allocate maximal size
	    			var edges = new Uint32Array( 2 * indices.length );

	    			for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

	    				var group = groups[ o ];

	    				var start = group.start;
	    				var count = group.count;

	    				for ( var i = start, il = start + count; i < il; i += 3 ) {

	    					for ( var j = 0; j < 3; j ++ ) {

	    						edge[ 0 ] = indices[ i + j ];
	    						edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
	    						edge.sort( sortFunction );

	    						var key = edge.toString();

	    						if ( hash[ key ] === undefined ) {

	    							edges[ 2 * numEdges ] = edge[ 0 ];
	    							edges[ 2 * numEdges + 1 ] = edge[ 1 ];
	    							hash[ key ] = true;
	    							numEdges ++;

	    						}

	    					}

	    				}

	    			}

	    			var coords = new Float32Array( numEdges * 2 * 3 );

	    			for ( var i = 0, l = numEdges; i < l; i ++ ) {

	    				for ( var j = 0; j < 2; j ++ ) {

	    					var index = 6 * i + 3 * j;
	    					var index2 = edges[ 2 * i + j ];

	    					coords[ index + 0 ] = vertices.getX( index2 );
	    					coords[ index + 1 ] = vertices.getY( index2 );
	    					coords[ index + 2 ] = vertices.getZ( index2 );

	    				}

	    			}

	    			this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

	    		} else {

	    			// non-indexed BufferGeometry

	    			var vertices = geometry.attributes.position.array;
	    			var numEdges = vertices.length / 3;
	    			var numTris = numEdges / 3;

	    			var coords = new Float32Array( numEdges * 2 * 3 );

	    			for ( var i = 0, l = numTris; i < l; i ++ ) {

	    				for ( var j = 0; j < 3; j ++ ) {

	    					var index = 18 * i + 6 * j;

	    					var index1 = 9 * i + 3 * j;
	    					coords[ index + 0 ] = vertices[ index1 ];
	    					coords[ index + 1 ] = vertices[ index1 + 1 ];
	    					coords[ index + 2 ] = vertices[ index1 + 2 ];

	    					var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
	    					coords[ index + 3 ] = vertices[ index2 ];
	    					coords[ index + 4 ] = vertices[ index2 + 1 ];
	    					coords[ index + 5 ] = vertices[ index2 + 2 ];

	    				}

	    			}

	    			this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

	    		}

	    	}

	    }

	    WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	    WireframeGeometry.prototype.constructor = WireframeGeometry;

	    /**
	     * @author zz85 / https://github.com/zz85
	     * Parametric Surfaces Geometry
	     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	     *
	     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
	     *
	     */

	    function ParametricGeometry( func, slices, stacks ) {

	    	Geometry.call( this );

	    	this.type = 'ParametricGeometry';

	    	this.parameters = {
	    		func: func,
	    		slices: slices,
	    		stacks: stacks
	    	};

	    	var verts = this.vertices;
	    	var faces = this.faces;
	    	var uvs = this.faceVertexUvs[ 0 ];

	    	var i, j, p;
	    	var u, v;

	    	var sliceCount = slices + 1;

	    	for ( i = 0; i <= stacks; i ++ ) {

	    		v = i / stacks;

	    		for ( j = 0; j <= slices; j ++ ) {

	    			u = j / slices;

	    			p = func( u, v );
	    			verts.push( p );

	    		}

	    	}

	    	var a, b, c, d;
	    	var uva, uvb, uvc, uvd;

	    	for ( i = 0; i < stacks; i ++ ) {

	    		for ( j = 0; j < slices; j ++ ) {

	    			a = i * sliceCount + j;
	    			b = i * sliceCount + j + 1;
	    			c = ( i + 1 ) * sliceCount + j + 1;
	    			d = ( i + 1 ) * sliceCount + j;

	    			uva = new Vector2( j / slices, i / stacks );
	    			uvb = new Vector2( ( j + 1 ) / slices, i / stacks );
	    			uvc = new Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
	    			uvd = new Vector2( j / slices, ( i + 1 ) / stacks );

	    			faces.push( new Face3( a, b, d ) );
	    			uvs.push( [ uva, uvb, uvd ] );

	    			faces.push( new Face3( b, c, d ) );
	    			uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

	    		}

	    	}

	    	// console.log(this);

	    	// magic bullet
	    	// var diff = this.mergeVertices();
	    	// console.log('removed ', diff, ' vertices by merging');

	    	this.computeFaceNormals();
	    	this.computeVertexNormals();

	    }

	    ParametricGeometry.prototype = Object.create( Geometry.prototype );
	    ParametricGeometry.prototype.constructor = ParametricGeometry;

	    /**
	     * @author clockworkgeek / https://github.com/clockworkgeek
	     * @author timothypratley / https://github.com/timothypratley
	     * @author WestLangley / http://github.com/WestLangley
	    */

	    function PolyhedronGeometry( vertices, indices, radius, detail ) {

	    	Geometry.call( this );

	    	this.type = 'PolyhedronGeometry';

	    	this.parameters = {
	    		vertices: vertices,
	    		indices: indices,
	    		radius: radius,
	    		detail: detail
	    	};

	    	radius = radius || 1;
	    	detail = detail || 0;

	    	var that = this;

	    	for ( var i = 0, l = vertices.length; i < l; i += 3 ) {

	    		prepare( new Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

	    	}

	    	var p = this.vertices;

	    	var faces = [];

	    	for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {

	    		var v1 = p[ indices[ i ] ];
	    		var v2 = p[ indices[ i + 1 ] ];
	    		var v3 = p[ indices[ i + 2 ] ];

	    		faces[ j ] = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );

	    	}

	    	var centroid = new Vector3();

	    	for ( var i = 0, l = faces.length; i < l; i ++ ) {

	    		subdivide( faces[ i ], detail );

	    	}


	    	// Handle case when face straddles the seam

	    	for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

	    		var uvs = this.faceVertexUvs[ 0 ][ i ];

	    		var x0 = uvs[ 0 ].x;
	    		var x1 = uvs[ 1 ].x;
	    		var x2 = uvs[ 2 ].x;

	    		var max = Math.max( x0, x1, x2 );
	    		var min = Math.min( x0, x1, x2 );

	    		if ( max > 0.9 && min < 0.1 ) {

	    			// 0.9 is somewhat arbitrary

	    			if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
	    			if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
	    			if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

	    		}

	    	}


	    	// Apply radius

	    	for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

	    		this.vertices[ i ].multiplyScalar( radius );

	    	}


	    	// Merge vertices

	    	this.mergeVertices();

	    	this.computeFaceNormals();

	    	this.boundingSphere = new Sphere( new Vector3(), radius );


	    	// Project vector onto sphere's surface

	    	function prepare( vector ) {

	    		var vertex = vector.normalize().clone();
	    		vertex.index = that.vertices.push( vertex ) - 1;

	    		// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

	    		var u = azimuth( vector ) / 2 / Math.PI + 0.5;
	    		var v = inclination( vector ) / Math.PI + 0.5;
	    		vertex.uv = new Vector2( u, 1 - v );

	    		return vertex;

	    	}


	    	// Approximate a curved face with recursively sub-divided triangles.

	    	function make( v1, v2, v3 ) {

	    		var face = new Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
	    		that.faces.push( face );

	    		centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );

	    		var azi = azimuth( centroid );

	    		that.faceVertexUvs[ 0 ].push( [
	    			correctUV( v1.uv, v1, azi ),
	    			correctUV( v2.uv, v2, azi ),
	    			correctUV( v3.uv, v3, azi )
	    		] );

	    	}


	    	// Analytically subdivide a face to the required detail level.

	    	function subdivide( face, detail ) {

	    		var cols = Math.pow( 2, detail );
	    		var a = prepare( that.vertices[ face.a ] );
	    		var b = prepare( that.vertices[ face.b ] );
	    		var c = prepare( that.vertices[ face.c ] );
	    		var v = [];

	    		// Construct all of the vertices for this subdivision.

	    		for ( var i = 0 ; i <= cols; i ++ ) {

	    			v[ i ] = [];

	    			var aj = prepare( a.clone().lerp( c, i / cols ) );
	    			var bj = prepare( b.clone().lerp( c, i / cols ) );
	    			var rows = cols - i;

	    			for ( var j = 0; j <= rows; j ++ ) {

	    				if ( j === 0 && i === cols ) {

	    					v[ i ][ j ] = aj;

	    				} else {

	    					v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

	    				}

	    			}

	    		}

	    		// Construct all of the faces.

	    		for ( var i = 0; i < cols ; i ++ ) {

	    			for ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

	    				var k = Math.floor( j / 2 );

	    				if ( j % 2 === 0 ) {

	    					make(
	    						v[ i ][ k + 1 ],
	    						v[ i + 1 ][ k ],
	    						v[ i ][ k ]
	    					);

	    				} else {

	    					make(
	    						v[ i ][ k + 1 ],
	    						v[ i + 1 ][ k + 1 ],
	    						v[ i + 1 ][ k ]
	    					);

	    				}

	    			}

	    		}

	    	}


	    	// Angle around the Y axis, counter-clockwise when looking from above.

	    	function azimuth( vector ) {

	    		return Math.atan2( vector.z, - vector.x );

	    	}


	    	// Angle above the XZ plane.

	    	function inclination( vector ) {

	    		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	    	}


	    	// Texture fixing helper. Spheres have some odd behaviours.

	    	function correctUV( uv, vector, azimuth ) {

	    		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new Vector2( uv.x - 1, uv.y );
	    		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
	    		return uv.clone();

	    	}

	    }

	    PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	    PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	    /**
	     * @author timothypratley / https://github.com/timothypratley
	     */

	    function TetrahedronGeometry( radius, detail ) {

	    	var vertices = [
	    		 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
	    	];

	    	var indices = [
	    		 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
	    	];

	    	PolyhedronGeometry.call( this, vertices, indices, radius, detail );

	    	this.type = 'TetrahedronGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		detail: detail
	    	};

	    }

	    TetrahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );
	    TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	    /**
	     * @author timothypratley / https://github.com/timothypratley
	     */

	    function OctahedronGeometry( radius, detail ) {

	    	var vertices = [
	    		1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
	    	];

	    	var indices = [
	    		0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
	    	];

	    	PolyhedronGeometry.call( this, vertices, indices, radius, detail );

	    	this.type = 'OctahedronGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		detail: detail
	    	};

	    }

	    OctahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );
	    OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	    /**
	     * @author timothypratley / https://github.com/timothypratley
	     */

	    function IcosahedronGeometry( radius, detail ) {

	    	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	    	var vertices = [
	    		- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
	    		 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
	    		 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
	    	];

	    	var indices = [
	    		 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
	    		 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
	    		 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
	    		 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
	    	];

	    	PolyhedronGeometry.call( this, vertices, indices, radius, detail );

	    	this.type = 'IcosahedronGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		detail: detail
	    	};

	    }

	    IcosahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );
	    IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	    /**
	     * @author Abe Pazos / https://hamoid.com
	     */

	    function DodecahedronGeometry( radius, detail ) {

	    	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	    	var r = 1 / t;

	    	var vertices = [

	    		// (±1, ±1, ±1)
	    		- 1, - 1, - 1,    - 1, - 1,  1,
	    		- 1,  1, - 1,    - 1,  1,  1,
	    		 1, - 1, - 1,     1, - 1,  1,
	    		 1,  1, - 1,     1,  1,  1,

	    		// (0, ±1/φ, ±φ)
	    		 0, - r, - t,     0, - r,  t,
	    		 0,  r, - t,     0,  r,  t,

	    		// (±1/φ, ±φ, 0)
	    		- r, - t,  0,    - r,  t,  0,
	    		 r, - t,  0,     r,  t,  0,

	    		// (±φ, 0, ±1/φ)
	    		- t,  0, - r,     t,  0, - r,
	    		- t,  0,  r,     t,  0,  r
	    	];

	    	var indices = [
	    		 3, 11,  7,      3,  7, 15,      3, 15, 13,
	    		 7, 19, 17,      7, 17,  6,      7,  6, 15,
	    		17,  4,  8,     17,  8, 10,     17, 10,  6,
	    		 8,  0, 16,      8, 16,  2,      8,  2, 10,
	    		 0, 12,  1,      0,  1, 18,      0, 18, 16,
	    		 6, 10,  2,      6,  2, 13,      6, 13, 15,
	    		 2, 16, 18,      2, 18,  3,      2,  3, 13,
	    		18,  1,  9,     18,  9, 11,     18, 11,  3,
	    		 4, 14, 12,      4, 12,  0,      4,  0,  8,
	    		11,  9,  5,     11,  5, 19,     11, 19,  7,
	    		19,  5, 14,     19, 14,  4,     19,  4, 17,
	    		 1, 12, 14,      1, 14,  5,      1,  5,  9
	    	];

	    	PolyhedronGeometry.call( this, vertices, indices, radius, detail );

	    	this.type = 'DodecahedronGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		detail: detail
	    	};

	    }

	    DodecahedronGeometry.prototype = Object.create( PolyhedronGeometry.prototype );
	    DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	    /**
	     * @author WestLangley / https://github.com/WestLangley
	     * @author zz85 / https://github.com/zz85
	     * @author miningold / https://github.com/miningold
	     * @author jonobr1 / https://github.com/jonobr1
	     *
	     * Modified from the TorusKnotGeometry by @oosmoxiecode
	     *
	     * Creates a tube which extrudes along a 3d spline
	     *
	     * Uses parallel transport frames as described in
	     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	     */

	    function TubeGeometry( path, segments, radius, radialSegments, closed, taper ) {

	    	Geometry.call( this );

	    	this.type = 'TubeGeometry';

	    	this.parameters = {
	    		path: path,
	    		segments: segments,
	    		radius: radius,
	    		radialSegments: radialSegments,
	    		closed: closed,
	    		taper: taper
	    	};

	    	segments = segments || 64;
	    	radius = radius || 1;
	    	radialSegments = radialSegments || 8;
	    	closed = closed || false;
	    	taper = taper || TubeGeometry.NoTaper;

	    	var grid = [];

	    	var scope = this,

	    		tangent,
	    		normal,
	    		binormal,

	    		numpoints = segments + 1,

	    		u, v, r,

	    		cx, cy,
	    		pos, pos2 = new Vector3(),
	    		i, j,
	    		ip, jp,
	    		a, b, c, d,
	    		uva, uvb, uvc, uvd;

	    	var frames = new TubeGeometry.FrenetFrames( path, segments, closed ),
	    		tangents = frames.tangents,
	    		normals = frames.normals,
	    		binormals = frames.binormals;

	    	// proxy internals
	    	this.tangents = tangents;
	    	this.normals = normals;
	    	this.binormals = binormals;

	    	function vert( x, y, z ) {

	    		return scope.vertices.push( new Vector3( x, y, z ) ) - 1;

	    	}

	    	// construct the grid

	    	for ( i = 0; i < numpoints; i ++ ) {

	    		grid[ i ] = [];

	    		u = i / ( numpoints - 1 );

	    		pos = path.getPointAt( u );

	    		tangent = tangents[ i ];
	    		normal = normals[ i ];
	    		binormal = binormals[ i ];

	    		r = radius * taper( u );

	    		for ( j = 0; j < radialSegments; j ++ ) {

	    			v = j / radialSegments * 2 * Math.PI;

	    			cx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
	    			cy = r * Math.sin( v );

	    			pos2.copy( pos );
	    			pos2.x += cx * normal.x + cy * binormal.x;
	    			pos2.y += cx * normal.y + cy * binormal.y;
	    			pos2.z += cx * normal.z + cy * binormal.z;

	    			grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

	    		}

	    	}


	    	// construct the mesh

	    	for ( i = 0; i < segments; i ++ ) {

	    		for ( j = 0; j < radialSegments; j ++ ) {

	    			ip = ( closed ) ? ( i + 1 ) % segments : i + 1;
	    			jp = ( j + 1 ) % radialSegments;

	    			a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
	    			b = grid[ ip ][ j ];
	    			c = grid[ ip ][ jp ];
	    			d = grid[ i ][ jp ];

	    			uva = new Vector2( i / segments, j / radialSegments );
	    			uvb = new Vector2( ( i + 1 ) / segments, j / radialSegments );
	    			uvc = new Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
	    			uvd = new Vector2( i / segments, ( j + 1 ) / radialSegments );

	    			this.faces.push( new Face3( a, b, d ) );
	    			this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

	    			this.faces.push( new Face3( b, c, d ) );
	    			this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

	    		}

	    	}

	    	this.computeFaceNormals();
	    	this.computeVertexNormals();

	    }

	    TubeGeometry.prototype = Object.create( Geometry.prototype );
	    TubeGeometry.prototype.constructor = TubeGeometry;

	    TubeGeometry.NoTaper = function ( u ) {

	    	return 1;

	    };

	    TubeGeometry.SinusoidalTaper = function ( u ) {

	    	return Math.sin( Math.PI * u );

	    };

	    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline
	    TubeGeometry.FrenetFrames = function ( path, segments, closed ) {

	    	var	normal = new Vector3(),

	    		tangents = [],
	    		normals = [],
	    		binormals = [],

	    		vec = new Vector3(),
	    		mat = new Matrix4(),

	    		numpoints = segments + 1,
	    		theta,
	    		smallest,

	    		tx, ty, tz,
	    		i, u;


	    	// expose internals
	    	this.tangents = tangents;
	    	this.normals = normals;
	    	this.binormals = binormals;

	    	// compute the tangent vectors for each segment on the path

	    	for ( i = 0; i < numpoints; i ++ ) {

	    		u = i / ( numpoints - 1 );

	    		tangents[ i ] = path.getTangentAt( u );
	    		tangents[ i ].normalize();

	    	}

	    	initialNormal3();

	    	/*
	    	function initialNormal1(lastBinormal) {
	    		// fixed start binormal. Has dangers of 0 vectors
	    		normals[ 0 ] = new THREE.Vector3();
	    		binormals[ 0 ] = new THREE.Vector3();
	    		if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
	    		normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
	    		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
	    	}

	    	function initialNormal2() {

	    		// This uses the Frenet-Serret formula for deriving binormal
	    		var t2 = path.getTangentAt( epsilon );

	    		normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
	    		binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

	    		normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
	    		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

	    	}
	    	*/

	    	function initialNormal3() {

	    		// select an initial normal vector perpendicular to the first tangent vector,
	    		// and in the direction of the smallest tangent xyz component

	    		normals[ 0 ] = new Vector3();
	    		binormals[ 0 ] = new Vector3();
	    		smallest = Number.MAX_VALUE;
	    		tx = Math.abs( tangents[ 0 ].x );
	    		ty = Math.abs( tangents[ 0 ].y );
	    		tz = Math.abs( tangents[ 0 ].z );

	    		if ( tx <= smallest ) {

	    			smallest = tx;
	    			normal.set( 1, 0, 0 );

	    		}

	    		if ( ty <= smallest ) {

	    			smallest = ty;
	    			normal.set( 0, 1, 0 );

	    		}

	    		if ( tz <= smallest ) {

	    			normal.set( 0, 0, 1 );

	    		}

	    		vec.crossVectors( tangents[ 0 ], normal ).normalize();

	    		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
	    		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );

	    	}


	    	// compute the slowly-varying normal and binormal vectors for each segment on the path

	    	for ( i = 1; i < numpoints; i ++ ) {

	    		normals[ i ] = normals[ i - 1 ].clone();

	    		binormals[ i ] = binormals[ i - 1 ].clone();

	    		vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

	    		if ( vec.length() > Number.EPSILON ) {

	    			vec.normalize();

	    			theta = Math.acos( exports.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

	    			normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

	    		}

	    		binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

	    	}


	    	// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

	    	if ( closed ) {

	    		theta = Math.acos( exports.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );
	    		theta /= ( numpoints - 1 );

	    		if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {

	    			theta = - theta;

	    		}

	    		for ( i = 1; i < numpoints; i ++ ) {

	    			// twist a little...
	    			normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
	    			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

	    		}

	    	}

	    };

	    /**
	     * @author Mugen87 / https://github.com/Mugen87
	     *
	     * see: http://www.blackpawn.com/texts/pqtorus/
	     */
	    function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

	    	BufferGeometry.call( this );

	    	this.type = 'TorusKnotBufferGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		tube: tube,
	    		tubularSegments: tubularSegments,
	    		radialSegments: radialSegments,
	    		p: p,
	    		q: q
	    	};

	    	radius = radius || 100;
	    	tube = tube || 40;
	    	tubularSegments = Math.floor( tubularSegments ) || 64;
	    	radialSegments = Math.floor( radialSegments ) || 8;
	    	p = p || 2;
	    	q = q || 3;

	    	// used to calculate buffer length
	    	var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
	    	var indexCount = radialSegments * tubularSegments * 2 * 3;

	    	// buffers
	    	var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
	    	var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

	    	// helper variables
	    	var i, j, index = 0, indexOffset = 0;

	    	var vertex = new Vector3();
	    	var normal = new Vector3();
	    	var uv = new Vector2();

	    	var P1 = new Vector3();
	    	var P2 = new Vector3();

	    	var B = new Vector3();
	    	var T = new Vector3();
	    	var N = new Vector3();

	    	// generate vertices, normals and uvs

	    	for ( i = 0; i <= tubularSegments; ++ i ) {

	    		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

	    		var u = i / tubularSegments * p * Math.PI * 2;

	    		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
	    		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

	    		calculatePositionOnCurve( u, p, q, radius, P1 );
	    		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

	    		// calculate orthonormal basis

	    		T.subVectors( P2, P1 );
	    		N.addVectors( P2, P1 );
	    		B.crossVectors( T, N );
	    		N.crossVectors( B, T );

	    		// normalize B, N. T can be ignored, we don't use it

	    		B.normalize();
	    		N.normalize();

	    		for ( j = 0; j <= radialSegments; ++ j ) {

	    			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
	    			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

	    			var v = j / radialSegments * Math.PI * 2;
	    			var cx = - tube * Math.cos( v );
	    			var cy = tube * Math.sin( v );

	    			// now calculate the final vertex position.
	    			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

	    			vertex.x = P1.x + ( cx * N.x + cy * B.x );
	    			vertex.y = P1.y + ( cx * N.y + cy * B.y );
	    			vertex.z = P1.z + ( cx * N.z + cy * B.z );

	    			// vertex
	    			vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

	    			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
	    			normal.subVectors( vertex, P1 ).normalize();
	    			normals.setXYZ( index, normal.x, normal.y, normal.z );

	    			// uv
	    			uv.x = i / tubularSegments;
	    			uv.y = j / radialSegments;
	    			uvs.setXY( index, uv.x, uv.y );

	    			// increase index
	    			index ++;

	    		}

	    	}

	    	// generate indices

	    	for ( j = 1; j <= tubularSegments; j ++ ) {

	    		for ( i = 1; i <= radialSegments; i ++ ) {

	    			// indices
	    			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
	    			var b = ( radialSegments + 1 ) * j + ( i - 1 );
	    			var c = ( radialSegments + 1 ) * j + i;
	    			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

	    			// face one
	    			indices.setX( indexOffset, a ); indexOffset++;
	    			indices.setX( indexOffset, b ); indexOffset++;
	    			indices.setX( indexOffset, d ); indexOffset++;

	    			// face two
	    			indices.setX( indexOffset, b ); indexOffset++;
	    			indices.setX( indexOffset, c ); indexOffset++;
	    			indices.setX( indexOffset, d ); indexOffset++;

	    		}

	    	}

	    	// build geometry

	    	this.setIndex( indices );
	    	this.addAttribute( 'position', vertices );
	    	this.addAttribute( 'normal', normals );
	    	this.addAttribute( 'uv', uvs );

	    	// this function calculates the current position on the torus curve

	    	function calculatePositionOnCurve( u, p, q, radius, position ) {

	    		var cu = Math.cos( u );
	    		var su = Math.sin( u );
	    		var quOverP = q / p * u;
	    		var cs = Math.cos( quOverP );

	    		position.x = radius * ( 2 + cs ) * 0.5 * cu;
	    		position.y = radius * ( 2 + cs ) * su * 0.5;
	    		position.z = radius * Math.sin( quOverP ) * 0.5;

	    	}

	    }

	    TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	    /**
	     * @author oosmoxiecode
	     */

	    function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

	    	Geometry.call( this );

	    	this.type = 'TorusKnotGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		tube: tube,
	    		tubularSegments: tubularSegments,
	    		radialSegments: radialSegments,
	    		p: p,
	    		q: q
	    	};

	    	if( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

	    	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
	    	this.mergeVertices();

	    }

	    TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	    TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	    /**
	     * @author Mugen87 / https://github.com/Mugen87
	     */

	    function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	    	BufferGeometry.call( this );

	    	this.type = 'TorusBufferGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		tube: tube,
	    		radialSegments: radialSegments,
	    		tubularSegments: tubularSegments,
	    		arc: arc
	    	};

	    	radius = radius || 100;
	    	tube = tube || 40;
	    	radialSegments = Math.floor( radialSegments ) || 8;
	    	tubularSegments = Math.floor( tubularSegments ) || 6;
	    	arc = arc || Math.PI * 2;

	    	// used to calculate buffer length
	    	var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
	    	var indexCount = radialSegments * tubularSegments * 2 * 3;

	    	// buffers
	    	var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
	    	var vertices = new Float32Array( vertexCount * 3 );
	    	var normals = new Float32Array( vertexCount * 3 );
	    	var uvs = new Float32Array( vertexCount * 2 );

	    	// offset variables
	    	var vertexBufferOffset = 0;
	    	var uvBufferOffset = 0;
	    	var indexBufferOffset = 0;

	    	// helper variables
	    	var center = new Vector3();
	    	var vertex = new Vector3();
	    	var normal = new Vector3();

	    	var j, i;

	    	// generate vertices, normals and uvs

	    	for ( j = 0; j <= radialSegments; j ++ ) {

	    		for ( i = 0; i <= tubularSegments; i ++ ) {

	    			var u = i / tubularSegments * arc;
	    			var v = j / radialSegments * Math.PI * 2;

	    			// vertex
	    			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
	    			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
	    			vertex.z = tube * Math.sin( v );

	    			vertices[ vertexBufferOffset ] = vertex.x;
	    			vertices[ vertexBufferOffset + 1 ] = vertex.y;
	    			vertices[ vertexBufferOffset + 2 ] = vertex.z;

	    			// this vector is used to calculate the normal
	    			center.x = radius * Math.cos( u );
	    			center.y = radius * Math.sin( u );

	    			// normal
	    			normal.subVectors( vertex, center ).normalize();

	    			normals[ vertexBufferOffset ] = normal.x;
	    			normals[ vertexBufferOffset + 1 ] = normal.y;
	    			normals[ vertexBufferOffset + 2 ] = normal.z;

	    			// uv
	    			uvs[ uvBufferOffset ] = i / tubularSegments;
	    			uvs[ uvBufferOffset + 1 ] = j / radialSegments;

	    			// update offsets
	    			vertexBufferOffset += 3;
	    			uvBufferOffset += 2;

	    		}

	    	}

	    	// generate indices

	    	for ( j = 1; j <= radialSegments; j ++ ) {

	    		for ( i = 1; i <= tubularSegments; i ++ ) {

	    			// indices
	    			var a = ( tubularSegments + 1 ) * j + i - 1;
	    			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
	    			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
	    			var d = ( tubularSegments + 1 ) * j + i;

	    			// face one
	    			indices[ indexBufferOffset ] = a;
	    			indices[ indexBufferOffset + 1 ] = b;
	    			indices[ indexBufferOffset + 2 ] = d;

	    			// face two
	    			indices[ indexBufferOffset + 3 ] = b;
	    			indices[ indexBufferOffset + 4 ] = c;
	    			indices[ indexBufferOffset + 5 ] = d;

	    			// update offset
	    			indexBufferOffset += 6;

	    		}

	    	}

	    	// build geometry
	    	this.setIndex( new BufferAttribute( indices, 1 ) );
	    	this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
	    	this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
	    	this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	    }

	    TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	    /**
	     * @author oosmoxiecode
	     * @author mrdoob / http://mrdoob.com/
	     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	     */

	    function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	    	Geometry.call( this );

	    	this.type = 'TorusGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		tube: tube,
	    		radialSegments: radialSegments,
	    		tubularSegments: tubularSegments,
	    		arc: arc
	    	};

	    	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );

	    }

	    TorusGeometry.prototype = Object.create( Geometry.prototype );
	    TorusGeometry.prototype.constructor = TorusGeometry;

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     */

	    exports.ShapeUtils = {

	    	// calculate area of the contour polygon

	    	area: function ( contour ) {

	    		var n = contour.length;
	    		var a = 0.0;

	    		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

	    			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

	    		}

	    		return a * 0.5;

	    	},

	    	triangulate: ( function () {

	    		/**
	    		 * This code is a quick port of code written in C++ which was submitted to
	    		 * flipcode.com by John W. Ratcliff  // July 22, 2000
	    		 * See original code and more information here:
	    		 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
	    		 *
	    		 * ported to actionscript by Zevan Rosser
	    		 * www.actionsnippet.com
	    		 *
	    		 * ported to javascript by Joshua Koo
	    		 * http://www.lab4games.net/zz85/blog
	    		 *
	    		 */

	    		function snip( contour, u, v, w, n, verts ) {

	    			var p;
	    			var ax, ay, bx, by;
	    			var cx, cy, px, py;

	    			ax = contour[ verts[ u ] ].x;
	    			ay = contour[ verts[ u ] ].y;

	    			bx = contour[ verts[ v ] ].x;
	    			by = contour[ verts[ v ] ].y;

	    			cx = contour[ verts[ w ] ].x;
	    			cy = contour[ verts[ w ] ].y;

	    			if ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;

	    			var aX, aY, bX, bY, cX, cY;
	    			var apx, apy, bpx, bpy, cpx, cpy;
	    			var cCROSSap, bCROSScp, aCROSSbp;

	    			aX = cx - bx;  aY = cy - by;
	    			bX = ax - cx;  bY = ay - cy;
	    			cX = bx - ax;  cY = by - ay;

	    			for ( p = 0; p < n; p ++ ) {

	    				px = contour[ verts[ p ] ].x;
	    				py = contour[ verts[ p ] ].y;

	    				if ( ( ( px === ax ) && ( py === ay ) ) ||
	    					 ( ( px === bx ) && ( py === by ) ) ||
	    					 ( ( px === cx ) && ( py === cy ) ) )	continue;

	    				apx = px - ax;  apy = py - ay;
	    				bpx = px - bx;  bpy = py - by;
	    				cpx = px - cx;  cpy = py - cy;

	    				// see if p is inside triangle abc

	    				aCROSSbp = aX * bpy - aY * bpx;
	    				cCROSSap = cX * apy - cY * apx;
	    				bCROSScp = bX * cpy - bY * cpx;

	    				if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

	    			}

	    			return true;

	    		}

	    		// takes in an contour array and returns

	    		return function triangulate( contour, indices ) {

	    			var n = contour.length;

	    			if ( n < 3 ) return null;

	    			var result = [],
	    				verts = [],
	    				vertIndices = [];

	    			/* we want a counter-clockwise polygon in verts */

	    			var u, v, w;

	    			if ( exports.ShapeUtils.area( contour ) > 0.0 ) {

	    				for ( v = 0; v < n; v ++ ) verts[ v ] = v;

	    			} else {

	    				for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

	    			}

	    			var nv = n;

	    			/*  remove nv - 2 vertices, creating 1 triangle every time */

	    			var count = 2 * nv;   /* error detection */

	    			for ( v = nv - 1; nv > 2; ) {

	    				/* if we loop, it is probably a non-simple polygon */

	    				if ( ( count -- ) <= 0 ) {

	    					//** Triangulate: ERROR - probable bad polygon!

	    					//throw ( "Warning, unable to triangulate polygon!" );
	    					//return null;
	    					// Sometimes warning is fine, especially polygons are triangulated in reverse.
	    					console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

	    					if ( indices ) return vertIndices;
	    					return result;

	    				}

	    				/* three consecutive vertices in current polygon, <u,v,w> */

	    				u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
	    				v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
	    				w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

	    				if ( snip( contour, u, v, w, nv, verts ) ) {

	    					var a, b, c, s, t;

	    					/* true names of the vertices */

	    					a = verts[ u ];
	    					b = verts[ v ];
	    					c = verts[ w ];

	    					/* output Triangle */

	    					result.push( [ contour[ a ],
	    						contour[ b ],
	    						contour[ c ] ] );


	    					vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

	    					/* remove v from the remaining polygon */

	    					for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

	    						verts[ s ] = verts[ t ];

	    					}

	    					nv --;

	    					/* reset error detection counter */

	    					count = 2 * nv;

	    				}

	    			}

	    			if ( indices ) return vertIndices;
	    			return result;

	    		}

	    	} )(),

	    	triangulateShape: function ( contour, holes ) {

	    		function removeDupEndPts(points) {

	    			var l = points.length;

	    			if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

	    				points.pop();

	    			}

	    		}

	    		removeDupEndPts( contour );
	    		holes.forEach( removeDupEndPts );

	    		function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

	    			// inOtherPt needs to be collinear to the inSegment
	    			if ( inSegPt1.x !== inSegPt2.x ) {

	    				if ( inSegPt1.x < inSegPt2.x ) {

	    					return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

	    				} else {

	    					return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

	    				}

	    			} else {

	    				if ( inSegPt1.y < inSegPt2.y ) {

	    					return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

	    				} else {

	    					return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

	    				}

	    			}

	    		}

	    		function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

	    			var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
	    			var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

	    			var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
	    			var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

	    			var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
	    			var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

	    			if ( Math.abs( limit ) > Number.EPSILON ) {

	    				// not parallel

	    				var perpSeg2;
	    				if ( limit > 0 ) {

	    					if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
	    					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
	    					if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

	    				} else {

	    					if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
	    					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
	    					if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

	    				}

	    				// i.e. to reduce rounding errors
	    				// intersection at endpoint of segment#1?
	    				if ( perpSeg2 === 0 ) {

	    					if ( ( inExcludeAdjacentSegs ) &&
	    						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
	    					return [ inSeg1Pt1 ];

	    				}
	    				if ( perpSeg2 === limit ) {

	    					if ( ( inExcludeAdjacentSegs ) &&
	    						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
	    					return [ inSeg1Pt2 ];

	    				}
	    				// intersection at endpoint of segment#2?
	    				if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
	    				if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

	    				// return real intersection point
	    				var factorSeg1 = perpSeg2 / limit;
	    				return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
	    							y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

	    			} else {

	    				// parallel or collinear
	    				if ( ( perpSeg1 !== 0 ) ||
	    					 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

	    				// they are collinear or degenerate
	    				var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
	    				var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
	    				// both segments are points
	    				if ( seg1Pt && seg2Pt ) {

	    					if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
	    						 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
	    					return [ inSeg1Pt1 ];                 						// they are the same point

	    				}
	    				// segment#1  is a single point
	    				if ( seg1Pt ) {

	    					if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
	    					return [ inSeg1Pt1 ];

	    				}
	    				// segment#2  is a single point
	    				if ( seg2Pt ) {

	    					if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
	    					return [ inSeg2Pt1 ];

	    				}

	    				// they are collinear segments, which might overlap
	    				var seg1min, seg1max, seg1minVal, seg1maxVal;
	    				var seg2min, seg2max, seg2minVal, seg2maxVal;
	    				if ( seg1dx !== 0 ) {

	    					// the segments are NOT on a vertical line
	    					if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

	    						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
	    						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

	    					} else {

	    						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
	    						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

	    					}
	    					if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

	    						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
	    						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

	    					} else {

	    						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
	    						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

	    					}

	    				} else {

	    					// the segments are on a vertical line
	    					if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

	    						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
	    						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

	    					} else {

	    						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
	    						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

	    					}
	    					if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

	    						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
	    						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

	    					} else {

	    						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
	    						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

	    					}

	    				}
	    				if ( seg1minVal <= seg2minVal ) {

	    					if ( seg1maxVal <  seg2minVal )	return [];
	    					if ( seg1maxVal === seg2minVal )	{

	    						if ( inExcludeAdjacentSegs )		return [];
	    						return [ seg2min ];

	    					}
	    					if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
	    					return	[ seg2min, seg2max ];

	    				} else {

	    					if ( seg1minVal >  seg2maxVal )	return [];
	    					if ( seg1minVal === seg2maxVal )	{

	    						if ( inExcludeAdjacentSegs )		return [];
	    						return [ seg1min ];

	    					}
	    					if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
	    					return	[ seg1min, seg2max ];

	    				}

	    			}

	    		}

	    		function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

	    			// The order of legs is important

	    			// translation of all points, so that Vertex is at (0,0)
	    			var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
	    			var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
	    			var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

	    			// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
	    			var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
	    			var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

	    			if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

	    				// angle != 180 deg.

	    				var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
	    				// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

	    				if ( from2toAngle > 0 ) {

	    					// main angle < 180 deg.
	    					return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

	    				} else {

	    					// main angle > 180 deg.
	    					return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

	    				}

	    			} else {

	    				// angle == 180 deg.
	    				// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
	    				return	( from2otherAngle > 0 );

	    			}

	    		}


	    		function removeHoles( contour, holes ) {

	    			var shape = contour.concat(); // work on this shape
	    			var hole;

	    			function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

	    				// Check if hole point lies within angle around shape point
	    				var lastShapeIdx = shape.length - 1;

	    				var prevShapeIdx = inShapeIdx - 1;
	    				if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

	    				var nextShapeIdx = inShapeIdx + 1;
	    				if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

	    				var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
	    				if ( ! insideAngle ) {

	    					// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
	    					return	false;

	    				}

	    				// Check if shape point lies within angle around hole point
	    				var lastHoleIdx = hole.length - 1;

	    				var prevHoleIdx = inHoleIdx - 1;
	    				if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

	    				var nextHoleIdx = inHoleIdx + 1;
	    				if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

	    				insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
	    				if ( ! insideAngle ) {

	    					// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
	    					return	false;

	    				}

	    				return	true;

	    			}

	    			function intersectsShapeEdge( inShapePt, inHolePt ) {

	    				// checks for intersections with shape edges
	    				var sIdx, nextIdx, intersection;
	    				for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

	    					nextIdx = sIdx + 1; nextIdx %= shape.length;
	    					intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
	    					if ( intersection.length > 0 )		return	true;

	    				}

	    				return	false;

	    			}

	    			var indepHoles = [];

	    			function intersectsHoleEdge( inShapePt, inHolePt ) {

	    				// checks for intersections with hole edges
	    				var ihIdx, chkHole,
	    					hIdx, nextIdx, intersection;
	    				for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

	    					chkHole = holes[ indepHoles[ ihIdx ]];
	    					for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

	    						nextIdx = hIdx + 1; nextIdx %= chkHole.length;
	    						intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
	    						if ( intersection.length > 0 )		return	true;

	    					}

	    				}
	    				return	false;

	    			}

	    			var holeIndex, shapeIndex,
	    				shapePt, holePt,
	    				holeIdx, cutKey, failedCuts = [],
	    				tmpShape1, tmpShape2,
	    				tmpHole1, tmpHole2;

	    			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

	    				indepHoles.push( h );

	    			}

	    			var minShapeIndex = 0;
	    			var counter = indepHoles.length * 2;
	    			while ( indepHoles.length > 0 ) {

	    				counter --;
	    				if ( counter < 0 ) {

	    					console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
	    					break;

	    				}

	    				// search for shape-vertex and hole-vertex,
	    				// which can be connected without intersections
	    				for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

	    					shapePt = shape[ shapeIndex ];
	    					holeIndex	= - 1;

	    					// search for hole which can be reached without intersections
	    					for ( var h = 0; h < indepHoles.length; h ++ ) {

	    						holeIdx = indepHoles[ h ];

	    						// prevent multiple checks
	    						cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
	    						if ( failedCuts[ cutKey ] !== undefined )			continue;

	    						hole = holes[ holeIdx ];
	    						for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

	    							holePt = hole[ h2 ];
	    							if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
	    							if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
	    							if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

	    							holeIndex = h2;
	    							indepHoles.splice( h, 1 );

	    							tmpShape1 = shape.slice( 0, shapeIndex + 1 );
	    							tmpShape2 = shape.slice( shapeIndex );
	    							tmpHole1 = hole.slice( holeIndex );
	    							tmpHole2 = hole.slice( 0, holeIndex + 1 );

	    							shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

	    							minShapeIndex = shapeIndex;

	    							// Debug only, to show the selected cuts
	    							// glob_CutLines.push( [ shapePt, holePt ] );

	    							break;

	    						}
	    						if ( holeIndex >= 0 )	break;		// hole-vertex found

	    						failedCuts[ cutKey ] = true;			// remember failure

	    					}
	    					if ( holeIndex >= 0 )	break;		// hole-vertex found

	    				}

	    			}

	    			return shape; 			/* shape with no holes */

	    		}


	    		var i, il, f, face,
	    			key, index,
	    			allPointsMap = {};

	    		// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

	    		var allpoints = contour.concat();

	    		for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

	    			Array.prototype.push.apply( allpoints, holes[ h ] );

	    		}

	    		//console.log( "allpoints",allpoints, allpoints.length );

	    		// prepare all points map

	    		for ( i = 0, il = allpoints.length; i < il; i ++ ) {

	    			key = allpoints[ i ].x + ":" + allpoints[ i ].y;

	    			if ( allPointsMap[ key ] !== undefined ) {

	    				console.warn( "THREE.ShapeUtils: Duplicate point", key, i );

	    			}

	    			allPointsMap[ key ] = i;

	    		}

	    		// remove holes by cutting paths to holes and adding them to the shape
	    		var shapeWithoutHoles = removeHoles( contour, holes );

	    		var triangles = exports.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
	    		//console.log( "triangles",triangles, triangles.length );

	    		// check all face vertices against all points map

	    		for ( i = 0, il = triangles.length; i < il; i ++ ) {

	    			face = triangles[ i ];

	    			for ( f = 0; f < 3; f ++ ) {

	    				key = face[ f ].x + ":" + face[ f ].y;

	    				index = allPointsMap[ key ];

	    				if ( index !== undefined ) {

	    					face[ f ] = index;

	    				}

	    			}

	    		}

	    		return triangles.concat();

	    	},

	    	isClockWise: function ( pts ) {

	    		return exports.ShapeUtils.area( pts ) < 0;

	    	},

	    	// Bezier Curves formulas obtained from
	    	// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

	    	// Quad Bezier Functions

	    	b2: ( function () {

	    		function b2p0( t, p ) {

	    			var k = 1 - t;
	    			return k * k * p;

	    		}

	    		function b2p1( t, p ) {

	    			return 2 * ( 1 - t ) * t * p;

	    		}

	    		function b2p2( t, p ) {

	    			return t * t * p;

	    		}

	    		return function b2( t, p0, p1, p2 ) {

	    			return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

	    		};

	    	} )(),

	    	// Cubic Bezier Functions

	    	b3: ( function () {

	    		function b3p0( t, p ) {

	    			var k = 1 - t;
	    			return k * k * k * p;

	    		}

	    		function b3p1( t, p ) {

	    			var k = 1 - t;
	    			return 3 * k * k * t * p;

	    		}

	    		function b3p2( t, p ) {

	    			var k = 1 - t;
	    			return 3 * k * t * t * p;

	    		}

	    		function b3p3( t, p ) {

	    			return t * t * t * p;

	    		}

	    		return function b3( t, p0, p1, p2, p3 ) {

	    			return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

	    		};

	    	} )()

	    };

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     *
	     * Creates extruded geometry from a path shape.
	     *
	     * parameters = {
	     *
	     *  curveSegments: <int>, // number of points on the curves
	     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	     *  amount: <int>, // Depth to extrude the shape
	     *
	     *  bevelEnabled: <bool>, // turn on bevel
	     *  bevelThickness: <float>, // how deep into the original shape bevel goes
	     *  bevelSize: <float>, // how far from shape outline is bevel
	     *  bevelSegments: <int>, // number of bevel layers
	     *
	     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
	     *
	     *  uvGenerator: <Object> // object that provides UV generator functions
	     *
	     * }
	     **/

	    function ExtrudeGeometry( shapes, options ) {

	    	if ( typeof( shapes ) === "undefined" ) {

	    		shapes = [];
	    		return;

	    	}

	    	Geometry.call( this );

	    	this.type = 'ExtrudeGeometry';

	    	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

	    	this.addShapeList( shapes, options );

	    	this.computeFaceNormals();

	    	// can't really use automatic vertex normals
	    	// as then front and back sides get smoothed too
	    	// should do separate smoothing just for sides

	    	//this.computeVertexNormals();

	    	//console.log( "took", ( Date.now() - startTime ) );

	    }

	    ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	    ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	    ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

	    	var sl = shapes.length;

	    	for ( var s = 0; s < sl; s ++ ) {

	    		var shape = shapes[ s ];
	    		this.addShape( shape, options );

	    	}

	    };

	    ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

	    	var amount = options.amount !== undefined ? options.amount : 100;

	    	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	    	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	    	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	    	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	    	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	    	var steps = options.steps !== undefined ? options.steps : 1;

	    	var extrudePath = options.extrudePath;
	    	var extrudePts, extrudeByPath = false;

	    	// Use default WorldUVGenerator if no UV generators are specified.
	    	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

	    	var splineTube, binormal, normal, position2;
	    	if ( extrudePath ) {

	    		extrudePts = extrudePath.getSpacedPoints( steps );

	    		extrudeByPath = true;
	    		bevelEnabled = false; // bevels not supported for path extrusion

	    		// SETUP TNB variables

	    		// Reuse TNB from TubeGeomtry for now.
	    		// TODO1 - have a .isClosed in spline?

	    		splineTube = options.frames !== undefined ? options.frames : new TubeGeometry.FrenetFrames( extrudePath, steps, false );

	    		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

	    		binormal = new Vector3();
	    		normal = new Vector3();
	    		position2 = new Vector3();

	    	}

	    	// Safeguards if bevels are not enabled

	    	if ( ! bevelEnabled ) {

	    		bevelSegments = 0;
	    		bevelThickness = 0;
	    		bevelSize = 0;

	    	}

	    	// Variables initialization

	    	var ahole, h, hl; // looping of holes
	    	var scope = this;

	    	var shapesOffset = this.vertices.length;

	    	var shapePoints = shape.extractPoints( curveSegments );

	    	var vertices = shapePoints.shape;
	    	var holes = shapePoints.holes;

	    	var reverse = ! exports.ShapeUtils.isClockWise( vertices );

	    	if ( reverse ) {

	    		vertices = vertices.reverse();

	    		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

	    		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

	    			ahole = holes[ h ];

	    			if ( exports.ShapeUtils.isClockWise( ahole ) ) {

	    				holes[ h ] = ahole.reverse();

	    			}

	    		}

	    		reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

	    	}


	    	var faces = exports.ShapeUtils.triangulateShape( vertices, holes );

	    	/* Vertices */

	    	var contour = vertices; // vertices has all points but contour has only points of circumference

	    	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

	    		ahole = holes[ h ];

	    		vertices = vertices.concat( ahole );

	    	}


	    	function scalePt2( pt, vec, size ) {

	    		if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

	    		return vec.clone().multiplyScalar( size ).add( pt );

	    	}

	    	var b, bs, t, z,
	    		vert, vlen = vertices.length,
	    		face, flen = faces.length;


	    	// Find directions for point movement


	    	function getBevelVec( inPt, inPrev, inNext ) {

	    		// computes for inPt the corresponding point inPt' on a new contour
	    		//   shifted by 1 unit (length of normalized vector) to the left
	    		// if we walk along contour clockwise, this new contour is outside the old one
	    		//
	    		// inPt' is the intersection of the two lines parallel to the two
	    		//  adjacent edges of inPt at a distance of 1 unit on the left side.

	    		var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

	    		// good reading for geometry algorithms (here: line-line intersection)
	    		// http://geomalgorithms.com/a05-_intersect-1.html

	    		var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
	    		var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

	    		var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

	    		// check for collinear edges
	    		var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

	    		if ( Math.abs( collinear0 ) > Number.EPSILON ) {

	    			// not collinear

	    			// length of vectors for normalizing

	    			var v_prev_len = Math.sqrt( v_prev_lensq );
	    			var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

	    			// shift adjacent points by unit vectors to the left

	    			var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
	    			var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

	    			var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
	    			var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

	    			// scaling factor for v_prev to intersection point

	    			var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
	    						( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
	    					  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

	    			// vector from inPt to intersection point

	    			v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
	    			v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

	    			// Don't normalize!, otherwise sharp corners become ugly
	    			//  but prevent crazy spikes
	    			var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
	    			if ( v_trans_lensq <= 2 ) {

	    				return	new Vector2( v_trans_x, v_trans_y );

	    			} else {

	    				shrink_by = Math.sqrt( v_trans_lensq / 2 );

	    			}

	    		} else {

	    			// handle special case of collinear edges

	    			var direction_eq = false;		// assumes: opposite
	    			if ( v_prev_x > Number.EPSILON ) {

	    				if ( v_next_x > Number.EPSILON ) {

	    					direction_eq = true;

	    				}

	    			} else {

	    				if ( v_prev_x < - Number.EPSILON ) {

	    					if ( v_next_x < - Number.EPSILON ) {

	    						direction_eq = true;

	    					}

	    				} else {

	    					if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

	    						direction_eq = true;

	    					}

	    				}

	    			}

	    			if ( direction_eq ) {

	    				// console.log("Warning: lines are a straight sequence");
	    				v_trans_x = - v_prev_y;
	    				v_trans_y =  v_prev_x;
	    				shrink_by = Math.sqrt( v_prev_lensq );

	    			} else {

	    				// console.log("Warning: lines are a straight spike");
	    				v_trans_x = v_prev_x;
	    				v_trans_y = v_prev_y;
	    				shrink_by = Math.sqrt( v_prev_lensq / 2 );

	    			}

	    		}

	    		return	new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

	    	}


	    	var contourMovements = [];

	    	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

	    		if ( j === il ) j = 0;
	    		if ( k === il ) k = 0;

	    		//  (j)---(i)---(k)
	    		// console.log('i,j,k', i, j , k)

	    		contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	    	}

	    	var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

	    	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

	    		ahole = holes[ h ];

	    		oneHoleMovements = [];

	    		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

	    			if ( j === il ) j = 0;
	    			if ( k === il ) k = 0;

	    			//  (j)---(i)---(k)
	    			oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

	    		}

	    		holesMovements.push( oneHoleMovements );
	    		verticesMovements = verticesMovements.concat( oneHoleMovements );

	    	}


	    	// Loop bevelSegments, 1 for the front, 1 for the back

	    	for ( b = 0; b < bevelSegments; b ++ ) {

	    		//for ( b = bevelSegments; b > 0; b -- ) {

	    		t = b / bevelSegments;
	    		z = bevelThickness * Math.cos( t * Math.PI / 2 );
	    		bs = bevelSize * Math.sin( t * Math.PI / 2 );

	    		// contract shape

	    		for ( i = 0, il = contour.length; i < il; i ++ ) {

	    			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

	    			v( vert.x, vert.y,  - z );

	    		}

	    		// expand holes

	    		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

	    			ahole = holes[ h ];
	    			oneHoleMovements = holesMovements[ h ];

	    			for ( i = 0, il = ahole.length; i < il; i ++ ) {

	    				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

	    				v( vert.x, vert.y,  - z );

	    			}

	    		}

	    	}

	    	bs = bevelSize;

	    	// Back facing vertices

	    	for ( i = 0; i < vlen; i ++ ) {

	    		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

	    		if ( ! extrudeByPath ) {

	    			v( vert.x, vert.y, 0 );

	    		} else {

	    			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

	    			normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
	    			binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

	    			position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

	    			v( position2.x, position2.y, position2.z );

	    		}

	    	}

	    	// Add stepped vertices...
	    	// Including front facing vertices

	    	var s;

	    	for ( s = 1; s <= steps; s ++ ) {

	    		for ( i = 0; i < vlen; i ++ ) {

	    			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

	    			if ( ! extrudeByPath ) {

	    				v( vert.x, vert.y, amount / steps * s );

	    			} else {

	    				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

	    				normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
	    				binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

	    				position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

	    				v( position2.x, position2.y, position2.z );

	    			}

	    		}

	    	}


	    	// Add bevel segments planes

	    	//for ( b = 1; b <= bevelSegments; b ++ ) {
	    	for ( b = bevelSegments - 1; b >= 0; b -- ) {

	    		t = b / bevelSegments;
	    		z = bevelThickness * Math.cos ( t * Math.PI / 2 );
	    		bs = bevelSize * Math.sin( t * Math.PI / 2 );

	    		// contract shape

	    		for ( i = 0, il = contour.length; i < il; i ++ ) {

	    			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
	    			v( vert.x, vert.y,  amount + z );

	    		}

	    		// expand holes

	    		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

	    			ahole = holes[ h ];
	    			oneHoleMovements = holesMovements[ h ];

	    			for ( i = 0, il = ahole.length; i < il; i ++ ) {

	    				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

	    				if ( ! extrudeByPath ) {

	    					v( vert.x, vert.y,  amount + z );

	    				} else {

	    					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

	    				}

	    			}

	    		}

	    	}

	    	/* Faces */

	    	// Top and bottom faces

	    	buildLidFaces();

	    	// Sides faces

	    	buildSideFaces();


	    	/////  Internal functions

	    	function buildLidFaces() {

	    		if ( bevelEnabled ) {

	    			var layer = 0; // steps + 1
	    			var offset = vlen * layer;

	    			// Bottom faces

	    			for ( i = 0; i < flen; i ++ ) {

	    				face = faces[ i ];
	    				f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

	    			}

	    			layer = steps + bevelSegments * 2;
	    			offset = vlen * layer;

	    			// Top faces

	    			for ( i = 0; i < flen; i ++ ) {

	    				face = faces[ i ];
	    				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

	    			}

	    		} else {

	    			// Bottom faces

	    			for ( i = 0; i < flen; i ++ ) {

	    				face = faces[ i ];
	    				f3( face[ 2 ], face[ 1 ], face[ 0 ] );

	    			}

	    			// Top faces

	    			for ( i = 0; i < flen; i ++ ) {

	    				face = faces[ i ];
	    				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

	    			}

	    		}

	    	}

	    	// Create faces for the z-sides of the shape

	    	function buildSideFaces() {

	    		var layeroffset = 0;
	    		sidewalls( contour, layeroffset );
	    		layeroffset += contour.length;

	    		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

	    			ahole = holes[ h ];
	    			sidewalls( ahole, layeroffset );

	    			//, true
	    			layeroffset += ahole.length;

	    		}

	    	}

	    	function sidewalls( contour, layeroffset ) {

	    		var j, k;
	    		i = contour.length;

	    		while ( -- i >= 0 ) {

	    			j = i;
	    			k = i - 1;
	    			if ( k < 0 ) k = contour.length - 1;

	    			//console.log('b', i,j, i-1, k,vertices.length);

	    			var s = 0, sl = steps  + bevelSegments * 2;

	    			for ( s = 0; s < sl; s ++ ) {

	    				var slen1 = vlen * s;
	    				var slen2 = vlen * ( s + 1 );

	    				var a = layeroffset + j + slen1,
	    					b = layeroffset + k + slen1,
	    					c = layeroffset + k + slen2,
	    					d = layeroffset + j + slen2;

	    				f4( a, b, c, d, contour, s, sl, j, k );

	    			}

	    		}

	    	}


	    	function v( x, y, z ) {

	    		scope.vertices.push( new Vector3( x, y, z ) );

	    	}

	    	function f3( a, b, c ) {

	    		a += shapesOffset;
	    		b += shapesOffset;
	    		c += shapesOffset;

	    		scope.faces.push( new Face3( a, b, c, null, null, 0 ) );

	    		var uvs = uvgen.generateTopUV( scope, a, b, c );

	    		scope.faceVertexUvs[ 0 ].push( uvs );

	    	}

	    	function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

	    		a += shapesOffset;
	    		b += shapesOffset;
	    		c += shapesOffset;
	    		d += shapesOffset;

	    		scope.faces.push( new Face3( a, b, d, null, null, 1 ) );
	    		scope.faces.push( new Face3( b, c, d, null, null, 1 ) );

	    		var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

	    		scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
	    		scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

	    	}

	    };

	    ExtrudeGeometry.WorldUVGenerator = {

	    	generateTopUV: function ( geometry, indexA, indexB, indexC ) {

	    		var vertices = geometry.vertices;

	    		var a = vertices[ indexA ];
	    		var b = vertices[ indexB ];
	    		var c = vertices[ indexC ];

	    		return [
	    			new Vector2( a.x, a.y ),
	    			new Vector2( b.x, b.y ),
	    			new Vector2( c.x, c.y )
	    		];

	    	},

	    	generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

	    		var vertices = geometry.vertices;

	    		var a = vertices[ indexA ];
	    		var b = vertices[ indexB ];
	    		var c = vertices[ indexC ];
	    		var d = vertices[ indexD ];

	    		if ( Math.abs( a.y - b.y ) < 0.01 ) {

	    			return [
	    				new Vector2( a.x, 1 - a.z ),
	    				new Vector2( b.x, 1 - b.z ),
	    				new Vector2( c.x, 1 - c.z ),
	    				new Vector2( d.x, 1 - d.z )
	    			];

	    		} else {

	    			return [
	    				new Vector2( a.y, 1 - a.z ),
	    				new Vector2( b.y, 1 - b.z ),
	    				new Vector2( c.y, 1 - c.z ),
	    				new Vector2( d.y, 1 - d.z )
	    			];

	    		}

	    	}
	    };

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * Text = 3D Text
	     *
	     * parameters = {
	     *  font: <THREE.Font>, // font
	     *
	     *  size: <float>, // size of the text
	     *  height: <float>, // thickness to extrude text
	     *  curveSegments: <int>, // number of points on the curves
	     *
	     *  bevelEnabled: <bool>, // turn on bevel
	     *  bevelThickness: <float>, // how deep into text bevel goes
	     *  bevelSize: <float> // how far from text outline is bevel
	     * }
	     */

	    function TextGeometry( text, parameters ) {

	    	parameters = parameters || {};

	    	var font = parameters.font;

	    	if ( (font && font.isFont) === false ) {

	    		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
	    		return new Geometry();

	    	}

	    	var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

	    	// translate parameters to ExtrudeGeometry API

	    	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	    	// defaults

	    	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
	    	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
	    	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

	    	ExtrudeGeometry.call( this, shapes, parameters );

	    	this.type = 'TextGeometry';

	    }

	    TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );
	    TextGeometry.prototype.constructor = TextGeometry;

	    /**
	     * @author benaadams / https://twitter.com/ben_a_adams
	     * based on THREE.SphereGeometry
	     */

	    function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	    	BufferGeometry.call( this );

	    	this.type = 'SphereBufferGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		widthSegments: widthSegments,
	    		heightSegments: heightSegments,
	    		phiStart: phiStart,
	    		phiLength: phiLength,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	radius = radius || 50;

	    	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	    	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	    	phiStart = phiStart !== undefined ? phiStart : 0;
	    	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	    	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	    	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	    	var thetaEnd = thetaStart + thetaLength;

	    	var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

	    	var positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

	    	var index = 0, vertices = [], normal = new Vector3();

	    	for ( var y = 0; y <= heightSegments; y ++ ) {

	    		var verticesRow = [];

	    		var v = y / heightSegments;

	    		for ( var x = 0; x <= widthSegments; x ++ ) {

	    			var u = x / widthSegments;

	    			var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
	    			var py = radius * Math.cos( thetaStart + v * thetaLength );
	    			var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

	    			normal.set( px, py, pz ).normalize();

	    			positions.setXYZ( index, px, py, pz );
	    			normals.setXYZ( index, normal.x, normal.y, normal.z );
	    			uvs.setXY( index, u, 1 - v );

	    			verticesRow.push( index );

	    			index ++;

	    		}

	    		vertices.push( verticesRow );

	    	}

	    	var indices = [];

	    	for ( var y = 0; y < heightSegments; y ++ ) {

	    		for ( var x = 0; x < widthSegments; x ++ ) {

	    			var v1 = vertices[ y ][ x + 1 ];
	    			var v2 = vertices[ y ][ x ];
	    			var v3 = vertices[ y + 1 ][ x ];
	    			var v4 = vertices[ y + 1 ][ x + 1 ];

	    			if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
	    			if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

	    		}

	    	}

	    	this.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
	    	this.addAttribute( 'position', positions );
	    	this.addAttribute( 'normal', normals );
	    	this.addAttribute( 'uv', uvs );

	    	this.boundingSphere = new Sphere( new Vector3(), radius );

	    }

	    SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	    	Geometry.call( this );

	    	this.type = 'SphereGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		widthSegments: widthSegments,
	    		heightSegments: heightSegments,
	    		phiStart: phiStart,
	    		phiLength: phiLength,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

	    }

	    SphereGeometry.prototype = Object.create( Geometry.prototype );
	    SphereGeometry.prototype.constructor = SphereGeometry;

	    /**
	     * @author Mugen87 / https://github.com/Mugen87
	     */

	    function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	    	BufferGeometry.call( this );

	    	this.type = 'RingBufferGeometry';

	    	this.parameters = {
	    		innerRadius: innerRadius,
	    		outerRadius: outerRadius,
	    		thetaSegments: thetaSegments,
	    		phiSegments: phiSegments,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	innerRadius = innerRadius || 20;
	    	outerRadius = outerRadius || 50;

	    	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	    	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	    	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
	    	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

	    	// these are used to calculate buffer length
	    	var vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );
	    	var indexCount = thetaSegments * phiSegments * 2 * 3;

	    	// buffers
	    	var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
	    	var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

	    	// some helper variables
	    	var index = 0, indexOffset = 0, segment;
	    	var radius = innerRadius;
	    	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
	    	var vertex = new Vector3();
	    	var uv = new Vector2();
	    	var j, i;

	    	// generate vertices, normals and uvs

	    	// values are generate from the inside of the ring to the outside

	    	for ( j = 0; j <= phiSegments; j ++ ) {

	    		for ( i = 0; i <= thetaSegments; i ++ ) {

	    			segment = thetaStart + i / thetaSegments * thetaLength;

	    			// vertex
	    			vertex.x = radius * Math.cos( segment );
	    			vertex.y = radius * Math.sin( segment );
	    			vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

	    			// normal
	    			normals.setXYZ( index, 0, 0, 1 );

	    			// uv
	    			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
	    			uv.y = ( vertex.y / outerRadius + 1 ) / 2;
	    			uvs.setXY( index, uv.x, uv.y );

	    			// increase index
	    			index++;

	    		}

	    		// increase the radius for next row of vertices
	    		radius += radiusStep;

	    	}

	    	// generate indices

	    	for ( j = 0; j < phiSegments; j ++ ) {

	    		var thetaSegmentLevel = j * ( thetaSegments + 1 );

	    		for ( i = 0; i < thetaSegments; i ++ ) {

	    			segment = i + thetaSegmentLevel;

	    			// indices
	    			var a = segment;
	    			var b = segment + thetaSegments + 1;
	    			var c = segment + thetaSegments + 2;
	    			var d = segment + 1;

	    			// face one
	    			indices.setX( indexOffset, a ); indexOffset++;
	    			indices.setX( indexOffset, b ); indexOffset++;
	    			indices.setX( indexOffset, c ); indexOffset++;

	    			// face two
	    			indices.setX( indexOffset, a ); indexOffset++;
	    			indices.setX( indexOffset, c ); indexOffset++;
	    			indices.setX( indexOffset, d ); indexOffset++;

	    		}

	    	}

	    	// build geometry

	    	this.setIndex( indices );
	    	this.addAttribute( 'position', vertices );
	    	this.addAttribute( 'normal', normals );
	    	this.addAttribute( 'uv', uvs );

	    }

	    RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	    /**
	     * @author Kaleb Murphy
	     */

	    function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	    	Geometry.call( this );

	    	this.type = 'RingGeometry';

	    	this.parameters = {
	    		innerRadius: innerRadius,
	    		outerRadius: outerRadius,
	    		thetaSegments: thetaSegments,
	    		phiSegments: phiSegments,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );

	    }

	    RingGeometry.prototype = Object.create( Geometry.prototype );
	    RingGeometry.prototype.constructor = RingGeometry;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	     */

	    function PlaneGeometry( width, height, widthSegments, heightSegments ) {

	    	Geometry.call( this );

	    	this.type = 'PlaneGeometry';

	    	this.parameters = {
	    		width: width,
	    		height: height,
	    		widthSegments: widthSegments,
	    		heightSegments: heightSegments
	    	};

	    	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

	    }

	    PlaneGeometry.prototype = Object.create( Geometry.prototype );
	    PlaneGeometry.prototype.constructor = PlaneGeometry;

	    /**
	     * @author Mugen87 / https://github.com/Mugen87
	     */

	     // points - to create a closed torus, one must use a set of points
	     //    like so: [ a, b, c, d, a ], see first is the same as last.
	     // segments - the number of circumference segments to create
	     // phiStart - the starting radian
	     // phiLength - the radian (0 to 2PI) range of the lathed section
	     //    2PI is a closed lathe, less than 2PI is a portion.

	    function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

	    	BufferGeometry.call( this );

	    	this.type = 'LatheBufferGeometry';

	    	this.parameters = {
	    		points: points,
	    		segments: segments,
	    		phiStart: phiStart,
	    		phiLength: phiLength
	    	};

	    	segments = Math.floor( segments ) || 12;
	    	phiStart = phiStart || 0;
	    	phiLength = phiLength || Math.PI * 2;

	    	// clamp phiLength so it's in range of [ 0, 2PI ]
	    	phiLength = exports.Math.clamp( phiLength, 0, Math.PI * 2 );

	    	// these are used to calculate buffer length
	    	var vertexCount = ( segments + 1 ) * points.length;
	    	var indexCount = segments * points.length * 2 * 3;

	    	// buffers
	    	var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
	    	var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

	    	// helper variables
	    	var index = 0, indexOffset = 0, base;
	    	var inverseSegments = 1.0 / segments;
	    	var vertex = new Vector3();
	    	var uv = new Vector2();
	    	var i, j;

	    	// generate vertices and uvs

	    	for ( i = 0; i <= segments; i ++ ) {

	    		var phi = phiStart + i * inverseSegments * phiLength;

	    		var sin = Math.sin( phi );
	    		var cos = Math.cos( phi );

	    		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

	    			// vertex
	    			vertex.x = points[ j ].x * sin;
	    			vertex.y = points[ j ].y;
	    			vertex.z = points[ j ].x * cos;
	    			vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

	    			// uv
	    			uv.x = i / segments;
	    			uv.y = j / ( points.length - 1 );
	    			uvs.setXY( index, uv.x, uv.y );

	    			// increase index
	    			index ++;

	    		}

	    	}

	    	// generate indices

	    	for ( i = 0; i < segments; i ++ ) {

	    		for ( j = 0; j < ( points.length - 1 ); j ++ ) {

	    			base = j + i * points.length;

	    			// indices
	    			var a = base;
	    			var b = base + points.length;
	    			var c = base + points.length + 1;
	    			var d = base + 1;

	    			// face one
	    			indices.setX( indexOffset, a ); indexOffset++;
	    			indices.setX( indexOffset, b ); indexOffset++;
	    			indices.setX( indexOffset, d ); indexOffset++;

	    			// face two
	    			indices.setX( indexOffset, b ); indexOffset++;
	    			indices.setX( indexOffset, c ); indexOffset++;
	    			indices.setX( indexOffset, d ); indexOffset++;

	    		}

	    	}

	    	// build geometry

	    	this.setIndex( indices );
	    	this.addAttribute( 'position', vertices );
	    	this.addAttribute( 'uv', uvs );

	    	// generate normals

	    	this.computeVertexNormals();

	    	// if the geometry is closed, we need to average the normals along the seam.
	    	// because the corresponding vertices are identical (but still have different UVs).

	    	if( phiLength === Math.PI * 2 ) {

	    		var normals = this.attributes.normal.array;
	    		var n1 = new Vector3();
	    		var n2 = new Vector3();
	    		var n = new Vector3();

	    		// this is the buffer offset for the last line of vertices
	    		base = segments * points.length * 3;

	    		for( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

	    			// select the normal of the vertex in the first line
	    			n1.x = normals[ j + 0 ];
	    			n1.y = normals[ j + 1 ];
	    			n1.z = normals[ j + 2 ];

	    			// select the normal of the vertex in the last line
	    			n2.x = normals[ base + j + 0 ];
	    			n2.y = normals[ base + j + 1 ];
	    			n2.z = normals[ base + j + 2 ];

	    			// average normals
	    			n.addVectors( n1, n2 ).normalize();

	    			// assign the new values to both normals
	    			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
	    			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
	    			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

	    		} // next row

	    	}

	    }

	    LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	    /**
	     * @author astrodud / http://astrodud.isgreat.org/
	     * @author zz85 / https://github.com/zz85
	     * @author bhouston / http://clara.io
	     */

	    // points - to create a closed torus, one must use a set of points
	    //    like so: [ a, b, c, d, a ], see first is the same as last.
	    // segments - the number of circumference segments to create
	    // phiStart - the starting radian
	    // phiLength - the radian (0 to 2PI) range of the lathed section
	    //    2PI is a closed lathe, less than 2PI is a portion.

	    function LatheGeometry( points, segments, phiStart, phiLength ) {

	    	Geometry.call( this );

	    	this.type = 'LatheGeometry';

	    	this.parameters = {
	    		points: points,
	    		segments: segments,
	    		phiStart: phiStart,
	    		phiLength: phiLength
	    	};

	    	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
	    	this.mergeVertices();

	    }

	    LatheGeometry.prototype = Object.create( Geometry.prototype );
	    LatheGeometry.prototype.constructor = LatheGeometry;

	    /**
	     * @author jonobr1 / http://jonobr1.com
	     *
	     * Creates a one-sided polygonal geometry from a path shape. Similar to
	     * ExtrudeGeometry.
	     *
	     * parameters = {
	     *
	     *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	     *
	     *	material: <int> // material index for front and back faces
	     *	uvGenerator: <Object> // object that provides UV generator functions
	     *
	     * }
	     **/

	    function ShapeGeometry( shapes, options ) {

	    	Geometry.call( this );

	    	this.type = 'ShapeGeometry';

	    	if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

	    	this.addShapeList( shapes, options );

	    	this.computeFaceNormals();

	    }

	    ShapeGeometry.prototype = Object.create( Geometry.prototype );
	    ShapeGeometry.prototype.constructor = ShapeGeometry;

	    /**
	     * Add an array of shapes to THREE.ShapeGeometry.
	     */
	    ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

	    	for ( var i = 0, l = shapes.length; i < l; i ++ ) {

	    		this.addShape( shapes[ i ], options );

	    	}

	    	return this;

	    };

	    /**
	     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	     */
	    ShapeGeometry.prototype.addShape = function ( shape, options ) {

	    	if ( options === undefined ) options = {};
	    	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	    	var material = options.material;
	    	var uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

	    	//

	    	var i, l, hole;

	    	var shapesOffset = this.vertices.length;
	    	var shapePoints = shape.extractPoints( curveSegments );

	    	var vertices = shapePoints.shape;
	    	var holes = shapePoints.holes;

	    	var reverse = ! exports.ShapeUtils.isClockWise( vertices );

	    	if ( reverse ) {

	    		vertices = vertices.reverse();

	    		// Maybe we should also check if holes are in the opposite direction, just to be safe...

	    		for ( i = 0, l = holes.length; i < l; i ++ ) {

	    			hole = holes[ i ];

	    			if ( exports.ShapeUtils.isClockWise( hole ) ) {

	    				holes[ i ] = hole.reverse();

	    			}

	    		}

	    		reverse = false;

	    	}

	    	var faces = exports.ShapeUtils.triangulateShape( vertices, holes );

	    	// Vertices

	    	for ( i = 0, l = holes.length; i < l; i ++ ) {

	    		hole = holes[ i ];
	    		vertices = vertices.concat( hole );

	    	}

	    	//

	    	var vert, vlen = vertices.length;
	    	var face, flen = faces.length;

	    	for ( i = 0; i < vlen; i ++ ) {

	    		vert = vertices[ i ];

	    		this.vertices.push( new Vector3( vert.x, vert.y, 0 ) );

	    	}

	    	for ( i = 0; i < flen; i ++ ) {

	    		face = faces[ i ];

	    		var a = face[ 0 ] + shapesOffset;
	    		var b = face[ 1 ] + shapesOffset;
	    		var c = face[ 2 ] + shapesOffset;

	    		this.faces.push( new Face3( a, b, c, null, null, material ) );
	    		this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

	    	}

	    };

	    /**
	     * @author WestLangley / http://github.com/WestLangley
	     */

	    function EdgesGeometry( geometry, thresholdAngle ) {

	    	BufferGeometry.call( this );

	    	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

	    	var thresholdDot = Math.cos( exports.Math.DEG2RAD * thresholdAngle );

	    	var edge = [ 0, 0 ], hash = {};

	    	function sortFunction( a, b ) {

	    		return a - b;

	    	}

	    	var keys = [ 'a', 'b', 'c' ];

	    	var geometry2;

	    	if ( (geometry && geometry.isBufferGeometry) ) {

	    		geometry2 = new Geometry();
	    		geometry2.fromBufferGeometry( geometry );

	    	} else {

	    		geometry2 = geometry.clone();

	    	}

	    	geometry2.mergeVertices();
	    	geometry2.computeFaceNormals();

	    	var vertices = geometry2.vertices;
	    	var faces = geometry2.faces;

	    	for ( var i = 0, l = faces.length; i < l; i ++ ) {

	    		var face = faces[ i ];

	    		for ( var j = 0; j < 3; j ++ ) {

	    			edge[ 0 ] = face[ keys[ j ] ];
	    			edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
	    			edge.sort( sortFunction );

	    			var key = edge.toString();

	    			if ( hash[ key ] === undefined ) {

	    				hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

	    			} else {

	    				hash[ key ].face2 = i;

	    			}

	    		}

	    	}

	    	var coords = [];

	    	for ( var key in hash ) {

	    		var h = hash[ key ];

	    		if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

	    			var vertex = vertices[ h.vert1 ];
	    			coords.push( vertex.x );
	    			coords.push( vertex.y );
	    			coords.push( vertex.z );

	    			vertex = vertices[ h.vert2 ];
	    			coords.push( vertex.x );
	    			coords.push( vertex.y );
	    			coords.push( vertex.z );

	    		}

	    	}

	    	this.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );

	    }

	    EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	    EdgesGeometry.prototype.constructor = EdgesGeometry;

	    /**
	     * @author Mugen87 / https://github.com/Mugen87
	     */

	    function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	    	BufferGeometry.call( this );

	    	this.type = 'CylinderBufferGeometry';

	    	this.parameters = {
	    		radiusTop: radiusTop,
	    		radiusBottom: radiusBottom,
	    		height: height,
	    		radialSegments: radialSegments,
	    		heightSegments: heightSegments,
	    		openEnded: openEnded,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	var scope = this;

	    	radiusTop = radiusTop !== undefined ? radiusTop : 20;
	    	radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
	    	height = height !== undefined ? height : 100;

	    	radialSegments = Math.floor( radialSegments ) || 8;
	    	heightSegments = Math.floor( heightSegments ) || 1;

	    	openEnded = openEnded !== undefined ? openEnded : false;
	    	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
	    	thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

	    	// used to calculate buffer length

	    	var nbCap = 0;

	    	if ( openEnded === false ) {

	    		if ( radiusTop > 0 ) nbCap ++;
	    		if ( radiusBottom > 0 ) nbCap ++;

	    	}

	    	var vertexCount = calculateVertexCount();
	    	var indexCount = calculateIndexCount();

	    	// buffers

	    	var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );
	    	var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
	    	var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

	    	// helper variables

	    	var index = 0,
	    	    indexOffset = 0,
	    	    indexArray = [],
	    	    halfHeight = height / 2;

	    	// group variables
	    	var groupStart = 0;

	    	// generate geometry

	    	generateTorso();

	    	if ( openEnded === false ) {

	    		if ( radiusTop > 0 ) generateCap( true );
	    		if ( radiusBottom > 0 ) generateCap( false );

	    	}

	    	// build geometry

	    	this.setIndex( indices );
	    	this.addAttribute( 'position', vertices );
	    	this.addAttribute( 'normal', normals );
	    	this.addAttribute( 'uv', uvs );

	    	// helper functions

	    	function calculateVertexCount() {

	    		var count = ( radialSegments + 1 ) * ( heightSegments + 1 );

	    		if ( openEnded === false ) {

	    			count += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );

	    		}

	    		return count;

	    	}

	    	function calculateIndexCount() {

	    		var count = radialSegments * heightSegments * 2 * 3;

	    		if ( openEnded === false ) {

	    			count += radialSegments * nbCap * 3;

	    		}

	    		return count;

	    	}

	    	function generateTorso() {

	    		var x, y;
	    		var normal = new Vector3();
	    		var vertex = new Vector3();

	    		var groupCount = 0;

	    		// this will be used to calculate the normal
	    		var slope = ( radiusBottom - radiusTop ) / height;

	    		// generate vertices, normals and uvs

	    		for ( y = 0; y <= heightSegments; y ++ ) {

	    			var indexRow = [];

	    			var v = y / heightSegments;

	    			// calculate the radius of the current row
	    			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

	    			for ( x = 0; x <= radialSegments; x ++ ) {

	    				var u = x / radialSegments;

	    				var theta = u * thetaLength + thetaStart;

	    				var sinTheta = Math.sin( theta );
	    				var cosTheta = Math.cos( theta );

	    				// vertex
	    				vertex.x = radius * sinTheta;
	    				vertex.y = - v * height + halfHeight;
	    				vertex.z = radius * cosTheta;
	    				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

	    				// normal
	    				normal.set( sinTheta, slope, cosTheta ).normalize();
	    				normals.setXYZ( index, normal.x, normal.y, normal.z );

	    				// uv
	    				uvs.setXY( index, u, 1 - v );

	    				// save index of vertex in respective row
	    				indexRow.push( index );

	    				// increase index
	    				index ++;

	    			}

	    			// now save vertices of the row in our index array
	    			indexArray.push( indexRow );

	    		}

	    		// generate indices

	    		for ( x = 0; x < radialSegments; x ++ ) {

	    			for ( y = 0; y < heightSegments; y ++ ) {

	    				// we use the index array to access the correct indices
	    				var i1 = indexArray[ y ][ x ];
	    				var i2 = indexArray[ y + 1 ][ x ];
	    				var i3 = indexArray[ y + 1 ][ x + 1 ];
	    				var i4 = indexArray[ y ][ x + 1 ];

	    				// face one
	    				indices.setX( indexOffset, i1 ); indexOffset ++;
	    				indices.setX( indexOffset, i2 ); indexOffset ++;
	    				indices.setX( indexOffset, i4 ); indexOffset ++;

	    				// face two
	    				indices.setX( indexOffset, i2 ); indexOffset ++;
	    				indices.setX( indexOffset, i3 ); indexOffset ++;
	    				indices.setX( indexOffset, i4 ); indexOffset ++;

	    				// update counters
	    				groupCount += 6;

	    			}

	    		}

	    		// add a group to the geometry. this will ensure multi material support
	    		scope.addGroup( groupStart, groupCount, 0 );

	    		// calculate new start value for groups
	    		groupStart += groupCount;

	    	}

	    	function generateCap( top ) {

	    		var x, centerIndexStart, centerIndexEnd;

	    		var uv = new Vector2();
	    		var vertex = new Vector3();

	    		var groupCount = 0;

	    		var radius = ( top === true ) ? radiusTop : radiusBottom;
	    		var sign = ( top === true ) ? 1 : - 1;

	    		// save the index of the first center vertex
	    		centerIndexStart = index;

	    		// first we generate the center vertex data of the cap.
	    		// because the geometry needs one set of uvs per face,
	    		// we must generate a center vertex per face/segment

	    		for ( x = 1; x <= radialSegments; x ++ ) {

	    			// vertex
	    			vertices.setXYZ( index, 0, halfHeight * sign, 0 );

	    			// normal
	    			normals.setXYZ( index, 0, sign, 0 );

	    			// uv
	    			uv.x = 0.5;
	    			uv.y = 0.5;

	    			uvs.setXY( index, uv.x, uv.y );

	    			// increase index
	    			index ++;

	    		}

	    		// save the index of the last center vertex
	    		centerIndexEnd = index;

	    		// now we generate the surrounding vertices, normals and uvs

	    		for ( x = 0; x <= radialSegments; x ++ ) {

	    			var u = x / radialSegments;
	    			var theta = u * thetaLength + thetaStart;

	    			var cosTheta = Math.cos( theta );
	    			var sinTheta = Math.sin( theta );

	    			// vertex
	    			vertex.x = radius * sinTheta;
	    			vertex.y = halfHeight * sign;
	    			vertex.z = radius * cosTheta;
	    			vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

	    			// normal
	    			normals.setXYZ( index, 0, sign, 0 );

	    			// uv
	    			uv.x = ( cosTheta * 0.5 ) + 0.5;
	    			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
	    			uvs.setXY( index, uv.x, uv.y );

	    			// increase index
	    			index ++;

	    		}

	    		// generate indices

	    		for ( x = 0; x < radialSegments; x ++ ) {

	    			var c = centerIndexStart + x;
	    			var i = centerIndexEnd + x;

	    			if ( top === true ) {

	    				// face top
	    				indices.setX( indexOffset, i ); indexOffset ++;
	    				indices.setX( indexOffset, i + 1 ); indexOffset ++;
	    				indices.setX( indexOffset, c ); indexOffset ++;

	    			} else {

	    				// face bottom
	    				indices.setX( indexOffset, i + 1 ); indexOffset ++;
	    				indices.setX( indexOffset, i ); indexOffset ++;
	    				indices.setX( indexOffset, c ); indexOffset ++;

	    			}

	    			// update counters
	    			groupCount += 3;

	    		}

	    		// add a group to the geometry. this will ensure multi material support
	    		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

	    		// calculate new start value for groups
	    		groupStart += groupCount;

	    	}

	    }

	    CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	    	Geometry.call( this );

	    	this.type = 'CylinderGeometry';

	    	this.parameters = {
	    		radiusTop: radiusTop,
	    		radiusBottom: radiusBottom,
	    		height: height,
	    		radialSegments: radialSegments,
	    		heightSegments: heightSegments,
	    		openEnded: openEnded,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
	    	this.mergeVertices();

	    }

	    CylinderGeometry.prototype = Object.create( Geometry.prototype );
	    CylinderGeometry.prototype.constructor = CylinderGeometry;

	    /**
	     * @author abelnation / http://github.com/abelnation
	     */

	    function ConeGeometry(
	    	radius, height,
	    	radialSegments, heightSegments,
	    	openEnded, thetaStart, thetaLength ) {

	    	CylinderGeometry.call( this,
	    		0, radius, height,
	    		radialSegments, heightSegments,
	    		openEnded, thetaStart, thetaLength );

	    	this.type = 'ConeGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		height: height,
	    		radialSegments: radialSegments,
	    		heightSegments: heightSegments,
	    		openEnded: openEnded,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    }

	    ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	    ConeGeometry.prototype.constructor = ConeGeometry;

	    /*
	     * @author: abelnation / http://github.com/abelnation
	     */

	    function ConeBufferGeometry(
	    	radius, height,
	    	radialSegments, heightSegments,
	    	openEnded, thetaStart, thetaLength ) {

	    	CylinderBufferGeometry.call( this,
	    		0, radius, height,
	    		radialSegments, heightSegments,
	    		openEnded, thetaStart, thetaLength );

	    	this.type = 'ConeBufferGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		height: height,
	    		radialSegments: radialSegments,
	    		heightSegments: heightSegments,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    }

	    ConeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	    /**
	     * @author benaadams / https://twitter.com/ben_a_adams
	     */

	    function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

	    	BufferGeometry.call( this );

	    	this.type = 'CircleBufferGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		segments: segments,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	radius = radius || 50;
	    	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

	    	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	    	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	    	var vertices = segments + 2;

	    	var positions = new Float32Array( vertices * 3 );
	    	var normals = new Float32Array( vertices * 3 );
	    	var uvs = new Float32Array( vertices * 2 );

	    	// center data is already zero, but need to set a few extras
	    	normals[ 2 ] = 1.0;
	    	uvs[ 0 ] = 0.5;
	    	uvs[ 1 ] = 0.5;

	    	for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

	    		var segment = thetaStart + s / segments * thetaLength;

	    		positions[ i ] = radius * Math.cos( segment );
	    		positions[ i + 1 ] = radius * Math.sin( segment );

	    		normals[ i + 2 ] = 1; // normal z

	    		uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
	    		uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

	    	}

	    	var indices = [];

	    	for ( var i = 1; i <= segments; i ++ ) {

	    		indices.push( i, i + 1, 0 );

	    	}

	    	this.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );
	    	this.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
	    	this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
	    	this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	    	this.boundingSphere = new Sphere( new Vector3(), radius );

	    }

	    CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;

	    /**
	     * @author hughes
	     */

	    function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

	    	Geometry.call( this );

	    	this.type = 'CircleGeometry';

	    	this.parameters = {
	    		radius: radius,
	    		segments: segments,
	    		thetaStart: thetaStart,
	    		thetaLength: thetaLength
	    	};

	    	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

	    }

	    CircleGeometry.prototype = Object.create( Geometry.prototype );
	    CircleGeometry.prototype.constructor = CircleGeometry;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	     */

	    function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	    	Geometry.call( this );

	    	this.type = 'BoxGeometry';

	    	this.parameters = {
	    		width: width,
	    		height: height,
	    		depth: depth,
	    		widthSegments: widthSegments,
	    		heightSegments: heightSegments,
	    		depthSegments: depthSegments
	    	};

	    	this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
	    	this.mergeVertices();

	    }

	    BoxGeometry.prototype = Object.create( Geometry.prototype );
	    BoxGeometry.prototype.constructor = BoxGeometry;



	    var Geometries = Object.freeze({
	    	WireframeGeometry: WireframeGeometry,
	    	ParametricGeometry: ParametricGeometry,
	    	TetrahedronGeometry: TetrahedronGeometry,
	    	OctahedronGeometry: OctahedronGeometry,
	    	IcosahedronGeometry: IcosahedronGeometry,
	    	DodecahedronGeometry: DodecahedronGeometry,
	    	PolyhedronGeometry: PolyhedronGeometry,
	    	TubeGeometry: TubeGeometry,
	    	TorusKnotGeometry: TorusKnotGeometry,
	    	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
	    	TorusGeometry: TorusGeometry,
	    	TorusBufferGeometry: TorusBufferGeometry,
	    	TextGeometry: TextGeometry,
	    	SphereBufferGeometry: SphereBufferGeometry,
	    	SphereGeometry: SphereGeometry,
	    	RingGeometry: RingGeometry,
	    	RingBufferGeometry: RingBufferGeometry,
	    	PlaneBufferGeometry: PlaneBufferGeometry,
	    	PlaneGeometry: PlaneGeometry,
	    	LatheGeometry: LatheGeometry,
	    	LatheBufferGeometry: LatheBufferGeometry,
	    	ShapeGeometry: ShapeGeometry,
	    	ExtrudeGeometry: ExtrudeGeometry,
	    	EdgesGeometry: EdgesGeometry,
	    	ConeGeometry: ConeGeometry,
	    	ConeBufferGeometry: ConeBufferGeometry,
	    	CylinderGeometry: CylinderGeometry,
	    	CylinderBufferGeometry: CylinderBufferGeometry,
	    	CircleBufferGeometry: CircleBufferGeometry,
	    	CircleGeometry: CircleGeometry,
	    	BoxBufferGeometry: BoxBufferGeometry,
	    	BoxGeometry: BoxGeometry
	    });

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function ShadowMaterial() {

	    	ShaderMaterial.call( this, {
	    		uniforms: exports.UniformsUtils.merge( [
	    			UniformsLib[ "lights" ],
	    			{
	    				opacity: { value: 1.0 }
	    			}
	    		] ),
	    		vertexShader: ShaderChunk[ 'shadow_vert' ],
	    		fragmentShader: ShaderChunk[ 'shadow_frag' ]
	    	} );

	    	this.lights = true;
	    	this.transparent = true;

	    	Object.defineProperties( this, {
	    		opacity: {
	    			enumerable: true,
	    			get: function () {
	    				return this.uniforms.opacity.value;
	    			},
	    			set: function ( value ) {
	    				this.uniforms.opacity.value = value;
	    			}
	    		}
	    	} );

	    }

	    ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );
	    ShadowMaterial.prototype.constructor = ShadowMaterial;

	    ShadowMaterial.prototype.isShadowMaterial = true;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function RawShaderMaterial( parameters ) {

	    	ShaderMaterial.call( this, parameters );

	    	this.type = 'RawShaderMaterial';

	    }

	    RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	    RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	    RawShaderMaterial.prototype.isRawShaderMaterial = true;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function MultiMaterial( materials ) {

	    	this.uuid = exports.Math.generateUUID();

	    	this.type = 'MultiMaterial';

	    	this.materials = materials instanceof Array ? materials : [];

	    	this.visible = true;

	    }

	    MultiMaterial.prototype = {

	    	constructor: MultiMaterial,

	    	isMultiMaterial: true,

	    	toJSON: function ( meta ) {

	    		var output = {
	    			metadata: {
	    				version: 4.2,
	    				type: 'material',
	    				generator: 'MaterialExporter'
	    			},
	    			uuid: this.uuid,
	    			type: this.type,
	    			materials: []
	    		};

	    		var materials = this.materials;

	    		for ( var i = 0, l = materials.length; i < l; i ++ ) {

	    			var material = materials[ i ].toJSON( meta );
	    			delete material.metadata;

	    			output.materials.push( material );

	    		}

	    		output.visible = this.visible;

	    		return output;

	    	},

	    	clone: function () {

	    		var material = new this.constructor();

	    		for ( var i = 0; i < this.materials.length; i ++ ) {

	    			material.materials.push( this.materials[ i ].clone() );

	    		}

	    		material.visible = this.visible;

	    		return material;

	    	}

	    };

	    /**
	     * @author WestLangley / http://github.com/WestLangley
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  roughness: <float>,
	     *  metalness: <float>,
	     *  opacity: <float>,
	     *
	     *  map: new THREE.Texture( <Image> ),
	     *
	     *  lightMap: new THREE.Texture( <Image> ),
	     *  lightMapIntensity: <float>
	     *
	     *  aoMap: new THREE.Texture( <Image> ),
	     *  aoMapIntensity: <float>
	     *
	     *  emissive: <hex>,
	     *  emissiveIntensity: <float>
	     *  emissiveMap: new THREE.Texture( <Image> ),
	     *
	     *  bumpMap: new THREE.Texture( <Image> ),
	     *  bumpScale: <float>,
	     *
	     *  normalMap: new THREE.Texture( <Image> ),
	     *  normalScale: <Vector2>,
	     *
	     *  displacementMap: new THREE.Texture( <Image> ),
	     *  displacementScale: <float>,
	     *  displacementBias: <float>,
	     *
	     *  roughnessMap: new THREE.Texture( <Image> ),
	     *
	     *  metalnessMap: new THREE.Texture( <Image> ),
	     *
	     *  alphaMap: new THREE.Texture( <Image> ),
	     *
	     *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	     *  envMapIntensity: <float>
	     *
	     *  refractionRatio: <float>,
	     *
	     *  wireframe: <boolean>,
	     *  wireframeLinewidth: <float>,
	     *
	     *  skinning: <bool>,
	     *  morphTargets: <bool>,
	     *  morphNormals: <bool>
	     * }
	     */

	    function MeshStandardMaterial( parameters ) {

	    	Material.call( this );

	    	this.defines = { 'STANDARD': '' };

	    	this.type = 'MeshStandardMaterial';

	    	this.color = new Color( 0xffffff ); // diffuse
	    	this.roughness = 0.5;
	    	this.metalness = 0.5;

	    	this.map = null;

	    	this.lightMap = null;
	    	this.lightMapIntensity = 1.0;

	    	this.aoMap = null;
	    	this.aoMapIntensity = 1.0;

	    	this.emissive = new Color( 0x000000 );
	    	this.emissiveIntensity = 1.0;
	    	this.emissiveMap = null;

	    	this.bumpMap = null;
	    	this.bumpScale = 1;

	    	this.normalMap = null;
	    	this.normalScale = new Vector2( 1, 1 );

	    	this.displacementMap = null;
	    	this.displacementScale = 1;
	    	this.displacementBias = 0;

	    	this.roughnessMap = null;

	    	this.metalnessMap = null;

	    	this.alphaMap = null;

	    	this.envMap = null;
	    	this.envMapIntensity = 1.0;

	    	this.refractionRatio = 0.98;

	    	this.wireframe = false;
	    	this.wireframeLinewidth = 1;
	    	this.wireframeLinecap = 'round';
	    	this.wireframeLinejoin = 'round';

	    	this.skinning = false;
	    	this.morphTargets = false;
	    	this.morphNormals = false;

	    	this.setValues( parameters );

	    }

	    MeshStandardMaterial.prototype = Object.create( Material.prototype );
	    MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	    MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	    MeshStandardMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.defines = { 'STANDARD': '' };

	    	this.color.copy( source.color );
	    	this.roughness = source.roughness;
	    	this.metalness = source.metalness;

	    	this.map = source.map;

	    	this.lightMap = source.lightMap;
	    	this.lightMapIntensity = source.lightMapIntensity;

	    	this.aoMap = source.aoMap;
	    	this.aoMapIntensity = source.aoMapIntensity;

	    	this.emissive.copy( source.emissive );
	    	this.emissiveMap = source.emissiveMap;
	    	this.emissiveIntensity = source.emissiveIntensity;

	    	this.bumpMap = source.bumpMap;
	    	this.bumpScale = source.bumpScale;

	    	this.normalMap = source.normalMap;
	    	this.normalScale.copy( source.normalScale );

	    	this.displacementMap = source.displacementMap;
	    	this.displacementScale = source.displacementScale;
	    	this.displacementBias = source.displacementBias;

	    	this.roughnessMap = source.roughnessMap;

	    	this.metalnessMap = source.metalnessMap;

	    	this.alphaMap = source.alphaMap;

	    	this.envMap = source.envMap;
	    	this.envMapIntensity = source.envMapIntensity;

	    	this.refractionRatio = source.refractionRatio;

	    	this.wireframe = source.wireframe;
	    	this.wireframeLinewidth = source.wireframeLinewidth;
	    	this.wireframeLinecap = source.wireframeLinecap;
	    	this.wireframeLinejoin = source.wireframeLinejoin;

	    	this.skinning = source.skinning;
	    	this.morphTargets = source.morphTargets;
	    	this.morphNormals = source.morphNormals;

	    	return this;

	    };

	    /**
	     * @author WestLangley / http://github.com/WestLangley
	     *
	     * parameters = {
	     *  reflectivity: <float>
	     * }
	     */

	    function MeshPhysicalMaterial( parameters ) {

	    	MeshStandardMaterial.call( this );

	    	this.defines = { 'PHYSICAL': '' };

	    	this.type = 'MeshPhysicalMaterial';

	    	this.reflectivity = 0.5; // maps to F0 = 0.04

	    	this.clearCoat = 0.0;
	    	this.clearCoatRoughness = 0.0;

	    	this.setValues( parameters );

	    }

	    MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	    MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	    MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	    MeshPhysicalMaterial.prototype.copy = function ( source ) {

	    	MeshStandardMaterial.prototype.copy.call( this, source );

	    	this.defines = { 'PHYSICAL': '' };

	    	this.reflectivity = source.reflectivity;

	    	this.clearCoat = source.clearCoat;
	    	this.clearCoatRoughness = source.clearCoatRoughness;

	    	return this;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  specular: <hex>,
	     *  shininess: <float>,
	     *  opacity: <float>,
	     *
	     *  map: new THREE.Texture( <Image> ),
	     *
	     *  lightMap: new THREE.Texture( <Image> ),
	     *  lightMapIntensity: <float>
	     *
	     *  aoMap: new THREE.Texture( <Image> ),
	     *  aoMapIntensity: <float>
	     *
	     *  emissive: <hex>,
	     *  emissiveIntensity: <float>
	     *  emissiveMap: new THREE.Texture( <Image> ),
	     *
	     *  bumpMap: new THREE.Texture( <Image> ),
	     *  bumpScale: <float>,
	     *
	     *  normalMap: new THREE.Texture( <Image> ),
	     *  normalScale: <Vector2>,
	     *
	     *  displacementMap: new THREE.Texture( <Image> ),
	     *  displacementScale: <float>,
	     *  displacementBias: <float>,
	     *
	     *  specularMap: new THREE.Texture( <Image> ),
	     *
	     *  alphaMap: new THREE.Texture( <Image> ),
	     *
	     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	     *  combine: THREE.Multiply,
	     *  reflectivity: <float>,
	     *  refractionRatio: <float>,
	     *
	     *  wireframe: <boolean>,
	     *  wireframeLinewidth: <float>,
	     *
	     *  skinning: <bool>,
	     *  morphTargets: <bool>,
	     *  morphNormals: <bool>
	     * }
	     */

	    function MeshPhongMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'MeshPhongMaterial';

	    	this.color = new Color( 0xffffff ); // diffuse
	    	this.specular = new Color( 0x111111 );
	    	this.shininess = 30;

	    	this.map = null;

	    	this.lightMap = null;
	    	this.lightMapIntensity = 1.0;

	    	this.aoMap = null;
	    	this.aoMapIntensity = 1.0;

	    	this.emissive = new Color( 0x000000 );
	    	this.emissiveIntensity = 1.0;
	    	this.emissiveMap = null;

	    	this.bumpMap = null;
	    	this.bumpScale = 1;

	    	this.normalMap = null;
	    	this.normalScale = new Vector2( 1, 1 );

	    	this.displacementMap = null;
	    	this.displacementScale = 1;
	    	this.displacementBias = 0;

	    	this.specularMap = null;

	    	this.alphaMap = null;

	    	this.envMap = null;
	    	this.combine = MultiplyOperation;
	    	this.reflectivity = 1;
	    	this.refractionRatio = 0.98;

	    	this.wireframe = false;
	    	this.wireframeLinewidth = 1;
	    	this.wireframeLinecap = 'round';
	    	this.wireframeLinejoin = 'round';

	    	this.skinning = false;
	    	this.morphTargets = false;
	    	this.morphNormals = false;

	    	this.setValues( parameters );

	    }

	    MeshPhongMaterial.prototype = Object.create( Material.prototype );
	    MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	    MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	    MeshPhongMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.color.copy( source.color );
	    	this.specular.copy( source.specular );
	    	this.shininess = source.shininess;

	    	this.map = source.map;

	    	this.lightMap = source.lightMap;
	    	this.lightMapIntensity = source.lightMapIntensity;

	    	this.aoMap = source.aoMap;
	    	this.aoMapIntensity = source.aoMapIntensity;

	    	this.emissive.copy( source.emissive );
	    	this.emissiveMap = source.emissiveMap;
	    	this.emissiveIntensity = source.emissiveIntensity;

	    	this.bumpMap = source.bumpMap;
	    	this.bumpScale = source.bumpScale;

	    	this.normalMap = source.normalMap;
	    	this.normalScale.copy( source.normalScale );

	    	this.displacementMap = source.displacementMap;
	    	this.displacementScale = source.displacementScale;
	    	this.displacementBias = source.displacementBias;

	    	this.specularMap = source.specularMap;

	    	this.alphaMap = source.alphaMap;

	    	this.envMap = source.envMap;
	    	this.combine = source.combine;
	    	this.reflectivity = source.reflectivity;
	    	this.refractionRatio = source.refractionRatio;

	    	this.wireframe = source.wireframe;
	    	this.wireframeLinewidth = source.wireframeLinewidth;
	    	this.wireframeLinecap = source.wireframeLinecap;
	    	this.wireframeLinejoin = source.wireframeLinejoin;

	    	this.skinning = source.skinning;
	    	this.morphTargets = source.morphTargets;
	    	this.morphNormals = source.morphNormals;

	    	return this;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     *
	     * parameters = {
	     *  opacity: <float>,
	     *
	     *  wireframe: <boolean>,
	     *  wireframeLinewidth: <float>
	     * }
	     */

	    function MeshNormalMaterial( parameters ) {

	    	Material.call( this, parameters );

	    	this.type = 'MeshNormalMaterial';

	    	this.wireframe = false;
	    	this.wireframeLinewidth = 1;

	    	this.fog = false;
	    	this.lights = false;
	    	this.morphTargets = false;

	    	this.setValues( parameters );

	    }

	    MeshNormalMaterial.prototype = Object.create( Material.prototype );
	    MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	    MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	    MeshNormalMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.wireframe = source.wireframe;
	    	this.wireframeLinewidth = source.wireframeLinewidth;

	    	return this;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  opacity: <float>,
	     *
	     *  map: new THREE.Texture( <Image> ),
	     *
	     *  lightMap: new THREE.Texture( <Image> ),
	     *  lightMapIntensity: <float>
	     *
	     *  aoMap: new THREE.Texture( <Image> ),
	     *  aoMapIntensity: <float>
	     *
	     *  emissive: <hex>,
	     *  emissiveIntensity: <float>
	     *  emissiveMap: new THREE.Texture( <Image> ),
	     *
	     *  specularMap: new THREE.Texture( <Image> ),
	     *
	     *  alphaMap: new THREE.Texture( <Image> ),
	     *
	     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	     *  combine: THREE.Multiply,
	     *  reflectivity: <float>,
	     *  refractionRatio: <float>,
	     *
	     *  wireframe: <boolean>,
	     *  wireframeLinewidth: <float>,
	     *
	     *  skinning: <bool>,
	     *  morphTargets: <bool>,
	     *  morphNormals: <bool>
	     * }
	     */

	    function MeshLambertMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'MeshLambertMaterial';

	    	this.color = new Color( 0xffffff ); // diffuse

	    	this.map = null;

	    	this.lightMap = null;
	    	this.lightMapIntensity = 1.0;

	    	this.aoMap = null;
	    	this.aoMapIntensity = 1.0;

	    	this.emissive = new Color( 0x000000 );
	    	this.emissiveIntensity = 1.0;
	    	this.emissiveMap = null;

	    	this.specularMap = null;

	    	this.alphaMap = null;

	    	this.envMap = null;
	    	this.combine = MultiplyOperation;
	    	this.reflectivity = 1;
	    	this.refractionRatio = 0.98;

	    	this.wireframe = false;
	    	this.wireframeLinewidth = 1;
	    	this.wireframeLinecap = 'round';
	    	this.wireframeLinejoin = 'round';

	    	this.skinning = false;
	    	this.morphTargets = false;
	    	this.morphNormals = false;

	    	this.setValues( parameters );

	    }

	    MeshLambertMaterial.prototype = Object.create( Material.prototype );
	    MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	    MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	    MeshLambertMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.color.copy( source.color );

	    	this.map = source.map;

	    	this.lightMap = source.lightMap;
	    	this.lightMapIntensity = source.lightMapIntensity;

	    	this.aoMap = source.aoMap;
	    	this.aoMapIntensity = source.aoMapIntensity;

	    	this.emissive.copy( source.emissive );
	    	this.emissiveMap = source.emissiveMap;
	    	this.emissiveIntensity = source.emissiveIntensity;

	    	this.specularMap = source.specularMap;

	    	this.alphaMap = source.alphaMap;

	    	this.envMap = source.envMap;
	    	this.combine = source.combine;
	    	this.reflectivity = source.reflectivity;
	    	this.refractionRatio = source.refractionRatio;

	    	this.wireframe = source.wireframe;
	    	this.wireframeLinewidth = source.wireframeLinewidth;
	    	this.wireframeLinecap = source.wireframeLinecap;
	    	this.wireframeLinejoin = source.wireframeLinejoin;

	    	this.skinning = source.skinning;
	    	this.morphTargets = source.morphTargets;
	    	this.morphNormals = source.morphNormals;

	    	return this;

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     *
	     * parameters = {
	     *  color: <hex>,
	     *  opacity: <float>,
	     *
	     *  linewidth: <float>,
	     *
	     *  scale: <float>,
	     *  dashSize: <float>,
	     *  gapSize: <float>
	     * }
	     */

	    function LineDashedMaterial( parameters ) {

	    	Material.call( this );

	    	this.type = 'LineDashedMaterial';

	    	this.color = new Color( 0xffffff );

	    	this.linewidth = 1;

	    	this.scale = 1;
	    	this.dashSize = 3;
	    	this.gapSize = 1;

	    	this.lights = false;

	    	this.setValues( parameters );

	    }

	    LineDashedMaterial.prototype = Object.create( Material.prototype );
	    LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	    LineDashedMaterial.prototype.isLineDashedMaterial = true;

	    LineDashedMaterial.prototype.copy = function ( source ) {

	    	Material.prototype.copy.call( this, source );

	    	this.color.copy( source.color );

	    	this.linewidth = source.linewidth;

	    	this.scale = source.scale;
	    	this.dashSize = source.dashSize;
	    	this.gapSize = source.gapSize;

	    	return this;

	    };



	    var Materials = Object.freeze({
	    	ShadowMaterial: ShadowMaterial,
	    	SpriteMaterial: SpriteMaterial,
	    	RawShaderMaterial: RawShaderMaterial,
	    	ShaderMaterial: ShaderMaterial,
	    	PointsMaterial: PointsMaterial,
	    	MultiMaterial: MultiMaterial,
	    	MeshPhysicalMaterial: MeshPhysicalMaterial,
	    	MeshStandardMaterial: MeshStandardMaterial,
	    	MeshPhongMaterial: MeshPhongMaterial,
	    	MeshNormalMaterial: MeshNormalMaterial,
	    	MeshLambertMaterial: MeshLambertMaterial,
	    	MeshDepthMaterial: MeshDepthMaterial,
	    	MeshBasicMaterial: MeshBasicMaterial,
	    	LineDashedMaterial: LineDashedMaterial,
	    	LineBasicMaterial: LineBasicMaterial,
	    	Material: Material
	    });

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    exports.Cache = {

	    	enabled: false,

	    	files: {},

	    	add: function ( key, file ) {

	    		if ( this.enabled === false ) return;

	    		// console.log( 'THREE.Cache', 'Adding key:', key );

	    		this.files[ key ] = file;

	    	},

	    	get: function ( key ) {

	    		if ( this.enabled === false ) return;

	    		// console.log( 'THREE.Cache', 'Checking key:', key );

	    		return this.files[ key ];

	    	},

	    	remove: function ( key ) {

	    		delete this.files[ key ];

	    	},

	    	clear: function () {

	    		this.files = {};

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function LoadingManager( onLoad, onProgress, onError ) {

	    	var scope = this;

	    	var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

	    	this.onStart = undefined;
	    	this.onLoad = onLoad;
	    	this.onProgress = onProgress;
	    	this.onError = onError;

	    	this.itemStart = function ( url ) {

	    		itemsTotal ++;

	    		if ( isLoading === false ) {

	    			if ( scope.onStart !== undefined ) {

	    				scope.onStart( url, itemsLoaded, itemsTotal );

	    			}

	    		}

	    		isLoading = true;

	    	};

	    	this.itemEnd = function ( url ) {

	    		itemsLoaded ++;

	    		if ( scope.onProgress !== undefined ) {

	    			scope.onProgress( url, itemsLoaded, itemsTotal );

	    		}

	    		if ( itemsLoaded === itemsTotal ) {

	    			isLoading = false;

	    			if ( scope.onLoad !== undefined ) {

	    				scope.onLoad();

	    			}

	    		}

	    	};

	    	this.itemError = function ( url ) {

	    		if ( scope.onError !== undefined ) {

	    			scope.onError( url );

	    		}

	    	};

	    }

	    exports.DefaultLoadingManager = new LoadingManager();

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function XHRLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    }

	    Object.assign( XHRLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		if ( this.path !== undefined ) url = this.path + url;

	    		var scope = this;

	    		var cached = exports.Cache.get( url );

	    		if ( cached !== undefined ) {

	    			scope.manager.itemStart( url );

	    			setTimeout( function () {

	    				if ( onLoad ) onLoad( cached );

	    				scope.manager.itemEnd( url );

	    			}, 0 );

	    			return cached;

	    		}

	    		var request = new XMLHttpRequest();
	    		request.open( 'GET', url, true );

	    		request.addEventListener( 'load', function ( event ) {

	    			var response = event.target.response;

	    			exports.Cache.add( url, response );

	    			if ( this.status === 200 ) {

	    				if ( onLoad ) onLoad( response );

	    				scope.manager.itemEnd( url );

	    			} else if ( this.status === 0 ) {

	    				// Some browsers return HTTP Status 0 when using non-http protocol
	    				// e.g. 'file://' or 'data://'. Handle as success.

	    				console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );

	    				if ( onLoad ) onLoad( response );

	    				scope.manager.itemEnd( url );

	    			} else {

	    				if ( onError ) onError( event );

	    				scope.manager.itemError( url );

	    			}

	    		}, false );

	    		if ( onProgress !== undefined ) {

	    			request.addEventListener( 'progress', function ( event ) {

	    				onProgress( event );

	    			}, false );

	    		}

	    		request.addEventListener( 'error', function ( event ) {

	    			if ( onError ) onError( event );

	    			scope.manager.itemError( url );

	    		}, false );

	    		if ( this.responseType !== undefined ) request.responseType = this.responseType;
	    		if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

	    		if ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );

	    		request.send( null );

	    		scope.manager.itemStart( url );

	    		return request;

	    	},

	    	setPath: function ( value ) {

	    		this.path = value;
	    		return this;

	    	},

	    	setResponseType: function ( value ) {

	    		this.responseType = value;
	    		return this;

	    	},

	    	setWithCredentials: function ( value ) {

	    		this.withCredentials = value;
	    		return this;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     *
	     * Abstract Base class to block based textures loader (dds, pvr, ...)
	     */

	    function CompressedTextureLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    	// override in sub classes
	    	this._parser = null;

	    }

	    Object.assign( CompressedTextureLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var scope = this;

	    		var images = [];

	    		var texture = new CompressedTexture();
	    		texture.image = images;

	    		var loader = new XHRLoader( this.manager );
	    		loader.setPath( this.path );
	    		loader.setResponseType( 'arraybuffer' );

	    		function loadTexture( i ) {

	    			loader.load( url[ i ], function ( buffer ) {

	    				var texDatas = scope._parser( buffer, true );

	    				images[ i ] = {
	    					width: texDatas.width,
	    					height: texDatas.height,
	    					format: texDatas.format,
	    					mipmaps: texDatas.mipmaps
	    				};

	    				loaded += 1;

	    				if ( loaded === 6 ) {

	    					if ( texDatas.mipmapCount === 1 )
	    						texture.minFilter = LinearFilter;

	    					texture.format = texDatas.format;
	    					texture.needsUpdate = true;

	    					if ( onLoad ) onLoad( texture );

	    				}

	    			}, onProgress, onError );

	    		}

	    		if ( Array.isArray( url ) ) {

	    			var loaded = 0;

	    			for ( var i = 0, il = url.length; i < il; ++ i ) {

	    				loadTexture( i );

	    			}

	    		} else {

	    			// compressed cubemap texture stored in a single DDS file

	    			loader.load( url, function ( buffer ) {

	    				var texDatas = scope._parser( buffer, true );

	    				if ( texDatas.isCubemap ) {

	    					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

	    					for ( var f = 0; f < faces; f ++ ) {

	    						images[ f ] = { mipmaps : [] };

	    						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

	    							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
	    							images[ f ].format = texDatas.format;
	    							images[ f ].width = texDatas.width;
	    							images[ f ].height = texDatas.height;

	    						}

	    					}

	    				} else {

	    					texture.image.width = texDatas.width;
	    					texture.image.height = texDatas.height;
	    					texture.mipmaps = texDatas.mipmaps;

	    				}

	    				if ( texDatas.mipmapCount === 1 ) {

	    					texture.minFilter = LinearFilter;

	    				}

	    				texture.format = texDatas.format;
	    				texture.needsUpdate = true;

	    				if ( onLoad ) onLoad( texture );

	    			}, onProgress, onError );

	    		}

	    		return texture;

	    	},

	    	setPath: function ( value ) {

	    		this.path = value;
	    		return this;

	    	}

	    } );

	    /**
	     * @author Nikos M. / https://github.com/foo123/
	     *
	     * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	     */

	    var DataTextureLoader = BinaryTextureLoader;
	    function BinaryTextureLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    	// override in sub classes
	    	this._parser = null;

	    }

	    Object.assign( BinaryTextureLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var scope = this;

	    		var texture = new DataTexture();

	    		var loader = new XHRLoader( this.manager );
	    		loader.setResponseType( 'arraybuffer' );

	    		loader.load( url, function ( buffer ) {

	    			var texData = scope._parser( buffer );

	    			if ( ! texData ) return;

	    			if ( undefined !== texData.image ) {

	    				texture.image = texData.image;

	    			} else if ( undefined !== texData.data ) {

	    				texture.image.width = texData.width;
	    				texture.image.height = texData.height;
	    				texture.image.data = texData.data;

	    			}

	    			texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
	    			texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

	    			texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
	    			texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

	    			texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

	    			if ( undefined !== texData.format ) {

	    				texture.format = texData.format;

	    			}
	    			if ( undefined !== texData.type ) {

	    				texture.type = texData.type;

	    			}

	    			if ( undefined !== texData.mipmaps ) {

	    				texture.mipmaps = texData.mipmaps;

	    			}

	    			if ( 1 === texData.mipmapCount ) {

	    				texture.minFilter = LinearFilter;

	    			}

	    			texture.needsUpdate = true;

	    			if ( onLoad ) onLoad( texture, texData );

	    		}, onProgress, onError );


	    		return texture;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function ImageLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    }

	    Object.assign( ImageLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var scope = this;

	    		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
	    		image.onload = function () {

	    			image.onload = null;

	    			URL.revokeObjectURL( image.src );

	    			if ( onLoad ) onLoad( image );

	    			scope.manager.itemEnd( url );

	    		};

	    		if ( url.indexOf( 'data:' ) === 0 ) {

	    			image.src = url;

	    		} else {

	    			var loader = new XHRLoader();
	    			loader.setPath( this.path );
	    			loader.setResponseType( 'blob' );
	    			loader.setWithCredentials( this.withCredentials );
	    			loader.load( url, function ( blob ) {

	    				image.src = URL.createObjectURL( blob );

	    			}, onProgress, onError );

	    		}

	    		scope.manager.itemStart( url );

	    		return image;

	    	},

	    	setCrossOrigin: function ( value ) {

	    		this.crossOrigin = value;
	    		return this;

	    	},

	    	setWithCredentials: function ( value ) {

	    		this.withCredentials = value;
	    		return this;

	    	},

	    	setPath: function ( value ) {

	    		this.path = value;
	    		return this;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function CubeTextureLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    }

	    Object.assign( CubeTextureLoader.prototype, {

	    	load: function ( urls, onLoad, onProgress, onError ) {

	    		var texture = new CubeTexture();

	    		var loader = new ImageLoader( this.manager );
	    		loader.setCrossOrigin( this.crossOrigin );
	    		loader.setPath( this.path );

	    		var loaded = 0;

	    		function loadTexture( i ) {

	    			loader.load( urls[ i ], function ( image ) {

	    				texture.images[ i ] = image;

	    				loaded ++;

	    				if ( loaded === 6 ) {

	    					texture.needsUpdate = true;

	    					if ( onLoad ) onLoad( texture );

	    				}

	    			}, undefined, onError );

	    		}

	    		for ( var i = 0; i < urls.length; ++ i ) {

	    			loadTexture( i );

	    		}

	    		return texture;

	    	},

	    	setCrossOrigin: function ( value ) {

	    		this.crossOrigin = value;
	    		return this;

	    	},

	    	setPath: function ( value ) {

	    		this.path = value;
	    		return this;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function TextureLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    }

	    Object.assign( TextureLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var texture = new Texture();

	    		var loader = new ImageLoader( this.manager );
	    		loader.setCrossOrigin( this.crossOrigin );
	    		loader.setWithCredentials( this.withCredentials );
	    		loader.setPath( this.path );
	    		loader.load( url, function ( image ) {

	    			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
	    			var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

	    			texture.format = isJPEG ? RGBFormat : RGBAFormat;
	    			texture.image = image;
	    			texture.needsUpdate = true;

	    			if ( onLoad !== undefined ) {

	    				onLoad( texture );

	    			}

	    		}, onProgress, onError );

	    		return texture;

	    	},

	    	setCrossOrigin: function ( value ) {

	    		this.crossOrigin = value;
	    		return this;

	    	},

	    	setWithCredentials: function ( value ) {

	    		this.withCredentials = value;
	    		return this;

	    	},

	    	setPath: function ( value ) {

	    		this.path = value;
	    		return this;

	    	}



	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Light( color, intensity ) {

	    	Object3D.call( this );

	    	this.type = 'Light';

	    	this.color = new Color( color );
	    	this.intensity = intensity !== undefined ? intensity : 1;

	    	this.receiveShadow = undefined;

	    }

	    Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Light,

	    	isLight: true,

	    	copy: function ( source ) {

	    		Object3D.prototype.copy.call( this, source );

	    		this.color.copy( source.color );
	    		this.intensity = source.intensity;

	    		return this;

	    	},

	    	toJSON: function ( meta ) {

	    		var data = Object3D.prototype.toJSON.call( this, meta );

	    		data.object.color = this.color.getHex();
	    		data.object.intensity = this.intensity;

	    		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

	    		if ( this.distance !== undefined ) data.object.distance = this.distance;
	    		if ( this.angle !== undefined ) data.object.angle = this.angle;
	    		if ( this.decay !== undefined ) data.object.decay = this.decay;
	    		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

	    		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

	    		return data;

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function HemisphereLight( skyColor, groundColor, intensity ) {

	    	Light.call( this, skyColor, intensity );

	    	this.type = 'HemisphereLight';

	    	this.castShadow = undefined;

	    	this.position.copy( Object3D.DefaultUp );
	    	this.updateMatrix();

	    	this.groundColor = new Color( groundColor );

	    }

	    HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

	    	constructor: HemisphereLight,

	    	isHemisphereLight: true,

	    	copy: function ( source ) {

	    		Light.prototype.copy.call( this, source );

	    		this.groundColor.copy( source.groundColor );

	    		return this;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function LightShadow( camera ) {

	    	this.camera = camera;

	    	this.bias = 0;
	    	this.radius = 1;

	    	this.mapSize = new Vector2( 512, 512 );

	    	this.map = null;
	    	this.matrix = new Matrix4();

	    }

	    Object.assign( LightShadow.prototype, {

	    	copy: function ( source ) {

	    		this.camera = source.camera.clone();

	    		this.bias = source.bias;
	    		this.radius = source.radius;

	    		this.mapSize.copy( source.mapSize );

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	toJSON: function () {

	    		var object = {};

	    		if ( this.bias !== 0 ) object.bias = this.bias;
	    		if ( this.radius !== 1 ) object.radius = this.radius;
	    		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

	    		object.camera = this.camera.toJSON( false ).object;
	    		delete object.camera.matrix;

	    		return object;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function SpotLightShadow() {

	    	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	    }

	    SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	    	constructor: SpotLightShadow,

	    	isSpotLightShadow: true,

	    	update: function ( light ) {

	    		var fov = exports.Math.RAD2DEG * 2 * light.angle;
	    		var aspect = this.mapSize.width / this.mapSize.height;
	    		var far = light.distance || 500;

	    		var camera = this.camera;

	    		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

	    			camera.fov = fov;
	    			camera.aspect = aspect;
	    			camera.far = far;
	    			camera.updateProjectionMatrix();

	    		}

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

	    	Light.call( this, color, intensity );

	    	this.type = 'SpotLight';

	    	this.position.copy( Object3D.DefaultUp );
	    	this.updateMatrix();

	    	this.target = new Object3D();

	    	Object.defineProperty( this, 'power', {
	    		get: function () {
	    			// intensity = power per solid angle.
	    			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
	    			return this.intensity * Math.PI;
	    		},
	    		set: function ( power ) {
	    			// intensity = power per solid angle.
	    			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
	    			this.intensity = power / Math.PI;
	    		}
	    	} );

	    	this.distance = ( distance !== undefined ) ? distance : 0;
	    	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
	    	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
	    	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	    	this.shadow = new SpotLightShadow();

	    }

	    SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

	    	constructor: SpotLight,

	    	isSpotLight: true,

	    	copy: function ( source ) {

	    		Light.prototype.copy.call( this, source );

	    		this.distance = source.distance;
	    		this.angle = source.angle;
	    		this.penumbra = source.penumbra;
	    		this.decay = source.decay;

	    		this.target = source.target.clone();

	    		this.shadow = source.shadow.clone();

	    		return this;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */


	    function PointLight( color, intensity, distance, decay ) {

	    	Light.call( this, color, intensity );

	    	this.type = 'PointLight';

	    	Object.defineProperty( this, 'power', {
	    		get: function () {
	    			// intensity = power per solid angle.
	    			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
	    			return this.intensity * 4 * Math.PI;

	    		},
	    		set: function ( power ) {
	    			// intensity = power per solid angle.
	    			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
	    			this.intensity = power / ( 4 * Math.PI );
	    		}
	    	} );

	    	this.distance = ( distance !== undefined ) ? distance : 0;
	    	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	    	this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

	    }

	    PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

	    	constructor: PointLight,

	    	isPointLight: true,

	    	copy: function ( source ) {

	    		Light.prototype.copy.call( this, source );

	    		this.distance = source.distance;
	    		this.decay = source.decay;

	    		this.shadow = source.shadow.clone();

	    		return this;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function DirectionalLightShadow( light ) {

	    	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	    }

	    DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	    	constructor: DirectionalLightShadow

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function DirectionalLight( color, intensity ) {

	    	Light.call( this, color, intensity );

	    	this.type = 'DirectionalLight';

	    	this.position.copy( Object3D.DefaultUp );
	    	this.updateMatrix();

	    	this.target = new Object3D();

	    	this.shadow = new DirectionalLightShadow();

	    }

	    DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

	    	constructor: DirectionalLight,

	    	isDirectionalLight: true,

	    	copy: function ( source ) {

	    		Light.prototype.copy.call( this, source );

	    		this.target = source.target.clone();

	    		this.shadow = source.shadow.clone();

	    		return this;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function AmbientLight( color, intensity ) {

	    	Light.call( this, color, intensity );

	    	this.type = 'AmbientLight';

	    	this.castShadow = undefined;

	    }

	    AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

	    	constructor: AmbientLight,

	    	isAmbientLight: true,

	    } );

	    /**
	     * @author tschw
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     */

	    exports.AnimationUtils = {

	    	// same as Array.prototype.slice, but also works on typed arrays
	    	arraySlice: function( array, from, to ) {

	    		if ( exports.AnimationUtils.isTypedArray( array ) ) {

	    			return new array.constructor( array.subarray( from, to ) );

	    		}

	    		return array.slice( from, to );

	    	},

	    	// converts an array to a specific type
	    	convertArray: function( array, type, forceClone ) {

	    		if ( ! array || // let 'undefined' and 'null' pass
	    				! forceClone && array.constructor === type ) return array;

	    		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

	    			return new type( array ); // create typed array

	    		}

	    		return Array.prototype.slice.call( array ); // create Array

	    	},

	    	isTypedArray: function( object ) {

	    		return ArrayBuffer.isView( object ) &&
	    				! ( object instanceof DataView );

	    	},

	    	// returns an array by which times and values can be sorted
	    	getKeyframeOrder: function( times ) {

	    		function compareTime( i, j ) {

	    			return times[ i ] - times[ j ];

	    		}

	    		var n = times.length;
	    		var result = new Array( n );
	    		for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

	    		result.sort( compareTime );

	    		return result;

	    	},

	    	// uses the array previously returned by 'getKeyframeOrder' to sort data
	    	sortedArray: function( values, stride, order ) {

	    		var nValues = values.length;
	    		var result = new values.constructor( nValues );

	    		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

	    			var srcOffset = order[ i ] * stride;

	    			for ( var j = 0; j !== stride; ++ j ) {

	    				result[ dstOffset ++ ] = values[ srcOffset + j ];

	    			}

	    		}

	    		return result;

	    	},

	    	// function for parsing AOS keyframe formats
	    	flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

	    		var i = 1, key = jsonKeys[ 0 ];

	    		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

	    			key = jsonKeys[ i ++ ];

	    		}

	    		if ( key === undefined ) return; // no data

	    		var value = key[ valuePropertyName ];
	    		if ( value === undefined ) return; // no data

	    		if ( Array.isArray( value ) ) {

	    			do {

	    				value = key[ valuePropertyName ];

	    				if ( value !== undefined ) {

	    					times.push( key.time );
	    					values.push.apply( values, value ); // push all elements

	    				}

	    				key = jsonKeys[ i ++ ];

	    			} while ( key !== undefined );

	    		} else if ( value.toArray !== undefined ) {
	    			// ...assume THREE.Math-ish

	    			do {

	    				value = key[ valuePropertyName ];

	    				if ( value !== undefined ) {

	    					times.push( key.time );
	    					value.toArray( values, values.length );

	    				}

	    				key = jsonKeys[ i ++ ];

	    			} while ( key !== undefined );

	    		} else {
	    			// otherwise push as-is

	    			do {

	    				value = key[ valuePropertyName ];

	    				if ( value !== undefined ) {

	    					times.push( key.time );
	    					values.push( value );

	    				}

	    				key = jsonKeys[ i ++ ];

	    			} while ( key !== undefined );

	    		}

	    	}

	    };

	    /**
	     * Abstract base class of interpolants over parametric samples.
	     *
	     * The parameter domain is one dimensional, typically the time or a path
	     * along a curve defined by the data.
	     *
	     * The sample values can have any dimensionality and derived classes may
	     * apply special interpretations to the data.
	     *
	     * This class provides the interval seek in a Template Method, deferring
	     * the actual interpolation to derived classes.
	     *
	     * Time complexity is O(1) for linear access crossing at most two points
	     * and O(log N) for random access, where N is the number of positions.
	     *
	     * References:
	     *
	     * 		http://www.oodesign.com/template-method-pattern.html
	     *
	     * @author tschw
	     */

	    function Interpolant(
	    		parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	    	this.parameterPositions = parameterPositions;
	    	this._cachedIndex = 0;

	    	this.resultBuffer = resultBuffer !== undefined ?
	    			resultBuffer : new sampleValues.constructor( sampleSize );
	    	this.sampleValues = sampleValues;
	    	this.valueSize = sampleSize;

	    }

	    Interpolant.prototype = {

	    	constructor: Interpolant,

	    	evaluate: function( t ) {

	    		var pp = this.parameterPositions,
	    			i1 = this._cachedIndex,

	    			t1 = pp[   i1   ],
	    			t0 = pp[ i1 - 1 ];

	    		validate_interval: {

	    			seek: {

	    				var right;

	    				linear_scan: {
	    //- See http://jsperf.com/comparison-to-undefined/3
	    //- slower code:
	    //-
	    //- 				if ( t >= t1 || t1 === undefined ) {
	    					forward_scan: if ( ! ( t < t1 ) ) {

	    						for ( var giveUpAt = i1 + 2; ;) {

	    							if ( t1 === undefined ) {

	    								if ( t < t0 ) break forward_scan;

	    								// after end

	    								i1 = pp.length;
	    								this._cachedIndex = i1;
	    								return this.afterEnd_( i1 - 1, t, t0 );

	    							}

	    							if ( i1 === giveUpAt ) break; // this loop

	    							t0 = t1;
	    							t1 = pp[ ++ i1 ];

	    							if ( t < t1 ) {

	    								// we have arrived at the sought interval
	    								break seek;

	    							}

	    						}

	    						// prepare binary search on the right side of the index
	    						right = pp.length;
	    						break linear_scan;

	    					}

	    //- slower code:
	    //-					if ( t < t0 || t0 === undefined ) {
	    					if ( ! ( t >= t0 ) ) {

	    						// looping?

	    						var t1global = pp[ 1 ];

	    						if ( t < t1global ) {

	    							i1 = 2; // + 1, using the scan for the details
	    							t0 = t1global;

	    						}

	    						// linear reverse scan

	    						for ( var giveUpAt = i1 - 2; ;) {

	    							if ( t0 === undefined ) {

	    								// before start

	    								this._cachedIndex = 0;
	    								return this.beforeStart_( 0, t, t1 );

	    							}

	    							if ( i1 === giveUpAt ) break; // this loop

	    							t1 = t0;
	    							t0 = pp[ -- i1 - 1 ];

	    							if ( t >= t0 ) {

	    								// we have arrived at the sought interval
	    								break seek;

	    							}

	    						}

	    						// prepare binary search on the left side of the index
	    						right = i1;
	    						i1 = 0;
	    						break linear_scan;

	    					}

	    					// the interval is valid

	    					break validate_interval;

	    				} // linear scan

	    				// binary search

	    				while ( i1 < right ) {

	    					var mid = ( i1 + right ) >>> 1;

	    					if ( t < pp[ mid ] ) {

	    						right = mid;

	    					} else {

	    						i1 = mid + 1;

	    					}

	    				}

	    				t1 = pp[   i1   ];
	    				t0 = pp[ i1 - 1 ];

	    				// check boundary cases, again

	    				if ( t0 === undefined ) {

	    					this._cachedIndex = 0;
	    					return this.beforeStart_( 0, t, t1 );

	    				}

	    				if ( t1 === undefined ) {

	    					i1 = pp.length;
	    					this._cachedIndex = i1;
	    					return this.afterEnd_( i1 - 1, t0, t );

	    				}

	    			} // seek

	    			this._cachedIndex = i1;

	    			this.intervalChanged_( i1, t0, t1 );

	    		} // validate_interval

	    		return this.interpolate_( i1, t0, t, t1 );

	    	},

	    	settings: null, // optional, subclass-specific settings structure
	    	// Note: The indirection allows central control of many interpolants.

	    	// --- Protected interface

	    	DefaultSettings_: {},

	    	getSettings_: function() {

	    		return this.settings || this.DefaultSettings_;

	    	},

	    	copySampleValue_: function( index ) {

	    		// copies a sample value to the result buffer

	    		var result = this.resultBuffer,
	    			values = this.sampleValues,
	    			stride = this.valueSize,
	    			offset = index * stride;

	    		for ( var i = 0; i !== stride; ++ i ) {

	    			result[ i ] = values[ offset + i ];

	    		}

	    		return result;

	    	},

	    	// Template methods for derived classes:

	    	interpolate_: function( i1, t0, t, t1 ) {

	    		throw new Error( "call to abstract method" );
	    		// implementations shall return this.resultBuffer

	    	},

	    	intervalChanged_: function( i1, t0, t1 ) {

	    		// empty

	    	}

	    };

	    Object.assign( Interpolant.prototype, {

	    	beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
	    		Interpolant.prototype.copySampleValue_,

	    	afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
	    		Interpolant.prototype.copySampleValue_

	    } );

	    /**
	     * Fast and simple cubic spline interpolant.
	     *
	     * It was derived from a Hermitian construction setting the first derivative
	     * at each sample position to the linear slope between neighboring positions
	     * over their parameter interval.
	     *
	     * @author tschw
	     */

	    function CubicInterpolant(
	    		parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	    	Interpolant.call(
	    			this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	    	this._weightPrev = -0;
	    	this._offsetPrev = -0;
	    	this._weightNext = -0;
	    	this._offsetNext = -0;

	    }

	    CubicInterpolant.prototype =
	    		Object.assign( Object.create( Interpolant.prototype ), {

	    	constructor: CubicInterpolant,

	    	DefaultSettings_: {

	    		endingStart: 	ZeroCurvatureEnding,
	    		endingEnd:		ZeroCurvatureEnding

	    	},

	    	intervalChanged_: function( i1, t0, t1 ) {

	    		var pp = this.parameterPositions,
	    			iPrev = i1 - 2,
	    			iNext = i1 + 1,

	    			tPrev = pp[ iPrev ],
	    			tNext = pp[ iNext ];

	    		if ( tPrev === undefined ) {

	    			switch ( this.getSettings_().endingStart ) {

	    				case ZeroSlopeEnding:

	    					// f'(t0) = 0
	    					iPrev = i1;
	    					tPrev = 2 * t0 - t1;

	    					break;

	    				case WrapAroundEnding:

	    					// use the other end of the curve
	    					iPrev = pp.length - 2;
	    					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

	    					break;

	    				default: // ZeroCurvatureEnding

	    					// f''(t0) = 0 a.k.a. Natural Spline
	    					iPrev = i1;
	    					tPrev = t1;

	    			}

	    		}

	    		if ( tNext === undefined ) {

	    			switch ( this.getSettings_().endingEnd ) {

	    				case ZeroSlopeEnding:

	    					// f'(tN) = 0
	    					iNext = i1;
	    					tNext = 2 * t1 - t0;

	    					break;

	    				case WrapAroundEnding:

	    					// use the other end of the curve
	    					iNext = 1;
	    					tNext = t1 + pp[ 1 ] - pp[ 0 ];

	    					break;

	    				default: // ZeroCurvatureEnding

	    					// f''(tN) = 0, a.k.a. Natural Spline
	    					iNext = i1 - 1;
	    					tNext = t0;

	    			}

	    		}

	    		var halfDt = ( t1 - t0 ) * 0.5,
	    			stride = this.valueSize;

	    		this._weightPrev = halfDt / ( t0 - tPrev );
	    		this._weightNext = halfDt / ( tNext - t1 );
	    		this._offsetPrev = iPrev * stride;
	    		this._offsetNext = iNext * stride;

	    	},

	    	interpolate_: function( i1, t0, t, t1 ) {

	    		var result = this.resultBuffer,
	    			values = this.sampleValues,
	    			stride = this.valueSize,

	    			o1 = i1 * stride,		o0 = o1 - stride,
	    			oP = this._offsetPrev, 	oN = this._offsetNext,
	    			wP = this._weightPrev,	wN = this._weightNext,

	    			p = ( t - t0 ) / ( t1 - t0 ),
	    			pp = p * p,
	    			ppp = pp * p;

	    		// evaluate polynomials

	    		var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
	    		var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
	    		var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
	    		var sN =       wN   * ppp   -           wN      * pp;

	    		// combine data linearly

	    		for ( var i = 0; i !== stride; ++ i ) {

	    			result[ i ] =
	    					sP * values[ oP + i ] +
	    					s0 * values[ o0 + i ] +
	    					s1 * values[ o1 + i ] +
	    					sN * values[ oN + i ];

	    		}

	    		return result;

	    	}

	    } );

	    /**
	     * @author tschw
	     */

	    function LinearInterpolant(
	    		parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	    	Interpolant.call(
	    			this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	    }

	    LinearInterpolant.prototype =
	    		Object.assign( Object.create( Interpolant.prototype ), {

	    	constructor: LinearInterpolant,

	    	interpolate_: function( i1, t0, t, t1 ) {

	    		var result = this.resultBuffer,
	    			values = this.sampleValues,
	    			stride = this.valueSize,

	    			offset1 = i1 * stride,
	    			offset0 = offset1 - stride,

	    			weight1 = ( t - t0 ) / ( t1 - t0 ),
	    			weight0 = 1 - weight1;

	    		for ( var i = 0; i !== stride; ++ i ) {

	    			result[ i ] =
	    					values[ offset0 + i ] * weight0 +
	    					values[ offset1 + i ] * weight1;

	    		}

	    		return result;

	    	}

	    } );

	    /**
	     *
	     * Interpolant that evaluates to the sample value at the position preceeding
	     * the parameter.
	     *
	     * @author tschw
	     */

	    function DiscreteInterpolant(
	    		parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	    	Interpolant.call(
	    			this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	    }

	    DiscreteInterpolant.prototype =
	    		Object.assign( Object.create( Interpolant.prototype ), {

	    	constructor: DiscreteInterpolant,

	    	interpolate_: function( i1, t0, t, t1 ) {

	    		return this.copySampleValue_( i1 - 1 );

	    	}

	    } );

	    var KeyframeTrackPrototype;

	    KeyframeTrackPrototype = {

	    	TimeBufferType: Float32Array,
	    	ValueBufferType: Float32Array,

	    	DefaultInterpolation: InterpolateLinear,

	    	InterpolantFactoryMethodDiscrete: function( result ) {

	    		return new DiscreteInterpolant(
	    				this.times, this.values, this.getValueSize(), result );

	    	},

	    	InterpolantFactoryMethodLinear: function( result ) {

	    		return new LinearInterpolant(
	    				this.times, this.values, this.getValueSize(), result );

	    	},

	    	InterpolantFactoryMethodSmooth: function( result ) {

	    		return new CubicInterpolant(
	    				this.times, this.values, this.getValueSize(), result );

	    	},

	    	setInterpolation: function( interpolation ) {

	    		var factoryMethod;

	    		switch ( interpolation ) {

	    			case InterpolateDiscrete:

	    				factoryMethod = this.InterpolantFactoryMethodDiscrete;

	    				break;

	    			case InterpolateLinear:

	    				factoryMethod = this.InterpolantFactoryMethodLinear;

	    				break;

	    			case InterpolateSmooth:

	    				factoryMethod = this.InterpolantFactoryMethodSmooth;

	    				break;

	    		}

	    		if ( factoryMethod === undefined ) {

	    			var message = "unsupported interpolation for " +
	    					this.ValueTypeName + " keyframe track named " + this.name;

	    			if ( this.createInterpolant === undefined ) {

	    				// fall back to default, unless the default itself is messed up
	    				if ( interpolation !== this.DefaultInterpolation ) {

	    					this.setInterpolation( this.DefaultInterpolation );

	    				} else {

	    					throw new Error( message ); // fatal, in this case

	    				}

	    			}

	    			console.warn( message );
	    			return;

	    		}

	    		this.createInterpolant = factoryMethod;

	    	},

	    	getInterpolation: function() {

	    		switch ( this.createInterpolant ) {

	    			case this.InterpolantFactoryMethodDiscrete:

	    				return InterpolateDiscrete;

	    			case this.InterpolantFactoryMethodLinear:

	    				return InterpolateLinear;

	    			case this.InterpolantFactoryMethodSmooth:

	    				return InterpolateSmooth;

	    		}

	    	},

	    	getValueSize: function() {

	    		return this.values.length / this.times.length;

	    	},

	    	// move all keyframes either forwards or backwards in time
	    	shift: function( timeOffset ) {

	    		if( timeOffset !== 0.0 ) {

	    			var times = this.times;

	    			for( var i = 0, n = times.length; i !== n; ++ i ) {

	    				times[ i ] += timeOffset;

	    			}

	    		}

	    		return this;

	    	},

	    	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
	    	scale: function( timeScale ) {

	    		if( timeScale !== 1.0 ) {

	    			var times = this.times;

	    			for( var i = 0, n = times.length; i !== n; ++ i ) {

	    				times[ i ] *= timeScale;

	    			}

	    		}

	    		return this;

	    	},

	    	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
	    	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
	    	trim: function( startTime, endTime ) {

	    		var times = this.times,
	    			nKeys = times.length,
	    			from = 0,
	    			to = nKeys - 1;

	    		while ( from !== nKeys && times[ from ] < startTime ) ++ from;
	    		while ( to !== -1 && times[ to ] > endTime ) -- to;

	    		++ to; // inclusive -> exclusive bound

	    		if( from !== 0 || to !== nKeys ) {

	    			// empty tracks are forbidden, so keep at least one keyframe
	    			if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;

	    			var stride = this.getValueSize();
	    			this.times = exports.AnimationUtils.arraySlice( times, from, to );
	    			this.values = exports.AnimationUtils.
	    					arraySlice( this.values, from * stride, to * stride );

	    		}

	    		return this;

	    	},

	    	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
	    	validate: function() {

	    		var valid = true;

	    		var valueSize = this.getValueSize();
	    		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

	    			console.error( "invalid value size in track", this );
	    			valid = false;

	    		}

	    		var times = this.times,
	    			values = this.values,

	    			nKeys = times.length;

	    		if( nKeys === 0 ) {

	    			console.error( "track is empty", this );
	    			valid = false;

	    		}

	    		var prevTime = null;

	    		for( var i = 0; i !== nKeys; i ++ ) {

	    			var currTime = times[ i ];

	    			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

	    				console.error( "time is not a valid number", this, i, currTime );
	    				valid = false;
	    				break;

	    			}

	    			if( prevTime !== null && prevTime > currTime ) {

	    				console.error( "out of order keys", this, i, currTime, prevTime );
	    				valid = false;
	    				break;

	    			}

	    			prevTime = currTime;

	    		}

	    		if ( values !== undefined ) {

	    			if ( exports.AnimationUtils.isTypedArray( values ) ) {

	    				for ( var i = 0, n = values.length; i !== n; ++ i ) {

	    					var value = values[ i ];

	    					if ( isNaN( value ) ) {

	    						console.error( "value is not a valid number", this, i, value );
	    						valid = false;
	    						break;

	    					}

	    				}

	    			}

	    		}

	    		return valid;

	    	},

	    	// removes equivalent sequential keys as common in morph target sequences
	    	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
	    	optimize: function() {

	    		var times = this.times,
	    			values = this.values,
	    			stride = this.getValueSize(),

	    			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

	    			writeIndex = 1,
	    			lastIndex = times.length - 1;

	    		for( var i = 1; i < lastIndex; ++ i ) {

	    			var keep = false;

	    			var time = times[ i ];
	    			var timeNext = times[ i + 1 ];

	    			// remove adjacent keyframes scheduled at the same time

	    			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

	    				if ( ! smoothInterpolation ) {

	    					// remove unnecessary keyframes same as their neighbors

	    					var offset = i * stride,
	    						offsetP = offset - stride,
	    						offsetN = offset + stride;

	    					for ( var j = 0; j !== stride; ++ j ) {

	    						var value = values[ offset + j ];

	    						if ( value !== values[ offsetP + j ] ||
	    								value !== values[ offsetN + j ] ) {

	    							keep = true;
	    							break;

	    						}

	    					}

	    				} else keep = true;

	    			}

	    			// in-place compaction

	    			if ( keep ) {

	    				if ( i !== writeIndex ) {

	    					times[ writeIndex ] = times[ i ];

	    					var readOffset = i * stride,
	    						writeOffset = writeIndex * stride;

	    					for ( var j = 0; j !== stride; ++ j )

	    						values[ writeOffset + j ] = values[ readOffset + j ];

	    				}

	    				++ writeIndex;

	    			}

	    		}

	    		// flush last keyframe (compaction looks ahead)

	    		if ( lastIndex > 0 ) {

	    			times[ writeIndex ] = times[ lastIndex ];

	    			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

	    				values[ writeOffset + j ] = values[ readOffset + j ];

	    			++ writeIndex;

	    		}

	    		if ( writeIndex !== times.length ) {

	    			this.times = exports.AnimationUtils.arraySlice( times, 0, writeIndex );
	    			this.values = exports.AnimationUtils.arraySlice( values, 0, writeIndex * stride );

	    		}

	    		return this;

	    	}

	    }

	    function KeyframeTrackConstructor( name, times, values, interpolation ) {

	    	if( name === undefined ) throw new Error( "track name is undefined" );

	    	if( times === undefined || times.length === 0 ) {

	    		throw new Error( "no keyframes in track named " + name );

	    	}

	    	this.name = name;

	    	this.times = exports.AnimationUtils.convertArray( times, this.TimeBufferType );
	    	this.values = exports.AnimationUtils.convertArray( values, this.ValueBufferType );

	    	this.setInterpolation( interpolation || this.DefaultInterpolation );

	    	this.validate();
	    	this.optimize();

	    }

	    /**
	     *
	     * A Track of vectored keyframe values.
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function VectorKeyframeTrack( name, times, values, interpolation ) {

	    	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	    }

	    VectorKeyframeTrack.prototype =
	    		Object.assign( Object.create( KeyframeTrackPrototype ), {

	    	constructor: VectorKeyframeTrack,

	    	ValueTypeName: 'vector'

	    	// ValueBufferType is inherited

	    	// DefaultInterpolation is inherited

	    } );

	    /**
	     * Spherical linear unit quaternion interpolant.
	     *
	     * @author tschw
	     */

	    function QuaternionLinearInterpolant(
	    		parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	    	Interpolant.call(
	    			this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	    }

	    QuaternionLinearInterpolant.prototype =
	    		Object.assign( Object.create( Interpolant.prototype ), {

	    	constructor: QuaternionLinearInterpolant,

	    	interpolate_: function( i1, t0, t, t1 ) {

	    		var result = this.resultBuffer,
	    			values = this.sampleValues,
	    			stride = this.valueSize,

	    			offset = i1 * stride,

	    			alpha = ( t - t0 ) / ( t1 - t0 );

	    		for ( var end = offset + stride; offset !== end; offset += 4 ) {

	    			Quaternion.slerpFlat( result, 0,
	    					values, offset - stride, values, offset, alpha );

	    		}

	    		return result;

	    	}

	    } );

	    /**
	     *
	     * A Track of quaternion keyframe values.
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function QuaternionKeyframeTrack( name, times, values, interpolation ) {

	    	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	    }

	    QuaternionKeyframeTrack.prototype =
	    		Object.assign( Object.create( KeyframeTrackPrototype ), {

	    	constructor: QuaternionKeyframeTrack,

	    	ValueTypeName: 'quaternion',

	    	// ValueBufferType is inherited

	    	DefaultInterpolation: InterpolateLinear,

	    	InterpolantFactoryMethodLinear: function( result ) {

	    		return new QuaternionLinearInterpolant(
	    				this.times, this.values, this.getValueSize(), result );

	    	},

	    	InterpolantFactoryMethodSmooth: undefined // not yet implemented

	    } );

	    /**
	     *
	     * A Track of numeric keyframe values.
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function NumberKeyframeTrack( name, times, values, interpolation ) {

	    	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	    }

	    NumberKeyframeTrack.prototype =
	    		Object.assign( Object.create( KeyframeTrackPrototype ), {

	    	constructor: NumberKeyframeTrack,

	    	ValueTypeName: 'number',

	    	// ValueBufferType is inherited

	    	// DefaultInterpolation is inherited

	    } );

	    /**
	     *
	     * A Track that interpolates Strings
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function StringKeyframeTrack( name, times, values, interpolation ) {

	    	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	    }

	    StringKeyframeTrack.prototype =
	    		Object.assign( Object.create( KeyframeTrackPrototype ), {

	    	constructor: StringKeyframeTrack,

	    	ValueTypeName: 'string',
	    	ValueBufferType: Array,

	    	DefaultInterpolation: InterpolateDiscrete,

	    	InterpolantFactoryMethodLinear: undefined,

	    	InterpolantFactoryMethodSmooth: undefined

	    } );

	    /**
	     *
	     * A Track of Boolean keyframe values.
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function BooleanKeyframeTrack( name, times, values ) {

	    	KeyframeTrackConstructor.call( this, name, times, values );

	    }

	    BooleanKeyframeTrack.prototype =
	    		Object.assign( Object.create( KeyframeTrackPrototype ), {

	    	constructor: BooleanKeyframeTrack,

	    	ValueTypeName: 'bool',
	    	ValueBufferType: Array,

	    	DefaultInterpolation: InterpolateDiscrete,

	    	InterpolantFactoryMethodLinear: undefined,
	    	InterpolantFactoryMethodSmooth: undefined

	    	// Note: Actually this track could have a optimized / compressed
	    	// representation of a single value and a custom interpolant that
	    	// computes "firstValue ^ isOdd( index )".

	    } );

	    /**
	     *
	     * A Track of keyframe values that represent color.
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function ColorKeyframeTrack( name, times, values, interpolation ) {

	    	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	    }

	    ColorKeyframeTrack.prototype =
	    		Object.assign( Object.create( KeyframeTrackPrototype ), {

	    	constructor: ColorKeyframeTrack,

	    	ValueTypeName: 'color'

	    	// ValueBufferType is inherited

	    	// DefaultInterpolation is inherited


	    	// Note: Very basic implementation and nothing special yet.
	    	// However, this is the place for color space parameterization.

	    } );

	    /**
	     *
	     * A timed sequence of keyframes for a specific property.
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function KeyframeTrack( name, times, values, interpolation ) {

	    	KeyframeTrackConstructor.apply( this, arguments );

	    }

	    KeyframeTrack.prototype = KeyframeTrackPrototype;
	    KeyframeTrackPrototype.constructor = KeyframeTrack;

	    // Static methods:

	    Object.assign( KeyframeTrack, {

	    	// Serialization (in static context, because of constructor invocation
	    	// and automatic invocation of .toJSON):

	    	parse: function( json ) {

	    		if( json.type === undefined ) {

	    			throw new Error( "track type undefined, can not parse" );

	    		}

	    		var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

	    		if ( json.times === undefined ) {

	    			var times = [], values = [];

	    			exports.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

	    			json.times = times;
	    			json.values = values;

	    		}

	    		// derived classes can define a static parse method
	    		if ( trackType.parse !== undefined ) {

	    			return trackType.parse( json );

	    		} else {

	    			// by default, we asssume a constructor compatible with the base
	    			return new trackType(
	    					json.name, json.times, json.values, json.interpolation );

	    		}

	    	},

	    	toJSON: function( track ) {

	    		var trackType = track.constructor;

	    		var json;

	    		// derived classes can define a static toJSON method
	    		if ( trackType.toJSON !== undefined ) {

	    			json = trackType.toJSON( track );

	    		} else {

	    			// by default, we assume the data can be serialized as-is
	    			json = {

	    				'name': track.name,
	    				'times': exports.AnimationUtils.convertArray( track.times, Array ),
	    				'values': exports.AnimationUtils.convertArray( track.values, Array )

	    			};

	    			var interpolation = track.getInterpolation();

	    			if ( interpolation !== track.DefaultInterpolation ) {

	    				json.interpolation = interpolation;

	    			}

	    		}

	    		json.type = track.ValueTypeName; // mandatory

	    		return json;

	    	},

	    	_getTrackTypeForValueTypeName: function( typeName ) {

	    		switch( typeName.toLowerCase() ) {

	    			case "scalar":
	    			case "double":
	    			case "float":
	    			case "number":
	    			case "integer":

	    				return NumberKeyframeTrack;

	    			case "vector":
	    			case "vector2":
	    			case "vector3":
	    			case "vector4":

	    				return VectorKeyframeTrack;

	    			case "color":

	    				return ColorKeyframeTrack;

	    			case "quaternion":

	    				return QuaternionKeyframeTrack;

	    			case "bool":
	    			case "boolean":

	    				return BooleanKeyframeTrack;

	    			case "string":

	    				return StringKeyframeTrack;

	    		}

	    		throw new Error( "Unsupported typeName: " + typeName );

	    	}

	    } );

	    /**
	     *
	     * Reusable set of Tracks that represent an animation.
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     */

	    function AnimationClip( name, duration, tracks ) {

	    	this.name = name;
	    	this.tracks = tracks;
	    	this.duration = ( duration !== undefined ) ? duration : -1;

	    	this.uuid = exports.Math.generateUUID();

	    	// this means it should figure out its duration by scanning the tracks
	    	if ( this.duration < 0 ) {

	    		this.resetDuration();

	    	}

	    	this.optimize();

	    }

	    AnimationClip.prototype = {

	    	constructor: AnimationClip,

	    	resetDuration: function() {

	    		var tracks = this.tracks,
	    			duration = 0;

	    		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

	    			var track = this.tracks[ i ];

	    			duration = Math.max(
	    					duration, track.times[ track.times.length - 1 ] );

	    		}

	    		this.duration = duration;

	    	},

	    	trim: function() {

	    		for ( var i = 0; i < this.tracks.length; i ++ ) {

	    			this.tracks[ i ].trim( 0, this.duration );

	    		}

	    		return this;

	    	},

	    	optimize: function() {

	    		for ( var i = 0; i < this.tracks.length; i ++ ) {

	    			this.tracks[ i ].optimize();

	    		}

	    		return this;

	    	}

	    };

	    // Static methods:

	    Object.assign( AnimationClip, {

	    	parse: function( json ) {

	    		var tracks = [],
	    			jsonTracks = json.tracks,
	    			frameTime = 1.0 / ( json.fps || 1.0 );

	    		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

	    			tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

	    		}

	    		return new AnimationClip( json.name, json.duration, tracks );

	    	},


	    	toJSON: function( clip ) {

	    		var tracks = [],
	    			clipTracks = clip.tracks;

	    		var json = {

	    			'name': clip.name,
	    			'duration': clip.duration,
	    			'tracks': tracks

	    		};

	    		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

	    			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

	    		}

	    		return json;

	    	},


	    	CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {

	    		var numMorphTargets = morphTargetSequence.length;
	    		var tracks = [];

	    		for ( var i = 0; i < numMorphTargets; i ++ ) {

	    			var times = [];
	    			var values = [];

	    			times.push(
	    					( i + numMorphTargets - 1 ) % numMorphTargets,
	    					i,
	    					( i + 1 ) % numMorphTargets );

	    			values.push( 0, 1, 0 );

	    			var order = exports.AnimationUtils.getKeyframeOrder( times );
	    			times = exports.AnimationUtils.sortedArray( times, 1, order );
	    			values = exports.AnimationUtils.sortedArray( values, 1, order );

	    			// if there is a key at the first frame, duplicate it as the
	    			// last frame as well for perfect loop.
	    			if ( ! noLoop && times[ 0 ] === 0 ) {

	    				times.push( numMorphTargets );
	    				values.push( values[ 0 ] );

	    			}

	    			tracks.push(
	    					new NumberKeyframeTrack(
	    						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
	    						times, values
	    					).scale( 1.0 / fps ) );
	    		}

	    		return new AnimationClip( name, -1, tracks );

	    	},

	    	findByName: function( objectOrClipArray, name ) {

	    		var clipArray = objectOrClipArray;

	    		if ( ! Array.isArray( objectOrClipArray ) ) {

	    			var o = objectOrClipArray;
	    			clipArray = o.geometry && o.geometry.animations || o.animations;

	    		}

	    		for ( var i = 0; i < clipArray.length; i ++ ) {

	    			if ( clipArray[ i ].name === name ) {

	    				return clipArray[ i ];

	    			}
	    		}

	    		return null;

	    	},

	    	CreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {

	    		var animationToMorphTargets = {};

	    		// tested with https://regex101.com/ on trick sequences
	    		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
	    		var pattern = /^([\w-]*?)([\d]+)$/;

	    		// sort morph target names into animation groups based
	    		// patterns like Walk_001, Walk_002, Run_001, Run_002
	    		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

	    			var morphTarget = morphTargets[ i ];
	    			var parts = morphTarget.name.match( pattern );

	    			if ( parts && parts.length > 1 ) {

	    				var name = parts[ 1 ];

	    				var animationMorphTargets = animationToMorphTargets[ name ];
	    				if ( ! animationMorphTargets ) {

	    					animationToMorphTargets[ name ] = animationMorphTargets = [];

	    				}

	    				animationMorphTargets.push( morphTarget );

	    			}

	    		}

	    		var clips = [];

	    		for ( var name in animationToMorphTargets ) {

	    			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

	    		}

	    		return clips;

	    	},

	    	// parse the animation.hierarchy format
	    	parseAnimation: function( animation, bones ) {

	    		if ( ! animation ) {

	    			console.error( "  no animation in JSONLoader data" );
	    			return null;

	    		}

	    		var addNonemptyTrack = function(
	    				trackType, trackName, animationKeys, propertyName, destTracks ) {

	    			// only return track if there are actually keys.
	    			if ( animationKeys.length !== 0 ) {

	    				var times = [];
	    				var values = [];

	    				exports.AnimationUtils.flattenJSON(
	    						animationKeys, times, values, propertyName );

	    				// empty keys are filtered out, so check again
	    				if ( times.length !== 0 ) {

	    					destTracks.push( new trackType( trackName, times, values ) );

	    				}

	    			}

	    		};

	    		var tracks = [];

	    		var clipName = animation.name || 'default';
	    		// automatic length determination in AnimationClip.
	    		var duration = animation.length || -1;
	    		var fps = animation.fps || 30;

	    		var hierarchyTracks = animation.hierarchy || [];

	    		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

	    			var animationKeys = hierarchyTracks[ h ].keys;

	    			// skip empty tracks
	    			if ( ! animationKeys || animationKeys.length === 0 ) continue;

	    			// process morph targets in a way exactly compatible
	    			// with AnimationHandler.init( animation )
	    			if ( animationKeys[0].morphTargets ) {

	    				// figure out all morph targets used in this track
	    				var morphTargetNames = {};
	    				for ( var k = 0; k < animationKeys.length; k ++ ) {

	    					if ( animationKeys[k].morphTargets ) {

	    						for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

	    							morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
	    						}

	    					}

	    				}

	    				// create a track for each morph target with all zero
	    				// morphTargetInfluences except for the keys in which
	    				// the morphTarget is named.
	    				for ( var morphTargetName in morphTargetNames ) {

	    					var times = [];
	    					var values = [];

	    					for ( var m = 0;
	    							m !== animationKeys[k].morphTargets.length; ++ m ) {

	    						var animationKey = animationKeys[k];

	    						times.push( animationKey.time );
	    						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

	    					}

	    					tracks.push( new NumberKeyframeTrack(
	    							'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

	    				}

	    				duration = morphTargetNames.length * ( fps || 1.0 );

	    			} else {
	    				// ...assume skeletal animation

	    				var boneName = '.bones[' + bones[ h ].name + ']';

	    				addNonemptyTrack(
	    						VectorKeyframeTrack, boneName + '.position',
	    						animationKeys, 'pos', tracks );

	    				addNonemptyTrack(
	    						QuaternionKeyframeTrack, boneName + '.quaternion',
	    						animationKeys, 'rot', tracks );

	    				addNonemptyTrack(
	    						VectorKeyframeTrack, boneName + '.scale',
	    						animationKeys, 'scl', tracks );

	    			}

	    		}

	    		if ( tracks.length === 0 ) {

	    			return null;

	    		}

	    		var clip = new AnimationClip( clipName, duration, tracks );

	    		return clip;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function MaterialLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;
	    	this.textures = {};

	    }

	    Object.assign( MaterialLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var scope = this;

	    		var loader = new XHRLoader( scope.manager );
	    		loader.load( url, function ( text ) {

	    			onLoad( scope.parse( JSON.parse( text ) ) );

	    		}, onProgress, onError );

	    	},

	    	setTextures: function ( value ) {

	    		this.textures = value;

	    	},

	    	parse: function ( json ) {

	    		var textures = this.textures;

	    		function getTexture( name ) {

	    			if ( textures[ name ] === undefined ) {

	    				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

	    			}

	    			return textures[ name ];

	    		}

	    		var material = new Materials[ json.type ]();

	    		if ( json.uuid !== undefined ) material.uuid = json.uuid;
	    		if ( json.name !== undefined ) material.name = json.name;
	    		if ( json.color !== undefined ) material.color.setHex( json.color );
	    		if ( json.roughness !== undefined ) material.roughness = json.roughness;
	    		if ( json.metalness !== undefined ) material.metalness = json.metalness;
	    		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
	    		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
	    		if ( json.shininess !== undefined ) material.shininess = json.shininess;
	    		if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
	    		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
	    		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
	    		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
	    		if ( json.fog !== undefined ) material.fog = json.fog;
	    		if ( json.shading !== undefined ) material.shading = json.shading;
	    		if ( json.blending !== undefined ) material.blending = json.blending;
	    		if ( json.side !== undefined ) material.side = json.side;
	    		if ( json.opacity !== undefined ) material.opacity = json.opacity;
	    		if ( json.transparent !== undefined ) material.transparent = json.transparent;
	    		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
	    		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
	    		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
	    		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
	    		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
	    		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
	    		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
	    		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
	    		if ( json.skinning !== undefined ) material.skinning = json.skinning;
	    		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;

	    		// for PointsMaterial

	    		if ( json.size !== undefined ) material.size = json.size;
	    		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

	    		// maps

	    		if ( json.map !== undefined ) material.map = getTexture( json.map );

	    		if ( json.alphaMap !== undefined ) {

	    			material.alphaMap = getTexture( json.alphaMap );
	    			material.transparent = true;

	    		}

	    		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
	    		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

	    		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
	    		if ( json.normalScale !== undefined ) {

	    			var normalScale = json.normalScale;

	    			if ( Array.isArray( normalScale ) === false ) {

	    				// Blender exporter used to export a scalar. See #7459

	    				normalScale = [ normalScale, normalScale ];

	    			}

	    			material.normalScale = new Vector2().fromArray( normalScale );

	    		}

	    		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
	    		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
	    		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

	    		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
	    		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

	    		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
	    		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

	    		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

	    		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

	    		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

	    		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
	    		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

	    		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
	    		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

	    		// MultiMaterial

	    		if ( json.materials !== undefined ) {

	    			for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

	    				material.materials.push( this.parse( json.materials[ i ] ) );

	    			}

	    		}

	    		return material;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function BufferGeometryLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    }

	    Object.assign( BufferGeometryLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var scope = this;

	    		var loader = new XHRLoader( scope.manager );
	    		loader.load( url, function ( text ) {

	    			onLoad( scope.parse( JSON.parse( text ) ) );

	    		}, onProgress, onError );

	    	},

	    	parse: function ( json ) {

	    		var geometry = new BufferGeometry();

	    		var index = json.data.index;

	    		var TYPED_ARRAYS = {
	    			'Int8Array': Int8Array,
	    			'Uint8Array': Uint8Array,
	    			'Uint8ClampedArray': Uint8ClampedArray,
	    			'Int16Array': Int16Array,
	    			'Uint16Array': Uint16Array,
	    			'Int32Array': Int32Array,
	    			'Uint32Array': Uint32Array,
	    			'Float32Array': Float32Array,
	    			'Float64Array': Float64Array
	    		};

	    		if ( index !== undefined ) {

	    			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
	    			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

	    		}

	    		var attributes = json.data.attributes;

	    		for ( var key in attributes ) {

	    			var attribute = attributes[ key ];
	    			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

	    			geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

	    		}

	    		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

	    		if ( groups !== undefined ) {

	    			for ( var i = 0, n = groups.length; i !== n; ++ i ) {

	    				var group = groups[ i ];

	    				geometry.addGroup( group.start, group.count, group.materialIndex );

	    			}

	    		}

	    		var boundingSphere = json.data.boundingSphere;

	    		if ( boundingSphere !== undefined ) {

	    			var center = new Vector3();

	    			if ( boundingSphere.center !== undefined ) {

	    				center.fromArray( boundingSphere.center );

	    			}

	    			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

	    		}

	    		return geometry;

	    	}

	    } );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Loader() {

	    	this.onLoadStart = function () {};
	    	this.onLoadProgress = function () {};
	    	this.onLoadComplete = function () {};

	    }

	    Loader.prototype = {

	    	constructor: Loader,

	    	crossOrigin: undefined,

	    	extractUrlBase: function ( url ) {

	    		var parts = url.split( '/' );

	    		if ( parts.length === 1 ) return './';

	    		parts.pop();

	    		return parts.join( '/' ) + '/';

	    	},

	    	initMaterials: function ( materials, texturePath, crossOrigin ) {

	    		var array = [];

	    		for ( var i = 0; i < materials.length; ++ i ) {

	    			array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

	    		}

	    		return array;

	    	},

	    	createMaterial: ( function () {

	    		var color, textureLoader, materialLoader;

	    		return function createMaterial( m, texturePath, crossOrigin ) {

	    			if ( color === undefined ) color = new Color();
	    			if ( textureLoader === undefined ) textureLoader = new TextureLoader();
	    			if ( materialLoader === undefined ) materialLoader = new MaterialLoader();

	    			// convert from old material format

	    			var textures = {};

	    			function loadTexture( path, repeat, offset, wrap, anisotropy ) {

	    				var fullPath = texturePath + path;
	    				var loader = Loader.Handlers.get( fullPath );

	    				var texture;

	    				if ( loader !== null ) {

	    					texture = loader.load( fullPath );

	    				} else {

	    					textureLoader.setCrossOrigin( crossOrigin );
	    					texture = textureLoader.load( fullPath );

	    				}

	    				if ( repeat !== undefined ) {

	    					texture.repeat.fromArray( repeat );

	    					if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
	    					if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

	    				}

	    				if ( offset !== undefined ) {

	    					texture.offset.fromArray( offset );

	    				}

	    				if ( wrap !== undefined ) {

	    					if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
	    					if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

	    					if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
	    					if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

	    				}

	    				if ( anisotropy !== undefined ) {

	    					texture.anisotropy = anisotropy;

	    				}

	    				var uuid = exports.Math.generateUUID();

	    				textures[ uuid ] = texture;

	    				return uuid;

	    			}

	    			//

	    			var json = {
	    				uuid: exports.Math.generateUUID(),
	    				type: 'MeshLambertMaterial'
	    			};

	    			for ( var name in m ) {

	    				var value = m[ name ];

	    				switch ( name ) {
	    					case 'DbgColor':
	    					case 'DbgIndex':
	    					case 'opticalDensity':
	    					case 'illumination':
	    						break;
	    					case 'DbgName':
	    						json.name = value;
	    						break;
	    					case 'blending':
	    						json.blending = BlendingMode[ value ];
	    						break;
	    					case 'colorAmbient':
	    					case 'mapAmbient':
	    						console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
	    						break;
	    					case 'colorDiffuse':
	    						json.color = color.fromArray( value ).getHex();
	    						break;
	    					case 'colorSpecular':
	    						json.specular = color.fromArray( value ).getHex();
	    						break;
	    					case 'colorEmissive':
	    						json.emissive = color.fromArray( value ).getHex();
	    						break;
	    					case 'specularCoef':
	    						json.shininess = value;
	    						break;
	    					case 'shading':
	    						if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
	    						if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
	    						if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
	    						break;
	    					case 'mapDiffuse':
	    						json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
	    						break;
	    					case 'mapDiffuseRepeat':
	    					case 'mapDiffuseOffset':
	    					case 'mapDiffuseWrap':
	    					case 'mapDiffuseAnisotropy':
	    						break;
	    					case 'mapEmissive':
	    						json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
	    						break;
	    					case 'mapEmissiveRepeat':
	    					case 'mapEmissiveOffset':
	    					case 'mapEmissiveWrap':
	    					case 'mapEmissiveAnisotropy':
	    						break;
	    					case 'mapLight':
	    						json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
	    						break;
	    					case 'mapLightRepeat':
	    					case 'mapLightOffset':
	    					case 'mapLightWrap':
	    					case 'mapLightAnisotropy':
	    						break;
	    					case 'mapAO':
	    						json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
	    						break;
	    					case 'mapAORepeat':
	    					case 'mapAOOffset':
	    					case 'mapAOWrap':
	    					case 'mapAOAnisotropy':
	    						break;
	    					case 'mapBump':
	    						json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
	    						break;
	    					case 'mapBumpScale':
	    						json.bumpScale = value;
	    						break;
	    					case 'mapBumpRepeat':
	    					case 'mapBumpOffset':
	    					case 'mapBumpWrap':
	    					case 'mapBumpAnisotropy':
	    						break;
	    					case 'mapNormal':
	    						json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
	    						break;
	    					case 'mapNormalFactor':
	    						json.normalScale = [ value, value ];
	    						break;
	    					case 'mapNormalRepeat':
	    					case 'mapNormalOffset':
	    					case 'mapNormalWrap':
	    					case 'mapNormalAnisotropy':
	    						break;
	    					case 'mapSpecular':
	    						json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
	    						break;
	    					case 'mapSpecularRepeat':
	    					case 'mapSpecularOffset':
	    					case 'mapSpecularWrap':
	    					case 'mapSpecularAnisotropy':
	    						break;
	    					case 'mapMetalness':
	    						json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
	    						break;
	    					case 'mapMetalnessRepeat':
	    					case 'mapMetalnessOffset':
	    					case 'mapMetalnessWrap':
	    					case 'mapMetalnessAnisotropy':
	    						break;
	    					case 'mapRoughness':
	    						json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
	    						break;
	    					case 'mapRoughnessRepeat':
	    					case 'mapRoughnessOffset':
	    					case 'mapRoughnessWrap':
	    					case 'mapRoughnessAnisotropy':
	    						break;
	    					case 'mapAlpha':
	    						json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
	    						break;
	    					case 'mapAlphaRepeat':
	    					case 'mapAlphaOffset':
	    					case 'mapAlphaWrap':
	    					case 'mapAlphaAnisotropy':
	    						break;
	    					case 'flipSided':
	    						json.side = BackSide;
	    						break;
	    					case 'doubleSided':
	    						json.side = DoubleSide;
	    						break;
	    					case 'transparency':
	    						console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
	    						json.opacity = value;
	    						break;
	    					case 'depthTest':
	    					case 'depthWrite':
	    					case 'colorWrite':
	    					case 'opacity':
	    					case 'reflectivity':
	    					case 'transparent':
	    					case 'visible':
	    					case 'wireframe':
	    						json[ name ] = value;
	    						break;
	    					case 'vertexColors':
	    						if ( value === true ) json.vertexColors = VertexColors;
	    						if ( value === 'face' ) json.vertexColors = FaceColors;
	    						break;
	    					default:
	    						console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
	    						break;
	    				}

	    			}

	    			if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
	    			if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

	    			if ( json.opacity < 1 ) json.transparent = true;

	    			materialLoader.setTextures( textures );

	    			return materialLoader.parse( json );

	    		};

	    	} )()

	    };

	    Loader.Handlers = {

	    	handlers: [],

	    	add: function ( regex, loader ) {

	    		this.handlers.push( regex, loader );

	    	},

	    	get: function ( file ) {

	    		var handlers = this.handlers;

	    		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

	    			var regex = handlers[ i ];
	    			var loader  = handlers[ i + 1 ];

	    			if ( regex.test( file ) ) {

	    				return loader;

	    			}

	    		}

	    		return null;

	    	}

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function JSONLoader( manager ) {

	    	if ( typeof manager === 'boolean' ) {

	    		console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
	    		manager = undefined;

	    	}

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    	this.withCredentials = false;

	    }

	    Object.assign( JSONLoader.prototype, {

	    	load: function( url, onLoad, onProgress, onError ) {

	    		var scope = this;

	    		var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

	    		var loader = new XHRLoader( this.manager );
	    		loader.setWithCredentials( this.withCredentials );
	    		loader.load( url, function ( text ) {

	    			var json = JSON.parse( text );
	    			var metadata = json.metadata;

	    			if ( metadata !== undefined ) {

	    				var type = metadata.type;

	    				if ( type !== undefined ) {

	    					if ( type.toLowerCase() === 'object' ) {

	    						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
	    						return;

	    					}

	    					if ( type.toLowerCase() === 'scene' ) {

	    						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
	    						return;

	    					}

	    				}

	    			}

	    			var object = scope.parse( json, texturePath );
	    			onLoad( object.geometry, object.materials );

	    		}, onProgress, onError );

	    	},

	    	setTexturePath: function ( value ) {

	    		this.texturePath = value;

	    	},

	    	parse: function ( json, texturePath ) {

	    		var geometry = new Geometry(),
	    		scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

	    		parseModel( scale );

	    		parseSkin();
	    		parseMorphing( scale );
	    		parseAnimations();

	    		geometry.computeFaceNormals();
	    		geometry.computeBoundingSphere();

	    		function parseModel( scale ) {

	    			function isBitSet( value, position ) {

	    				return value & ( 1 << position );

	    			}

	    			var i, j, fi,

	    			offset, zLength,

	    		colorIndex, normalIndex, uvIndex, materialIndex,

	    			type,
	    			isQuad,
	    			hasMaterial,
	    			hasFaceVertexUv,
	    			hasFaceNormal, hasFaceVertexNormal,
	    			hasFaceColor, hasFaceVertexColor,

	    		vertex, face, faceA, faceB, hex, normal,

	    			uvLayer, uv, u, v,

	    			faces = json.faces,
	    			vertices = json.vertices,
	    			normals = json.normals,
	    			colors = json.colors,

	    			nUvLayers = 0;

	    			if ( json.uvs !== undefined ) {

	    				// disregard empty arrays

	    				for ( i = 0; i < json.uvs.length; i ++ ) {

	    					if ( json.uvs[ i ].length ) nUvLayers ++;

	    				}

	    				for ( i = 0; i < nUvLayers; i ++ ) {

	    					geometry.faceVertexUvs[ i ] = [];

	    				}

	    			}

	    			offset = 0;
	    			zLength = vertices.length;

	    			while ( offset < zLength ) {

	    				vertex = new Vector3();

	    				vertex.x = vertices[ offset ++ ] * scale;
	    				vertex.y = vertices[ offset ++ ] * scale;
	    				vertex.z = vertices[ offset ++ ] * scale;

	    				geometry.vertices.push( vertex );

	    			}

	    			offset = 0;
	    			zLength = faces.length;

	    			while ( offset < zLength ) {

	    				type = faces[ offset ++ ];


	    				isQuad              = isBitSet( type, 0 );
	    				hasMaterial         = isBitSet( type, 1 );
	    				hasFaceVertexUv     = isBitSet( type, 3 );
	    				hasFaceNormal       = isBitSet( type, 4 );
	    				hasFaceVertexNormal = isBitSet( type, 5 );
	    				hasFaceColor	     = isBitSet( type, 6 );
	    				hasFaceVertexColor  = isBitSet( type, 7 );

	    				// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

	    				if ( isQuad ) {

	    					faceA = new Face3();
	    					faceA.a = faces[ offset ];
	    					faceA.b = faces[ offset + 1 ];
	    					faceA.c = faces[ offset + 3 ];

	    					faceB = new Face3();
	    					faceB.a = faces[ offset + 1 ];
	    					faceB.b = faces[ offset + 2 ];
	    					faceB.c = faces[ offset + 3 ];

	    					offset += 4;

	    					if ( hasMaterial ) {

	    						materialIndex = faces[ offset ++ ];
	    						faceA.materialIndex = materialIndex;
	    						faceB.materialIndex = materialIndex;

	    					}

	    					// to get face <=> uv index correspondence

	    					fi = geometry.faces.length;

	    					if ( hasFaceVertexUv ) {

	    						for ( i = 0; i < nUvLayers; i ++ ) {

	    							uvLayer = json.uvs[ i ];

	    							geometry.faceVertexUvs[ i ][ fi ] = [];
	    							geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

	    							for ( j = 0; j < 4; j ++ ) {

	    								uvIndex = faces[ offset ++ ];

	    								u = uvLayer[ uvIndex * 2 ];
	    								v = uvLayer[ uvIndex * 2 + 1 ];

	    								uv = new Vector2( u, v );

	    								if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
	    								if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

	    							}

	    						}

	    					}

	    					if ( hasFaceNormal ) {

	    						normalIndex = faces[ offset ++ ] * 3;

	    						faceA.normal.set(
	    							normals[ normalIndex ++ ],
	    							normals[ normalIndex ++ ],
	    							normals[ normalIndex ]
	    						);

	    						faceB.normal.copy( faceA.normal );

	    					}

	    					if ( hasFaceVertexNormal ) {

	    						for ( i = 0; i < 4; i ++ ) {

	    							normalIndex = faces[ offset ++ ] * 3;

	    							normal = new Vector3(
	    								normals[ normalIndex ++ ],
	    								normals[ normalIndex ++ ],
	    								normals[ normalIndex ]
	    							);


	    							if ( i !== 2 ) faceA.vertexNormals.push( normal );
	    							if ( i !== 0 ) faceB.vertexNormals.push( normal );

	    						}

	    					}


	    					if ( hasFaceColor ) {

	    						colorIndex = faces[ offset ++ ];
	    						hex = colors[ colorIndex ];

	    						faceA.color.setHex( hex );
	    						faceB.color.setHex( hex );

	    					}


	    					if ( hasFaceVertexColor ) {

	    						for ( i = 0; i < 4; i ++ ) {

	    							colorIndex = faces[ offset ++ ];
	    							hex = colors[ colorIndex ];

	    							if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
	    							if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

	    						}

	    					}

	    					geometry.faces.push( faceA );
	    					geometry.faces.push( faceB );

	    				} else {

	    					face = new Face3();
	    					face.a = faces[ offset ++ ];
	    					face.b = faces[ offset ++ ];
	    					face.c = faces[ offset ++ ];

	    					if ( hasMaterial ) {

	    						materialIndex = faces[ offset ++ ];
	    						face.materialIndex = materialIndex;

	    					}

	    					// to get face <=> uv index correspondence

	    					fi = geometry.faces.length;

	    					if ( hasFaceVertexUv ) {

	    						for ( i = 0; i < nUvLayers; i ++ ) {

	    							uvLayer = json.uvs[ i ];

	    							geometry.faceVertexUvs[ i ][ fi ] = [];

	    							for ( j = 0; j < 3; j ++ ) {

	    								uvIndex = faces[ offset ++ ];

	    								u = uvLayer[ uvIndex * 2 ];
	    								v = uvLayer[ uvIndex * 2 + 1 ];

	    								uv = new Vector2( u, v );

	    								geometry.faceVertexUvs[ i ][ fi ].push( uv );

	    							}

	    						}

	    					}

	    					if ( hasFaceNormal ) {

	    						normalIndex = faces[ offset ++ ] * 3;

	    						face.normal.set(
	    							normals[ normalIndex ++ ],
	    							normals[ normalIndex ++ ],
	    							normals[ normalIndex ]
	    						);

	    					}

	    					if ( hasFaceVertexNormal ) {

	    						for ( i = 0; i < 3; i ++ ) {

	    							normalIndex = faces[ offset ++ ] * 3;

	    							normal = new Vector3(
	    								normals[ normalIndex ++ ],
	    								normals[ normalIndex ++ ],
	    								normals[ normalIndex ]
	    							);

	    							face.vertexNormals.push( normal );

	    						}

	    					}


	    					if ( hasFaceColor ) {

	    						colorIndex = faces[ offset ++ ];
	    						face.color.setHex( colors[ colorIndex ] );

	    					}


	    					if ( hasFaceVertexColor ) {

	    						for ( i = 0; i < 3; i ++ ) {

	    							colorIndex = faces[ offset ++ ];
	    							face.vertexColors.push( new Color( colors[ colorIndex ] ) );

	    						}

	    					}

	    					geometry.faces.push( face );

	    				}

	    			}

	    		}

	    		function parseSkin() {

	    			var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

	    			if ( json.skinWeights ) {

	    				for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

	    					var x =                               json.skinWeights[ i ];
	    					var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
	    					var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
	    					var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

	    					geometry.skinWeights.push( new Vector4( x, y, z, w ) );

	    				}

	    			}

	    			if ( json.skinIndices ) {

	    				for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

	    					var a =                               json.skinIndices[ i ];
	    					var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
	    					var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
	    					var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

	    					geometry.skinIndices.push( new Vector4( a, b, c, d ) );

	    				}

	    			}

	    			geometry.bones = json.bones;

	    			if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

	    				console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
	    					geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

	    			}

	    		}

	    		function parseMorphing( scale ) {

	    			if ( json.morphTargets !== undefined ) {

	    				for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

	    					geometry.morphTargets[ i ] = {};
	    					geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
	    					geometry.morphTargets[ i ].vertices = [];

	    					var dstVertices = geometry.morphTargets[ i ].vertices;
	    					var srcVertices = json.morphTargets[ i ].vertices;

	    					for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

	    						var vertex = new Vector3();
	    						vertex.x = srcVertices[ v ] * scale;
	    						vertex.y = srcVertices[ v + 1 ] * scale;
	    						vertex.z = srcVertices[ v + 2 ] * scale;

	    						dstVertices.push( vertex );

	    					}

	    				}

	    			}

	    			if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

	    				console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

	    				var faces = geometry.faces;
	    				var morphColors = json.morphColors[ 0 ].colors;

	    				for ( var i = 0, l = faces.length; i < l; i ++ ) {

	    					faces[ i ].color.fromArray( morphColors, i * 3 );

	    				}

	    			}

	    		}

	    		function parseAnimations() {

	    			var outputAnimations = [];

	    			// parse old style Bone/Hierarchy animations
	    			var animations = [];

	    			if ( json.animation !== undefined ) {

	    				animations.push( json.animation );

	    			}

	    			if ( json.animations !== undefined ) {

	    				if ( json.animations.length ) {

	    					animations = animations.concat( json.animations );

	    				} else {

	    					animations.push( json.animations );

	    				}

	    			}

	    			for ( var i = 0; i < animations.length; i ++ ) {

	    				var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
	    				if ( clip ) outputAnimations.push( clip );

	    			}

	    			// parse implicit morph animations
	    			if ( geometry.morphTargets ) {

	    				// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
	    				var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
	    				outputAnimations = outputAnimations.concat( morphAnimationClips );

	    			}

	    			if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

	    		}

	    		if ( json.materials === undefined || json.materials.length === 0 ) {

	    			return { geometry: geometry };

	    		} else {

	    			var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

	    			return { geometry: geometry, materials: materials };

	    		}

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function ObjectLoader ( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;
	    	this.texturePath = '';

	    }

	    Object.assign( ObjectLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		if ( this.texturePath === '' ) {

	    			this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

	    		}

	    		var scope = this;

	    		var loader = new XHRLoader( scope.manager );
	    		loader.load( url, function ( text ) {

	    			scope.parse( JSON.parse( text ), onLoad );

	    		}, onProgress, onError );

	    	},

	    	setTexturePath: function ( value ) {

	    		this.texturePath = value;

	    	},

	    	setCrossOrigin: function ( value ) {

	    		this.crossOrigin = value;

	    	},

	    	parse: function ( json, onLoad ) {

	    		var geometries = this.parseGeometries( json.geometries );

	    		var images = this.parseImages( json.images, function () {

	    			if ( onLoad !== undefined ) onLoad( object );

	    		} );

	    		var textures  = this.parseTextures( json.textures, images );
	    		var materials = this.parseMaterials( json.materials, textures );

	    		var object = this.parseObject( json.object, geometries, materials );

	    		if ( json.animations ) {

	    			object.animations = this.parseAnimations( json.animations );

	    		}

	    		if ( json.images === undefined || json.images.length === 0 ) {

	    			if ( onLoad !== undefined ) onLoad( object );

	    		}

	    		return object;

	    	},

	    	parseGeometries: function ( json ) {

	    		var geometries = {};

	    		if ( json !== undefined ) {

	    			var geometryLoader = new JSONLoader();
	    			var bufferGeometryLoader = new BufferGeometryLoader();

	    			for ( var i = 0, l = json.length; i < l; i ++ ) {

	    				var geometry;
	    				var data = json[ i ];

	    				switch ( data.type ) {

	    					case 'PlaneGeometry':
	    					case 'PlaneBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.width,
	    							data.height,
	    							data.widthSegments,
	    							data.heightSegments
	    						);

	    						break;

	    					case 'BoxGeometry':
	    					case 'BoxBufferGeometry':
	    					case 'CubeGeometry': // backwards compatible

	    						geometry = new Geometries[ data.type ](
	    							data.width,
	    							data.height,
	    							data.depth,
	    							data.widthSegments,
	    							data.heightSegments,
	    							data.depthSegments
	    						);

	    						break;

	    					case 'CircleGeometry':
	    					case 'CircleBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.radius,
	    							data.segments,
	    							data.thetaStart,
	    							data.thetaLength
	    						);

	    						break;

	    					case 'CylinderGeometry':
	    					case 'CylinderBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.radiusTop,
	    							data.radiusBottom,
	    							data.height,
	    							data.radialSegments,
	    							data.heightSegments,
	    							data.openEnded,
	    							data.thetaStart,
	    							data.thetaLength
	    						);

	    						break;

	    					case 'ConeGeometry':
	    					case 'ConeBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.radius,
	    							data.height,
	    							data.radialSegments,
	    							data.heightSegments,
	    							data.openEnded,
	    							data.thetaStart,
	    							data.thetaLength
	    						);

	    						break;

	    					case 'SphereGeometry':
	    					case 'SphereBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.radius,
	    							data.widthSegments,
	    							data.heightSegments,
	    							data.phiStart,
	    							data.phiLength,
	    							data.thetaStart,
	    							data.thetaLength
	    						);

	    						break;

	    					case 'DodecahedronGeometry':
	    					case 'IcosahedronGeometry':
	    					case 'OctahedronGeometry':
	    					case 'TetrahedronGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.radius,
	    							data.detail
	    						);

	    						break;

	    					case 'RingGeometry':
	    					case 'RingBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.innerRadius,
	    							data.outerRadius,
	    							data.thetaSegments,
	    							data.phiSegments,
	    							data.thetaStart,
	    							data.thetaLength
	    						);

	    						break;

	    					case 'TorusGeometry':
	    					case 'TorusBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.radius,
	    							data.tube,
	    							data.radialSegments,
	    							data.tubularSegments,
	    							data.arc
	    						);

	    						break;

	    					case 'TorusKnotGeometry':
	    					case 'TorusKnotBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.radius,
	    							data.tube,
	    							data.tubularSegments,
	    							data.radialSegments,
	    							data.p,
	    							data.q
	    						);

	    						break;

	    					case 'LatheGeometry':
	    					case 'LatheBufferGeometry':

	    						geometry = new Geometries[ data.type ](
	    							data.points,
	    							data.segments,
	    							data.phiStart,
	    							data.phiLength
	    						);

	    						break;

	    					case 'BufferGeometry':

	    						geometry = bufferGeometryLoader.parse( data );

	    						break;

	    					case 'Geometry':

	    						geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

	    						break;

	    					default:

	    						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

	    						continue;

	    				}

	    				geometry.uuid = data.uuid;

	    				if ( data.name !== undefined ) geometry.name = data.name;

	    				geometries[ data.uuid ] = geometry;

	    			}

	    		}

	    		return geometries;

	    	},

	    	parseMaterials: function ( json, textures ) {

	    		var materials = {};

	    		if ( json !== undefined ) {

	    			var loader = new MaterialLoader();
	    			loader.setTextures( textures );

	    			for ( var i = 0, l = json.length; i < l; i ++ ) {

	    				var material = loader.parse( json[ i ] );
	    				materials[ material.uuid ] = material;

	    			}

	    		}

	    		return materials;

	    	},

	    	parseAnimations: function ( json ) {

	    		var animations = [];

	    		for ( var i = 0; i < json.length; i ++ ) {

	    			var clip = AnimationClip.parse( json[ i ] );

	    			animations.push( clip );

	    		}

	    		return animations;

	    	},

	    	parseImages: function ( json, onLoad ) {

	    		var scope = this;
	    		var images = {};

	    		function loadImage( url ) {

	    			scope.manager.itemStart( url );

	    			return loader.load( url, function () {

	    				scope.manager.itemEnd( url );

	    			}, undefined, function () {

	    				scope.manager.itemError( url );

	    			} );

	    		}

	    		if ( json !== undefined && json.length > 0 ) {

	    			var manager = new LoadingManager( onLoad );

	    			var loader = new ImageLoader( manager );
	    			loader.setCrossOrigin( this.crossOrigin );

	    			for ( var i = 0, l = json.length; i < l; i ++ ) {

	    				var image = json[ i ];
	    				var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

	    				images[ image.uuid ] = loadImage( path );

	    			}

	    		}

	    		return images;

	    	},

	    	parseTextures: function ( json, images ) {

	    		function parseConstant( value, type ) {

	    			if ( typeof( value ) === 'number' ) return value;

	    			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

	    			return type[ value ];

	    		}

	    		var textures = {};

	    		if ( json !== undefined ) {

	    			for ( var i = 0, l = json.length; i < l; i ++ ) {

	    				var data = json[ i ];

	    				if ( data.image === undefined ) {

	    					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

	    				}

	    				if ( images[ data.image ] === undefined ) {

	    					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

	    				}

	    				var texture = new Texture( images[ data.image ] );
	    				texture.needsUpdate = true;

	    				texture.uuid = data.uuid;

	    				if ( data.name !== undefined ) texture.name = data.name;

	    				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );

	    				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
	    				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
	    				if ( data.wrap !== undefined ) {

	    					texture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );
	    					texture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );

	    				}

	    				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );
	    				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );
	    				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

	    				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

	    				textures[ data.uuid ] = texture;

	    			}

	    		}

	    		return textures;

	    	},

	    	parseObject: function () {

	    		var matrix = new Matrix4();

	    		return function parseObject( data, geometries, materials ) {

	    			var object;

	    			function getGeometry( name ) {

	    				if ( geometries[ name ] === undefined ) {

	    					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

	    				}

	    				return geometries[ name ];

	    			}

	    			function getMaterial( name ) {

	    				if ( name === undefined ) return undefined;

	    				if ( materials[ name ] === undefined ) {

	    					console.warn( 'THREE.ObjectLoader: Undefined material', name );

	    				}

	    				return materials[ name ];

	    			}

	    			switch ( data.type ) {

	    				case 'Scene':

	    					object = new Scene();

	    					if ( data.background !== undefined ) {

	    						if ( Number.isInteger( data.background ) ) {

	    							object.background = new Color( data.background );

	    						}

	    					}

	    					if ( data.fog !== undefined ) {

	    						if ( data.fog.type === 'Fog' ) {

	    							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

	    						} else if ( data.fog.type === 'FogExp2' ) {

	    							object.fog = new FogExp2( data.fog.color, data.fog.density );

	    						}

	    					}

	    					break;

	    				case 'PerspectiveCamera':

	    					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

	    					if ( data.focus !== undefined ) object.focus = data.focus;
	    					if ( data.zoom !== undefined ) object.zoom = data.zoom;
	    					if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
	    					if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
	    					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

	    					break;

	    				case 'OrthographicCamera':

	    					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

	    					break;

	    				case 'AmbientLight':

	    					object = new AmbientLight( data.color, data.intensity );

	    					break;

	    				case 'DirectionalLight':

	    					object = new DirectionalLight( data.color, data.intensity );

	    					break;

	    				case 'PointLight':

	    					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

	    					break;

	    				case 'SpotLight':

	    					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

	    					break;

	    				case 'HemisphereLight':

	    					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

	    					break;

	    				case 'Mesh':

	    					var geometry = getGeometry( data.geometry );
	    					var material = getMaterial( data.material );

	    					if ( geometry.bones && geometry.bones.length > 0 ) {

	    						object = new SkinnedMesh( geometry, material );

	    					} else {

	    						object = new Mesh( geometry, material );

	    					}

	    					break;

	    				case 'LOD':

	    					object = new LOD();

	    					break;

	    				case 'Line':

	    					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

	    					break;

	    				case 'LineSegments':

	    					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

	    					break;

	    				case 'PointCloud':
	    				case 'Points':

	    					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

	    					break;

	    				case 'Sprite':

	    					object = new Sprite( getMaterial( data.material ) );

	    					break;

	    				case 'Group':

	    					object = new Group();

	    					break;

	    				default:

	    					object = new Object3D();

	    			}

	    			object.uuid = data.uuid;

	    			if ( data.name !== undefined ) object.name = data.name;
	    			if ( data.matrix !== undefined ) {

	    				matrix.fromArray( data.matrix );
	    				matrix.decompose( object.position, object.quaternion, object.scale );

	    			} else {

	    				if ( data.position !== undefined ) object.position.fromArray( data.position );
	    				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
	    				if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
	    				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

	    			}

	    			if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
	    			if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

	    			if ( data.shadow ) {

	    				if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
	    				if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
	    				if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
	    				if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

	    			}

	    			if ( data.visible !== undefined ) object.visible = data.visible;
	    			if ( data.userData !== undefined ) object.userData = data.userData;

	    			if ( data.children !== undefined ) {

	    				for ( var child in data.children ) {

	    					object.add( this.parseObject( data.children[ child ], geometries, materials ) );

	    				}

	    			}

	    			if ( data.type === 'LOD' ) {

	    				var levels = data.levels;

	    				for ( var l = 0; l < levels.length; l ++ ) {

	    					var level = levels[ l ];
	    					var child = object.getObjectByProperty( 'uuid', level.object );

	    					if ( child !== undefined ) {

	    						object.addLevel( child, level.distance );

	    					}

	    				}

	    			}

	    			return object;

	    		};

	    	}()

	    } );

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     * Extensible curve object
	     *
	     * Some common of Curve methods
	     * .getPoint(t), getTangent(t)
	     * .getPointAt(u), getTangentAt(u)
	     * .getPoints(), .getSpacedPoints()
	     * .getLength()
	     * .updateArcLengths()
	     *
	     * This following classes subclasses THREE.Curve:
	     *
	     * -- 2d classes --
	     * THREE.LineCurve
	     * THREE.QuadraticBezierCurve
	     * THREE.CubicBezierCurve
	     * THREE.SplineCurve
	     * THREE.ArcCurve
	     * THREE.EllipseCurve
	     *
	     * -- 3d classes --
	     * THREE.LineCurve3
	     * THREE.QuadraticBezierCurve3
	     * THREE.CubicBezierCurve3
	     * THREE.SplineCurve3
	     *
	     * A series of curves can be represented as a THREE.CurvePath
	     *
	     **/

	    /**************************************************************
	     *	Abstract Curve base class
	     **************************************************************/

	    function Curve() {}

	    Curve.prototype = {

	    	constructor: Curve,

	    	// Virtual base class method to overwrite and implement in subclasses
	    	//	- t [0 .. 1]

	    	getPoint: function ( t ) {

	    		console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
	    		return null;

	    	},

	    	// Get point at relative position in curve according to arc length
	    	// - u [0 .. 1]

	    	getPointAt: function ( u ) {

	    		var t = this.getUtoTmapping( u );
	    		return this.getPoint( t );

	    	},

	    	// Get sequence of points using getPoint( t )

	    	getPoints: function ( divisions ) {

	    		if ( ! divisions ) divisions = 5;

	    		var points = [];

	    		for ( var d = 0; d <= divisions; d ++ ) {

	    			points.push( this.getPoint( d / divisions ) );

	    		}

	    		return points;

	    	},

	    	// Get sequence of points using getPointAt( u )

	    	getSpacedPoints: function ( divisions ) {

	    		if ( ! divisions ) divisions = 5;

	    		var points = [];

	    		for ( var d = 0; d <= divisions; d ++ ) {

	    			points.push( this.getPointAt( d / divisions ) );

	    		}

	    		return points;

	    	},

	    	// Get total curve arc length

	    	getLength: function () {

	    		var lengths = this.getLengths();
	    		return lengths[ lengths.length - 1 ];

	    	},

	    	// Get list of cumulative segment lengths

	    	getLengths: function ( divisions ) {

	    		if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

	    		if ( this.cacheArcLengths
	    			&& ( this.cacheArcLengths.length === divisions + 1 )
	    			&& ! this.needsUpdate ) {

	    			//console.log( "cached", this.cacheArcLengths );
	    			return this.cacheArcLengths;

	    		}

	    		this.needsUpdate = false;

	    		var cache = [];
	    		var current, last = this.getPoint( 0 );
	    		var p, sum = 0;

	    		cache.push( 0 );

	    		for ( p = 1; p <= divisions; p ++ ) {

	    			current = this.getPoint ( p / divisions );
	    			sum += current.distanceTo( last );
	    			cache.push( sum );
	    			last = current;

	    		}

	    		this.cacheArcLengths = cache;

	    		return cache; // { sums: cache, sum:sum }; Sum is in the last element.

	    	},

	    	updateArcLengths: function() {

	    		this.needsUpdate = true;
	    		this.getLengths();

	    	},

	    	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	    	getUtoTmapping: function ( u, distance ) {

	    		var arcLengths = this.getLengths();

	    		var i = 0, il = arcLengths.length;

	    		var targetArcLength; // The targeted u distance value to get

	    		if ( distance ) {

	    			targetArcLength = distance;

	    		} else {

	    			targetArcLength = u * arcLengths[ il - 1 ];

	    		}

	    		//var time = Date.now();

	    		// binary search for the index with largest value smaller than target u distance

	    		var low = 0, high = il - 1, comparison;

	    		while ( low <= high ) {

	    			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

	    			comparison = arcLengths[ i ] - targetArcLength;

	    			if ( comparison < 0 ) {

	    				low = i + 1;

	    			} else if ( comparison > 0 ) {

	    				high = i - 1;

	    			} else {

	    				high = i;
	    				break;

	    				// DONE

	    			}

	    		}

	    		i = high;

	    		//console.log('b' , i, low, high, Date.now()- time);

	    		if ( arcLengths[ i ] === targetArcLength ) {

	    			var t = i / ( il - 1 );
	    			return t;

	    		}

	    		// we could get finer grain at lengths, or use simple interpolation between two points

	    		var lengthBefore = arcLengths[ i ];
	    		var lengthAfter = arcLengths[ i + 1 ];

	    		var segmentLength = lengthAfter - lengthBefore;

	    		// determine where we are between the 'before' and 'after' points

	    		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

	    		// add that fractional amount to t

	    		var t = ( i + segmentFraction ) / ( il - 1 );

	    		return t;

	    	},

	    	// Returns a unit vector tangent at t
	    	// In case any sub curve does not implement its tangent derivation,
	    	// 2 points a small delta apart will be used to find its gradient
	    	// which seems to give a reasonable approximation

	    	getTangent: function( t ) {

	    		var delta = 0.0001;
	    		var t1 = t - delta;
	    		var t2 = t + delta;

	    		// Capping in case of danger

	    		if ( t1 < 0 ) t1 = 0;
	    		if ( t2 > 1 ) t2 = 1;

	    		var pt1 = this.getPoint( t1 );
	    		var pt2 = this.getPoint( t2 );

	    		var vec = pt2.clone().sub( pt1 );
	    		return vec.normalize();

	    	},

	    	getTangentAt: function ( u ) {

	    		var t = this.getUtoTmapping( u );
	    		return this.getTangent( t );

	    	}

	    };

	    // TODO: Transformation for Curves?

	    /**************************************************************
	     *	3D Curves
	     **************************************************************/

	    // A Factory method for creating new curve subclasses

	    Curve.create = function ( constructor, getPointFunc ) {

	    	constructor.prototype = Object.create( Curve.prototype );
	    	constructor.prototype.constructor = constructor;
	    	constructor.prototype.getPoint = getPointFunc;

	    	return constructor;

	    };

	    /**************************************************************
	     *	Line
	     **************************************************************/

	    function LineCurve( v1, v2 ) {

	    	this.v1 = v1;
	    	this.v2 = v2;

	    }

	    LineCurve.prototype = Object.create( Curve.prototype );
	    LineCurve.prototype.constructor = LineCurve;

	    LineCurve.prototype.isLineCurve = true;

	    LineCurve.prototype.getPoint = function ( t ) {

	    	if ( t === 1 ) {

	    		return this.v2.clone();

	    	}

	    	var point = this.v2.clone().sub( this.v1 );
	    	point.multiplyScalar( t ).add( this.v1 );

	    	return point;

	    };

	    // Line curve is linear, so we can overwrite default getPointAt

	    LineCurve.prototype.getPointAt = function ( u ) {

	    	return this.getPoint( u );

	    };

	    LineCurve.prototype.getTangent = function( t ) {

	    	var tangent = this.v2.clone().sub( this.v1 );

	    	return tangent.normalize();

	    };

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     *
	     **/

	    /**************************************************************
	     *	Curved Path - a curve path is simply a array of connected
	     *  curves, but retains the api of a curve
	     **************************************************************/

	    function CurvePath() {

	    	this.curves = [];

	    	this.autoClose = false; // Automatically closes the path

	    }

	    CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

	    	constructor: CurvePath,

	    	add: function ( curve ) {

	    		this.curves.push( curve );

	    	},

	    	closePath: function () {

	    		// Add a line curve if start and end of lines are not connected
	    		var startPoint = this.curves[ 0 ].getPoint( 0 );
	    		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

	    		if ( ! startPoint.equals( endPoint ) ) {

	    			this.curves.push( new LineCurve( endPoint, startPoint ) );

	    		}

	    	},

	    	// To get accurate point with reference to
	    	// entire path distance at time t,
	    	// following has to be done:

	    	// 1. Length of each sub path have to be known
	    	// 2. Locate and identify type of curve
	    	// 3. Get t for the curve
	    	// 4. Return curve.getPointAt(t')

	    	getPoint: function ( t ) {

	    		var d = t * this.getLength();
	    		var curveLengths = this.getCurveLengths();
	    		var i = 0;

	    		// To think about boundaries points.

	    		while ( i < curveLengths.length ) {

	    			if ( curveLengths[ i ] >= d ) {

	    				var diff = curveLengths[ i ] - d;
	    				var curve = this.curves[ i ];

	    				var segmentLength = curve.getLength();
	    				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

	    				return curve.getPointAt( u );

	    			}

	    			i ++;

	    		}

	    		return null;

	    		// loop where sum != 0, sum > d , sum+1 <d

	    	},

	    	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	    	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	    	// getPoint() depends on getLength

	    	getLength: function () {

	    		var lens = this.getCurveLengths();
	    		return lens[ lens.length - 1 ];

	    	},

	    	// cacheLengths must be recalculated.
	    	updateArcLengths: function () {

	    		this.needsUpdate = true;
	    		this.cacheLengths = null;
	    		this.getLengths();

	    	},

	    	// Compute lengths and cache them
	    	// We cannot overwrite getLengths() because UtoT mapping uses it.

	    	getCurveLengths: function () {

	    		// We use cache values if curves and cache array are same length

	    		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

	    			return this.cacheLengths;

	    		}

	    		// Get length of sub-curve
	    		// Push sums into cached array

	    		var lengths = [], sums = 0;

	    		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

	    			sums += this.curves[ i ].getLength();
	    			lengths.push( sums );

	    		}

	    		this.cacheLengths = lengths;

	    		return lengths;

	    	},

	    	getSpacedPoints: function ( divisions ) {

	    		if ( ! divisions ) divisions = 40;

	    		var points = [];

	    		for ( var i = 0; i <= divisions; i ++ ) {

	    			points.push( this.getPoint( i / divisions ) );

	    		}

	    		if ( this.autoClose ) {

	    			points.push( points[ 0 ] );

	    		}

	    		return points;

	    	},

	    	getPoints: function ( divisions ) {

	    		divisions = divisions || 12;

	    		var points = [], last;

	    		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

	    			var curve = curves[ i ];
	    			var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
	    				: (curve && curve.isLineCurve) ? 1
	    				: (curve && curve.isSplineCurve) ? divisions * curve.points.length
	    				: divisions;

	    			var pts = curve.getPoints( resolution );

	    			for ( var j = 0; j < pts.length; j++ ) {

	    				var point = pts[ j ];

	    				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

	    				points.push( point );
	    				last = point;

	    			}

	    		}

	    		if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

	    			points.push( points[ 0 ] );

	    		}

	    		return points;

	    	},

	    	/**************************************************************
	    	 *	Create Geometries Helpers
	    	 **************************************************************/

	    	/// Generate geometry from path points (for Line or Points objects)

	    	createPointsGeometry: function ( divisions ) {

	    		var pts = this.getPoints( divisions );
	    		return this.createGeometry( pts );

	    	},

	    	// Generate geometry from equidistant sampling along the path

	    	createSpacedPointsGeometry: function ( divisions ) {

	    		var pts = this.getSpacedPoints( divisions );
	    		return this.createGeometry( pts );

	    	},

	    	createGeometry: function ( points ) {

	    		var geometry = new Geometry();

	    		for ( var i = 0, l = points.length; i < l; i ++ ) {

	    			var point = points[ i ];
	    			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

	    		}

	    		return geometry;

	    	}

	    } );

	    /**************************************************************
	     *	Ellipse curve
	     **************************************************************/

	    function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

	    	this.aX = aX;
	    	this.aY = aY;

	    	this.xRadius = xRadius;
	    	this.yRadius = yRadius;

	    	this.aStartAngle = aStartAngle;
	    	this.aEndAngle = aEndAngle;

	    	this.aClockwise = aClockwise;

	    	this.aRotation = aRotation || 0;

	    }

	    EllipseCurve.prototype = Object.create( Curve.prototype );
	    EllipseCurve.prototype.constructor = EllipseCurve;

	    EllipseCurve.prototype.isEllipseCurve = true;

	    EllipseCurve.prototype.getPoint = function( t ) {

	    	var twoPi = Math.PI * 2;
	    	var deltaAngle = this.aEndAngle - this.aStartAngle;
	    	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

	    	// ensures that deltaAngle is 0 .. 2 PI
	    	while ( deltaAngle < 0 ) deltaAngle += twoPi;
	    	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

	    	if ( deltaAngle < Number.EPSILON ) {

	    		if ( samePoints ) {

	    			deltaAngle = 0;

	    		} else {

	    			deltaAngle = twoPi;

	    		}

	    	}

	    	if ( this.aClockwise === true && ! samePoints ) {

	    		if ( deltaAngle === twoPi ) {

	    			deltaAngle = - twoPi;

	    		} else {

	    			deltaAngle = deltaAngle - twoPi;

	    		}

	    	}

	    	var angle = this.aStartAngle + t * deltaAngle;
	    	var x = this.aX + this.xRadius * Math.cos( angle );
	    	var y = this.aY + this.yRadius * Math.sin( angle );

	    	if ( this.aRotation !== 0 ) {

	    		var cos = Math.cos( this.aRotation );
	    		var sin = Math.sin( this.aRotation );

	    		var tx = x - this.aX;
	    		var ty = y - this.aY;

	    		// Rotate the point about the center of the ellipse.
	    		x = tx * cos - ty * sin + this.aX;
	    		y = tx * sin + ty * cos + this.aY;

	    	}

	    	return new Vector2( x, y );

	    };

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     */

	    exports.CurveUtils = {

	    	tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

	    		return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

	    	},

	    	// Puay Bing, thanks for helping with this derivative!

	    	tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

	    		return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
	    			3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
	    			6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
	    			3 * t * t * p3;

	    	},

	    	tangentSpline: function ( t, p0, p1, p2, p3 ) {

	    		// To check if my formulas are correct

	    		var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
	    		var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
	    		var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
	    		var h11 = 3 * t * t - 2 * t;	// t3 − t2

	    		return h00 + h10 + h01 + h11;

	    	},

	    	// Catmull-Rom

	    	interpolate: function( p0, p1, p2, p3, t ) {

	    		var v0 = ( p2 - p0 ) * 0.5;
	    		var v1 = ( p3 - p1 ) * 0.5;
	    		var t2 = t * t;
	    		var t3 = t * t2;
	    		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	    	}

	    };

	    /**************************************************************
	     *	Spline curve
	     **************************************************************/

	    function SplineCurve( points /* array of Vector2 */ ) {

	    	this.points = ( points === undefined ) ? [] : points;

	    }

	    SplineCurve.prototype = Object.create( Curve.prototype );
	    SplineCurve.prototype.constructor = SplineCurve;

	    SplineCurve.prototype.isSplineCurve = true;

	    SplineCurve.prototype.getPoint = function ( t ) {

	    	var points = this.points;
	    	var point = ( points.length - 1 ) * t;

	    	var intPoint = Math.floor( point );
	    	var weight = point - intPoint;

	    	var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
	    	var point1 = points[ intPoint ];
	    	var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
	    	var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

	    	var interpolate = exports.CurveUtils.interpolate;

	    	return new Vector2(
	    		interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
	    		interpolate( point0.y, point1.y, point2.y, point3.y, weight )
	    	);

	    };

	    /**************************************************************
	     *	Cubic Bezier curve
	     **************************************************************/

	    function CubicBezierCurve( v0, v1, v2, v3 ) {

	    	this.v0 = v0;
	    	this.v1 = v1;
	    	this.v2 = v2;
	    	this.v3 = v3;

	    }

	    CubicBezierCurve.prototype = Object.create( Curve.prototype );
	    CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	    CubicBezierCurve.prototype.getPoint = function ( t ) {

	    	var b3 = exports.ShapeUtils.b3;

	    	return new Vector2(
	    		b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
	    		b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
	    	);

	    };

	    CubicBezierCurve.prototype.getTangent = function( t ) {

	    	var tangentCubicBezier = exports.CurveUtils.tangentCubicBezier;

	    	return new Vector2(
	    		tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
	    		tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
	    	).normalize();

	    };

	    /**************************************************************
	     *	Quadratic Bezier curve
	     **************************************************************/


	    function QuadraticBezierCurve( v0, v1, v2 ) {

	    	this.v0 = v0;
	    	this.v1 = v1;
	    	this.v2 = v2;

	    }

	    QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	    QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;


	    QuadraticBezierCurve.prototype.getPoint = function ( t ) {

	    	var b2 = exports.ShapeUtils.b2;

	    	return new Vector2(
	    		b2( t, this.v0.x, this.v1.x, this.v2.x ),
	    		b2( t, this.v0.y, this.v1.y, this.v2.y )
	    	);

	    };


	    QuadraticBezierCurve.prototype.getTangent = function( t ) {

	    	var tangentQuadraticBezier = exports.CurveUtils.tangentQuadraticBezier;

	    	return new Vector2(
	    		tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
	    		tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
	    	).normalize();

	    };

	    var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

	    	fromPoints: function ( vectors ) {

	    		this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

	    		for ( var i = 1, l = vectors.length; i < l; i ++ ) {

	    			this.lineTo( vectors[ i ].x, vectors[ i ].y );

	    		}

	    	},

	    	moveTo: function ( x, y ) {

	    		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

	    	},

	    	lineTo: function ( x, y ) {

	    		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
	    		this.curves.push( curve );

	    		this.currentPoint.set( x, y );

	    	},

	    	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

	    		var curve = new QuadraticBezierCurve(
	    			this.currentPoint.clone(),
	    			new Vector2( aCPx, aCPy ),
	    			new Vector2( aX, aY )
	    		);

	    		this.curves.push( curve );

	    		this.currentPoint.set( aX, aY );

	    	},

	    	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

	    		var curve = new CubicBezierCurve(
	    			this.currentPoint.clone(),
	    			new Vector2( aCP1x, aCP1y ),
	    			new Vector2( aCP2x, aCP2y ),
	    			new Vector2( aX, aY )
	    		);

	    		this.curves.push( curve );

	    		this.currentPoint.set( aX, aY );

	    	},

	    	splineThru: function ( pts /*Array of Vector*/ ) {

	    		var npts = [ this.currentPoint.clone() ].concat( pts );

	    		var curve = new SplineCurve( npts );
	    		this.curves.push( curve );

	    		this.currentPoint.copy( pts[ pts.length - 1 ] );

	    	},

	    	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	    		var x0 = this.currentPoint.x;
	    		var y0 = this.currentPoint.y;

	    		this.absarc( aX + x0, aY + y0, aRadius,
	    			aStartAngle, aEndAngle, aClockwise );

	    	},

	    	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	    		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	    	},

	    	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

	    		var x0 = this.currentPoint.x;
	    		var y0 = this.currentPoint.y;

	    		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	    	},

	    	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

	    		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	    		if ( this.curves.length > 0 ) {

	    			// if a previous curve is present, attempt to join
	    			var firstPoint = curve.getPoint( 0 );

	    			if ( ! firstPoint.equals( this.currentPoint ) ) {

	    				this.lineTo( firstPoint.x, firstPoint.y );

	    			}

	    		}

	    		this.curves.push( curve );

	    		var lastPoint = curve.getPoint( 1 );
	    		this.currentPoint.copy( lastPoint );

	    	}

	    } );

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     * Defines a 2d shape plane using paths.
	     **/

	    // STEP 1 Create a path.
	    // STEP 2 Turn path into shape.
	    // STEP 3 ExtrudeGeometry takes in Shape/Shapes
	    // STEP 3a - Extract points from each shape, turn to vertices
	    // STEP 3b - Triangulate each shape, add faces.

	    function Shape() {

	    	Path.apply( this, arguments );

	    	this.holes = [];

	    }

	    Shape.prototype = Object.assign( Object.create( PathPrototype ), {

	    	constructor: Shape,

	    	getPointsHoles: function ( divisions ) {

	    		var holesPts = [];

	    		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

	    			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

	    		}

	    		return holesPts;

	    	},

	    	// Get points of shape and holes (keypoints based on segments parameter)

	    	extractAllPoints: function ( divisions ) {

	    		return {

	    			shape: this.getPoints( divisions ),
	    			holes: this.getPointsHoles( divisions )

	    		};

	    	},

	    	extractPoints: function ( divisions ) {

	    		return this.extractAllPoints( divisions );

	    	}

	    } );

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     * Creates free form 2d path using series of points, lines or curves.
	     *
	     **/

	    function Path( points ) {

	    	CurvePath.call( this );
	    	this.currentPoint = new Vector2();

	    	if ( points ) {

	    		this.fromPoints( points );

	    	}

	    }

	    Path.prototype = PathPrototype;
	    PathPrototype.constructor = Path;


	    // minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	    function ShapePath() {
	    	this.subPaths = [];
	    	this.currentPath = null;
	    }

	    ShapePath.prototype = {
	    	moveTo: function ( x, y ) {
	    		this.currentPath = new Path();
	    		this.subPaths.push(this.currentPath);
	    		this.currentPath.moveTo( x, y );
	    	},
	    	lineTo: function ( x, y ) {
	    		this.currentPath.lineTo( x, y );
	    	},
	    	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
	    		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
	    	},
	    	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
	    		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
	    	},
	    	splineThru: function ( pts ) {
	    		this.currentPath.splineThru( pts );
	    	},

	    	toShapes: function ( isCCW, noHoles ) {

	    		function toShapesNoHoles( inSubpaths ) {

	    			var shapes = [];

	    			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

	    				var tmpPath = inSubpaths[ i ];

	    				var tmpShape = new Shape();
	    				tmpShape.curves = tmpPath.curves;

	    				shapes.push( tmpShape );

	    			}

	    			return shapes;

	    		}

	    		function isPointInsidePolygon( inPt, inPolygon ) {

	    			var polyLen = inPolygon.length;

	    			// inPt on polygon contour => immediate success    or
	    			// toggling of inside/outside at every single! intersection point of an edge
	    			//  with the horizontal line through inPt, left of inPt
	    			//  not counting lowerY endpoints of edges and whole edges on that line
	    			var inside = false;
	    			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

	    				var edgeLowPt  = inPolygon[ p ];
	    				var edgeHighPt = inPolygon[ q ];

	    				var edgeDx = edgeHighPt.x - edgeLowPt.x;
	    				var edgeDy = edgeHighPt.y - edgeLowPt.y;

	    				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

	    					// not parallel
	    					if ( edgeDy < 0 ) {

	    						edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
	    						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

	    					}
	    					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

	    					if ( inPt.y === edgeLowPt.y ) {

	    						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
	    						// continue;				// no intersection or edgeLowPt => doesn't count !!!

	    					} else {

	    						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
	    						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
	    						if ( perpEdge < 0 ) 				continue;
	    						inside = ! inside;		// true intersection left of inPt

	    					}

	    				} else {

	    					// parallel or collinear
	    					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
	    					// edge lies on the same horizontal line as inPt
	    					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
	    						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
	    					// continue;

	    				}

	    			}

	    			return	inside;

	    		}

	    		var isClockWise = exports.ShapeUtils.isClockWise;

	    		var subPaths = this.subPaths;
	    		if ( subPaths.length === 0 ) return [];

	    		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


	    		var solid, tmpPath, tmpShape, shapes = [];

	    		if ( subPaths.length === 1 ) {

	    			tmpPath = subPaths[ 0 ];
	    			tmpShape = new Shape();
	    			tmpShape.curves = tmpPath.curves;
	    			shapes.push( tmpShape );
	    			return shapes;

	    		}

	    		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
	    		holesFirst = isCCW ? ! holesFirst : holesFirst;

	    		// console.log("Holes first", holesFirst);

	    		var betterShapeHoles = [];
	    		var newShapes = [];
	    		var newShapeHoles = [];
	    		var mainIdx = 0;
	    		var tmpPoints;

	    		newShapes[ mainIdx ] = undefined;
	    		newShapeHoles[ mainIdx ] = [];

	    		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

	    			tmpPath = subPaths[ i ];
	    			tmpPoints = tmpPath.getPoints();
	    			solid = isClockWise( tmpPoints );
	    			solid = isCCW ? ! solid : solid;

	    			if ( solid ) {

	    				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

	    				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
	    				newShapes[ mainIdx ].s.curves = tmpPath.curves;

	    				if ( holesFirst )	mainIdx ++;
	    				newShapeHoles[ mainIdx ] = [];

	    				//console.log('cw', i);

	    			} else {

	    				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

	    				//console.log('ccw', i);

	    			}

	    		}

	    		// only Holes? -> probably all Shapes with wrong orientation
	    		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


	    		if ( newShapes.length > 1 ) {

	    			var ambiguous = false;
	    			var toChange = [];

	    			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

	    				betterShapeHoles[ sIdx ] = [];

	    			}

	    			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

	    				var sho = newShapeHoles[ sIdx ];

	    				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

	    					var ho = sho[ hIdx ];
	    					var hole_unassigned = true;

	    					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

	    						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

	    							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
	    							if ( hole_unassigned ) {

	    								hole_unassigned = false;
	    								betterShapeHoles[ s2Idx ].push( ho );

	    							} else {

	    								ambiguous = true;

	    							}

	    						}

	    					}
	    					if ( hole_unassigned ) {

	    						betterShapeHoles[ sIdx ].push( ho );

	    					}

	    				}

	    			}
	    			// console.log("ambiguous: ", ambiguous);
	    			if ( toChange.length > 0 ) {

	    				// console.log("to change: ", toChange);
	    				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

	    			}

	    		}

	    		var tmpHoles;

	    		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

	    			tmpShape = newShapes[ i ].s;
	    			shapes.push( tmpShape );
	    			tmpHoles = newShapeHoles[ i ];

	    			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

	    				tmpShape.holes.push( tmpHoles[ j ].h );

	    			}

	    		}

	    		//console.log("shape", shapes);

	    		return shapes;

	    	}
	    }

	    /**
	     * @author zz85 / http://www.lab4games.net/zz85/blog
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Font( data ) {

	    	this.data = data;

	    }

	    Object.assign( Font.prototype, {

	    	isFont: true,

	    	generateShapes: function ( text, size, divisions ) {

	    		function createPaths( text ) {

	    			var chars = String( text ).split( '' );
	    			var scale = size / data.resolution;
	    			var offset = 0;

	    			var paths = [];

	    			for ( var i = 0; i < chars.length; i ++ ) {

	    				var ret = createPath( chars[ i ], scale, offset );
	    				offset += ret.offset;

	    				paths.push( ret.path );

	    			}

	    			return paths;

	    		}

	    		function createPath( c, scale, offset ) {

	    			var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

	    			if ( ! glyph ) return;

	    			var path = new ShapePath();

	    			var pts = [], b2 = exports.ShapeUtils.b2, b3 = exports.ShapeUtils.b3;
	    			var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

	    			if ( glyph.o ) {

	    				var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

	    				for ( var i = 0, l = outline.length; i < l; ) {

	    					var action = outline[ i ++ ];

	    					switch ( action ) {

	    						case 'm': // moveTo

	    							x = outline[ i ++ ] * scale + offset;
	    							y = outline[ i ++ ] * scale;

	    							path.moveTo( x, y );

	    							break;

	    						case 'l': // lineTo

	    							x = outline[ i ++ ] * scale + offset;
	    							y = outline[ i ++ ] * scale;

	    							path.lineTo( x, y );

	    							break;

	    						case 'q': // quadraticCurveTo

	    							cpx  = outline[ i ++ ] * scale + offset;
	    							cpy  = outline[ i ++ ] * scale;
	    							cpx1 = outline[ i ++ ] * scale + offset;
	    							cpy1 = outline[ i ++ ] * scale;

	    							path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

	    							laste = pts[ pts.length - 1 ];

	    							if ( laste ) {

	    								cpx0 = laste.x;
	    								cpy0 = laste.y;

	    								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

	    									var t = i2 / divisions;
	    									b2( t, cpx0, cpx1, cpx );
	    									b2( t, cpy0, cpy1, cpy );

	    								}

	    							}

	    							break;

	    						case 'b': // bezierCurveTo

	    							cpx  = outline[ i ++ ] * scale + offset;
	    							cpy  = outline[ i ++ ] * scale;
	    							cpx1 = outline[ i ++ ] * scale + offset;
	    							cpy1 = outline[ i ++ ] * scale;
	    							cpx2 = outline[ i ++ ] * scale + offset;
	    							cpy2 = outline[ i ++ ] * scale;

	    							path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

	    							laste = pts[ pts.length - 1 ];

	    							if ( laste ) {

	    								cpx0 = laste.x;
	    								cpy0 = laste.y;

	    								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

	    									var t = i2 / divisions;
	    									b3( t, cpx0, cpx1, cpx2, cpx );
	    									b3( t, cpy0, cpy1, cpy2, cpy );

	    								}

	    							}

	    							break;

	    					}

	    				}

	    			}

	    			return { offset: glyph.ha * scale, path: path };

	    		}

	    		//

	    		if ( size === undefined ) size = 100;
	    		if ( divisions === undefined ) divisions = 4;

	    		var data = this.data;

	    		var paths = createPaths( text );
	    		var shapes = [];

	    		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

	    			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

	    		}

	    		return shapes;

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function FontLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    }

	    Object.assign( FontLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var scope = this;

	    		var loader = new XHRLoader( this.manager );
	    		loader.load( url, function ( text ) {

	    			var json;

	    			try {

	    				json = JSON.parse( text );

	    			} catch ( e ) {

	    				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
	    				json = JSON.parse( text.substring( 65, text.length - 2 ) );

	    			}

	    			var font = scope.parse( json );

	    			if ( onLoad ) onLoad( font );

	    		}, onProgress, onError );

	    	},

	    	parse: function ( json ) {

	    		return new Font( json );

	    	}

	    } );

	    var context;

	    function getAudioContext() {

	    	if ( context === undefined ) {

	    		context = new ( window.AudioContext || window.webkitAudioContext )();

	    	}

	    	return context;

	    }

	    /**
	     * @author Reece Aaron Lecrivain / http://reecenotes.com/
	     */

	    function AudioLoader( manager ) {

	    	this.manager = ( manager !== undefined ) ? manager : exports.DefaultLoadingManager;

	    }

	    Object.assign( AudioLoader.prototype, {

	    	load: function ( url, onLoad, onProgress, onError ) {

	    		var loader = new XHRLoader( this.manager );
	    		loader.setResponseType( 'arraybuffer' );
	    		loader.load( url, function ( buffer ) {

	    			var context = getAudioContext();

	    			context.decodeAudioData( buffer, function ( audioBuffer ) {

	    				onLoad( audioBuffer );

	    			} );

	    		}, onProgress, onError );

	    	}

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function StereoCamera() {

	    	this.type = 'StereoCamera';

	    	this.aspect = 1;

	    	this.eyeSep = 0.064;

	    	this.cameraL = new PerspectiveCamera();
	    	this.cameraL.layers.enable( 1 );
	    	this.cameraL.matrixAutoUpdate = false;

	    	this.cameraR = new PerspectiveCamera();
	    	this.cameraR.layers.enable( 2 );
	    	this.cameraR.matrixAutoUpdate = false;

	    }

	    Object.assign( StereoCamera.prototype, {

	    	update: ( function () {

	    		var instance, focus, fov, aspect, near, far, zoom;

	    		var eyeRight = new Matrix4();
	    		var eyeLeft = new Matrix4();

	    		return function update( camera ) {

	    			var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
	    												aspect !== camera.aspect * this.aspect || near !== camera.near ||
	    												far !== camera.far || zoom !== camera.zoom;

	    			if ( needsUpdate ) {

	    				instance = this;
	    				focus = camera.focus;
	    				fov = camera.fov;
	    				aspect = camera.aspect * this.aspect;
	    				near = camera.near;
	    				far = camera.far;
	    				zoom = camera.zoom;

	    				// Off-axis stereoscopic effect based on
	    				// http://paulbourke.net/stereographics/stereorender/

	    				var projectionMatrix = camera.projectionMatrix.clone();
	    				var eyeSep = this.eyeSep / 2;
	    				var eyeSepOnProjection = eyeSep * near / focus;
	    				var ymax = ( near * Math.tan( exports.Math.DEG2RAD * fov * 0.5 ) ) / zoom;
	    				var xmin, xmax;

	    				// translate xOffset

	    				eyeLeft.elements[ 12 ] = - eyeSep;
	    				eyeRight.elements[ 12 ] = eyeSep;

	    				// for left eye

	    				xmin = - ymax * aspect + eyeSepOnProjection;
	    				xmax = ymax * aspect + eyeSepOnProjection;

	    				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
	    				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

	    				this.cameraL.projectionMatrix.copy( projectionMatrix );

	    				// for right eye

	    				xmin = - ymax * aspect - eyeSepOnProjection;
	    				xmax = ymax * aspect - eyeSepOnProjection;

	    				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
	    				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

	    				this.cameraR.projectionMatrix.copy( projectionMatrix );

	    			}

	    			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
	    			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

	    		};

	    	} )()

	    } );

	    /**
	     * Camera for rendering cube maps
	     *	- renders scene into axis-aligned cube
	     *
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function CubeCamera( near, far, cubeResolution ) {

	    	Object3D.call( this );

	    	this.type = 'CubeCamera';

	    	var fov = 90, aspect = 1;

	    	var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
	    	cameraPX.up.set( 0, - 1, 0 );
	    	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
	    	this.add( cameraPX );

	    	var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
	    	cameraNX.up.set( 0, - 1, 0 );
	    	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
	    	this.add( cameraNX );

	    	var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
	    	cameraPY.up.set( 0, 0, 1 );
	    	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
	    	this.add( cameraPY );

	    	var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
	    	cameraNY.up.set( 0, 0, - 1 );
	    	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
	    	this.add( cameraNY );

	    	var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
	    	cameraPZ.up.set( 0, - 1, 0 );
	    	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
	    	this.add( cameraPZ );

	    	var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
	    	cameraNZ.up.set( 0, - 1, 0 );
	    	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
	    	this.add( cameraNZ );

	    	var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

	    	this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );

	    	this.updateCubeMap = function ( renderer, scene ) {

	    		if ( this.parent === null ) this.updateMatrixWorld();

	    		var renderTarget = this.renderTarget;
	    		var generateMipmaps = renderTarget.texture.generateMipmaps;

	    		renderTarget.texture.generateMipmaps = false;

	    		renderTarget.activeCubeFace = 0;
	    		renderer.render( scene, cameraPX, renderTarget );

	    		renderTarget.activeCubeFace = 1;
	    		renderer.render( scene, cameraNX, renderTarget );

	    		renderTarget.activeCubeFace = 2;
	    		renderer.render( scene, cameraPY, renderTarget );

	    		renderTarget.activeCubeFace = 3;
	    		renderer.render( scene, cameraNY, renderTarget );

	    		renderTarget.activeCubeFace = 4;
	    		renderer.render( scene, cameraPZ, renderTarget );

	    		renderTarget.texture.generateMipmaps = generateMipmaps;

	    		renderTarget.activeCubeFace = 5;
	    		renderer.render( scene, cameraNZ, renderTarget );

	    		renderer.setRenderTarget( null );

	    	};

	    }

	    CubeCamera.prototype = Object.create( Object3D.prototype );
	    CubeCamera.prototype.constructor = CubeCamera;

	    function AudioListener() {

	    	Object3D.call( this );

	    	this.type = 'AudioListener';

	    	this.context = getAudioContext();

	    	this.gain = this.context.createGain();
	    	this.gain.connect( this.context.destination );

	    	this.filter = null;

	    }

	    AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: AudioListener,

	    	getInput: function () {

	    		return this.gain;

	    	},

	    	removeFilter: function ( ) {

	    		if ( this.filter !== null ) {

	    			this.gain.disconnect( this.filter );
	    			this.filter.disconnect( this.context.destination );
	    			this.gain.connect( this.context.destination );
	    			this.filter = null;

	    		}

	    	},

	    	getFilter: function () {

	    		return this.filter;

	    	},

	    	setFilter: function ( value ) {

	    		if ( this.filter !== null ) {

	    			this.gain.disconnect( this.filter );
	    			this.filter.disconnect( this.context.destination );

	    		} else {

	    			this.gain.disconnect( this.context.destination );

	    		}

	    		this.filter = value;
	    		this.gain.connect( this.filter );
	    		this.filter.connect( this.context.destination );

	    	},

	    	getMasterVolume: function () {

	    		return this.gain.gain.value;

	    	},

	    	setMasterVolume: function ( value ) {

	    		this.gain.gain.value = value;

	    	},

	    	updateMatrixWorld: ( function () {

	    		var position = new Vector3();
	    		var quaternion = new Quaternion();
	    		var scale = new Vector3();

	    		var orientation = new Vector3();

	    		return function updateMatrixWorld( force ) {

	    			Object3D.prototype.updateMatrixWorld.call( this, force );

	    			var listener = this.context.listener;
	    			var up = this.up;

	    			this.matrixWorld.decompose( position, quaternion, scale );

	    			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

	    			listener.setPosition( position.x, position.y, position.z );
	    			listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

	    		};

	    	} )()

	    } );

	    function Audio( listener ) {

	    	Object3D.call( this );

	    	this.type = 'Audio';

	    	this.context = listener.context;
	    	this.source = this.context.createBufferSource();
	    	this.source.onended = this.onEnded.bind( this );

	    	this.gain = this.context.createGain();
	    	this.gain.connect( listener.getInput() );

	    	this.autoplay = false;

	    	this.startTime = 0;
	    	this.playbackRate = 1;
	    	this.isPlaying = false;
	    	this.hasPlaybackControl = true;
	    	this.sourceType = 'empty';

	    	this.filters = [];

	    }

	    Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

	    	constructor: Audio,

	    	getOutput: function () {

	    		return this.gain;

	    	},

	    	setNodeSource: function ( audioNode ) {

	    		this.hasPlaybackControl = false;
	    		this.sourceType = 'audioNode';
	    		this.source = audioNode;
	    		this.connect();

	    		return this;

	    	},

	    	setBuffer: function ( audioBuffer ) {

	    		this.source.buffer = audioBuffer;
	    		this.sourceType = 'buffer';

	    		if ( this.autoplay ) this.play();

	    		return this;

	    	},

	    	play: function () {

	    		if ( this.isPlaying === true ) {

	    			console.warn( 'THREE.Audio: Audio is already playing.' );
	    			return;

	    		}

	    		if ( this.hasPlaybackControl === false ) {

	    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
	    			return;

	    		}

	    		var source = this.context.createBufferSource();

	    		source.buffer = this.source.buffer;
	    		source.loop = this.source.loop;
	    		source.onended = this.source.onended;
	    		source.start( 0, this.startTime );
	    		source.playbackRate.value = this.playbackRate;

	    		this.isPlaying = true;

	    		this.source = source;

	    		return this.connect();

	    	},

	    	pause: function () {

	    		if ( this.hasPlaybackControl === false ) {

	    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
	    			return;

	    		}

	    		this.source.stop();
	    		this.startTime = this.context.currentTime;
	    		this.isPlaying = false;

	    		return this;

	    	},

	    	stop: function () {

	    		if ( this.hasPlaybackControl === false ) {

	    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
	    			return;

	    		}

	    		this.source.stop();
	    		this.startTime = 0;
	    		this.isPlaying = false;

	    		return this;

	    	},

	    	connect: function () {

	    		if ( this.filters.length > 0 ) {

	    			this.source.connect( this.filters[ 0 ] );

	    			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

	    				this.filters[ i - 1 ].connect( this.filters[ i ] );

	    			}

	    			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

	    		} else {

	    			this.source.connect( this.getOutput() );

	    		}

	    		return this;

	    	},

	    	disconnect: function () {

	    		if ( this.filters.length > 0 ) {

	    			this.source.disconnect( this.filters[ 0 ] );

	    			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

	    				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

	    			}

	    			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

	    		} else {

	    			this.source.disconnect( this.getOutput() );

	    		}

	    		return this;

	    	},

	    	getFilters: function () {

	    		return this.filters;

	    	},

	    	setFilters: function ( value ) {

	    		if ( ! value ) value = [];

	    		if ( this.isPlaying === true ) {

	    			this.disconnect();
	    			this.filters = value;
	    			this.connect();

	    		} else {

	    			this.filters = value;

	    		}

	    		return this;

	    	},

	    	getFilter: function () {

	    		return this.getFilters()[ 0 ];

	    	},

	    	setFilter: function ( filter ) {

	    		return this.setFilters( filter ? [ filter ] : [] );

	    	},

	    	setPlaybackRate: function ( value ) {

	    		if ( this.hasPlaybackControl === false ) {

	    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
	    			return;

	    		}

	    		this.playbackRate = value;

	    		if ( this.isPlaying === true ) {

	    			this.source.playbackRate.value = this.playbackRate;

	    		}

	    		return this;

	    	},

	    	getPlaybackRate: function () {

	    		return this.playbackRate;

	    	},

	    	onEnded: function () {

	    		this.isPlaying = false;

	    	},

	    	getLoop: function () {

	    		if ( this.hasPlaybackControl === false ) {

	    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
	    			return false;

	    		}

	    		return this.source.loop;

	    	},

	    	setLoop: function ( value ) {

	    		if ( this.hasPlaybackControl === false ) {

	    			console.warn( 'THREE.Audio: this Audio has no playback control.' );
	    			return;

	    		}

	    		this.source.loop = value;

	    	},

	    	getVolume: function () {

	    		return this.gain.gain.value;

	    	},


	    	setVolume: function ( value ) {

	    		this.gain.gain.value = value;

	    		return this;

	    	}

	    } );

	    function PositionalAudio( listener ) {

	    	Audio.call( this, listener );

	    	this.panner = this.context.createPanner();
	    	this.panner.connect( this.gain );

	    }

	    PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

	    	constructor: PositionalAudio,

	    	getOutput: function () {

	    		return this.panner;

	    	},

	    	getRefDistance: function () {

	    		return this.panner.refDistance;

	    	},

	    	setRefDistance: function ( value ) {

	    		this.panner.refDistance = value;

	    	},

	    	getRolloffFactor: function () {

	    		return this.panner.rolloffFactor;

	    	},

	    	setRolloffFactor: function ( value ) {

	    		this.panner.rolloffFactor = value;

	    	},

	    	getDistanceModel: function () {

	    		return this.panner.distanceModel;

	    	},

	    	setDistanceModel: function ( value ) {

	    		this.panner.distanceModel = value;

	    	},

	    	getMaxDistance: function () {

	    		return this.panner.maxDistance;

	    	},

	    	setMaxDistance: function ( value ) {

	    		this.panner.maxDistance = value;

	    	},

	    	updateMatrixWorld: ( function () {

	    		var position = new Vector3();

	    		return function updateMatrixWorld( force ) {

	    			Object3D.prototype.updateMatrixWorld.call( this, force );

	    			position.setFromMatrixPosition( this.matrixWorld );

	    			this.panner.setPosition( position.x, position.y, position.z );

	    		};

	    	} )()


	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function AudioAnalyser( audio, fftSize ) {

	    	this.analyser = audio.context.createAnalyser();
	    	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

	    	this.data = new Uint8Array( this.analyser.frequencyBinCount );

	    	audio.getOutput().connect( this.analyser );

	    }

	    Object.assign( AudioAnalyser.prototype, {

	    	getFrequencyData: function () {

	    		this.analyser.getByteFrequencyData( this.data );

	    		return this.data;

	    	},

	    	getAverageFrequency: function () {

	    		var value = 0, data = this.getFrequencyData();

	    		for ( var i = 0; i < data.length; i ++ ) {

	    			value += data[ i ];

	    		}

	    		return value / data.length;

	    	}

	    } );

	    /**
	     *
	     * Buffered scene graph property that allows weighted accumulation.
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function PropertyMixer( binding, typeName, valueSize ) {

	    	this.binding = binding;
	    	this.valueSize = valueSize;

	    	var bufferType = Float64Array,
	    		mixFunction;

	    	switch ( typeName ) {

	    		case 'quaternion':			mixFunction = this._slerp;		break;

	    		case 'string':
	    		case 'bool':

	    			bufferType = Array,		mixFunction = this._select;		break;

	    		default:					mixFunction = this._lerp;

	    	}

	    	this.buffer = new bufferType( valueSize * 4 );
	    	// layout: [ incoming | accu0 | accu1 | orig ]
	    	//
	    	// interpolators can use .buffer as their .result
	    	// the data then goes to 'incoming'
	    	//
	    	// 'accu0' and 'accu1' are used frame-interleaved for
	    	// the cumulative result and are compared to detect
	    	// changes
	    	//
	    	// 'orig' stores the original state of the property

	    	this._mixBufferRegion = mixFunction;

	    	this.cumulativeWeight = 0;

	    	this.useCount = 0;
	    	this.referenceCount = 0;

	    }

	    PropertyMixer.prototype = {

	    	constructor: PropertyMixer,

	    	// accumulate data in the 'incoming' region into 'accu<i>'
	    	accumulate: function( accuIndex, weight ) {

	    		// note: happily accumulating nothing when weight = 0, the caller knows
	    		// the weight and shouldn't have made the call in the first place

	    		var buffer = this.buffer,
	    			stride = this.valueSize,
	    			offset = accuIndex * stride + stride,

	    			currentWeight = this.cumulativeWeight;

	    		if ( currentWeight === 0 ) {

	    			// accuN := incoming * weight

	    			for ( var i = 0; i !== stride; ++ i ) {

	    				buffer[ offset + i ] = buffer[ i ];

	    			}

	    			currentWeight = weight;

	    		} else {

	    			// accuN := accuN + incoming * weight

	    			currentWeight += weight;
	    			var mix = weight / currentWeight;
	    			this._mixBufferRegion( buffer, offset, 0, mix, stride );

	    		}

	    		this.cumulativeWeight = currentWeight;

	    	},

	    	// apply the state of 'accu<i>' to the binding when accus differ
	    	apply: function( accuIndex ) {

	    		var stride = this.valueSize,
	    			buffer = this.buffer,
	    			offset = accuIndex * stride + stride,

	    			weight = this.cumulativeWeight,

	    			binding = this.binding;

	    		this.cumulativeWeight = 0;

	    		if ( weight < 1 ) {

	    			// accuN := accuN + original * ( 1 - cumulativeWeight )

	    			var originalValueOffset = stride * 3;

	    			this._mixBufferRegion(
	    					buffer, offset, originalValueOffset, 1 - weight, stride );

	    		}

	    		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

	    			if ( buffer[ i ] !== buffer[ i + stride ] ) {

	    				// value has changed -> update scene graph

	    				binding.setValue( buffer, offset );
	    				break;

	    			}

	    		}

	    	},

	    	// remember the state of the bound property and copy it to both accus
	    	saveOriginalState: function() {

	    		var binding = this.binding;

	    		var buffer = this.buffer,
	    			stride = this.valueSize,

	    			originalValueOffset = stride * 3;

	    		binding.getValue( buffer, originalValueOffset );

	    		// accu[0..1] := orig -- initially detect changes against the original
	    		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

	    			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

	    		}

	    		this.cumulativeWeight = 0;

	    	},

	    	// apply the state previously taken via 'saveOriginalState' to the binding
	    	restoreOriginalState: function() {

	    		var originalValueOffset = this.valueSize * 3;
	    		this.binding.setValue( this.buffer, originalValueOffset );

	    	},


	    	// mix functions

	    	_select: function( buffer, dstOffset, srcOffset, t, stride ) {

	    		if ( t >= 0.5 ) {

	    			for ( var i = 0; i !== stride; ++ i ) {

	    				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

	    			}

	    		}

	    	},

	    	_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

	    		Quaternion.slerpFlat( buffer, dstOffset,
	    				buffer, dstOffset, buffer, srcOffset, t );

	    	},

	    	_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

	    		var s = 1 - t;

	    		for ( var i = 0; i !== stride; ++ i ) {

	    			var j = dstOffset + i;

	    			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

	    		}

	    	}

	    };

	    /**
	     *
	     * A reference to a real property in the scene graph.
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function PropertyBinding( rootNode, path, parsedPath ) {

	    	this.path = path;
	    	this.parsedPath = parsedPath ||
	    			PropertyBinding.parseTrackName( path );

	    	this.node = PropertyBinding.findNode(
	    			rootNode, this.parsedPath.nodeName ) || rootNode;

	    	this.rootNode = rootNode;

	    }

	    PropertyBinding.prototype = {

	    	constructor: PropertyBinding,

	    	getValue: function getValue_unbound( targetArray, offset ) {

	    		this.bind();
	    		this.getValue( targetArray, offset );

	    		// Note: This class uses a State pattern on a per-method basis:
	    		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
	    		// prototype version of these methods with one that represents
	    		// the bound state. When the property is not found, the methods
	    		// become no-ops.

	    	},

	    	setValue: function getValue_unbound( sourceArray, offset ) {

	    		this.bind();
	    		this.setValue( sourceArray, offset );

	    	},

	    	// create getter / setter pair for a property in the scene graph
	    	bind: function() {

	    		var targetObject = this.node,
	    			parsedPath = this.parsedPath,

	    			objectName = parsedPath.objectName,
	    			propertyName = parsedPath.propertyName,
	    			propertyIndex = parsedPath.propertyIndex;

	    		if ( ! targetObject ) {

	    			targetObject = PropertyBinding.findNode(
	    					this.rootNode, parsedPath.nodeName ) || this.rootNode;

	    			this.node = targetObject;

	    		}

	    		// set fail state so we can just 'return' on error
	    		this.getValue = this._getValue_unavailable;
	    		this.setValue = this._setValue_unavailable;

	     		// ensure there is a value node
	    		if ( ! targetObject ) {

	    			console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
	    			return;

	    		}

	    		if ( objectName ) {

	    			var objectIndex = parsedPath.objectIndex;

	    			// special cases were we need to reach deeper into the hierarchy to get the face materials....
	    			switch ( objectName ) {

	    				case 'materials':

	    					if ( ! targetObject.material ) {

	    						console.error( '  can not bind to material as node does not have a material', this );
	    						return;

	    					}

	    					if ( ! targetObject.material.materials ) {

	    						console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
	    						return;

	    					}

	    					targetObject = targetObject.material.materials;

	    					break;

	    				case 'bones':

	    					if ( ! targetObject.skeleton ) {

	    						console.error( '  can not bind to bones as node does not have a skeleton', this );
	    						return;

	    					}

	    					// potential future optimization: skip this if propertyIndex is already an integer
	    					// and convert the integer string to a true integer.

	    					targetObject = targetObject.skeleton.bones;

	    					// support resolving morphTarget names into indices.
	    					for ( var i = 0; i < targetObject.length; i ++ ) {

	    						if ( targetObject[ i ].name === objectIndex ) {

	    							objectIndex = i;
	    							break;

	    						}

	    					}

	    					break;

	    				default:

	    					if ( targetObject[ objectName ] === undefined ) {

	    						console.error( '  can not bind to objectName of node, undefined', this );
	    						return;

	    					}

	    					targetObject = targetObject[ objectName ];

	    			}


	    			if ( objectIndex !== undefined ) {

	    				if ( targetObject[ objectIndex ] === undefined ) {

	    					console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
	    					return;

	    				}

	    				targetObject = targetObject[ objectIndex ];

	    			}

	    		}

	    		// resolve property
	    		var nodeProperty = targetObject[ propertyName ];

	    		if ( nodeProperty === undefined ) {

	    			var nodeName = parsedPath.nodeName;

	    			console.error( "  trying to update property for track: " + nodeName +
	    					'.' + propertyName + " but it wasn't found.", targetObject );
	    			return;

	    		}

	    		// determine versioning scheme
	    		var versioning = this.Versioning.None;

	    		if ( targetObject.needsUpdate !== undefined ) { // material

	    			versioning = this.Versioning.NeedsUpdate;
	    			this.targetObject = targetObject;

	    		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

	    			versioning = this.Versioning.MatrixWorldNeedsUpdate;
	    			this.targetObject = targetObject;

	    		}

	    		// determine how the property gets bound
	    		var bindingType = this.BindingType.Direct;

	    		if ( propertyIndex !== undefined ) {
	    			// access a sub element of the property array (only primitives are supported right now)

	    			if ( propertyName === "morphTargetInfluences" ) {
	    				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

	    				// support resolving morphTarget names into indices.
	    				if ( ! targetObject.geometry ) {

	    					console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
	    					return;

	    				}

	    				if ( ! targetObject.geometry.morphTargets ) {

	    					console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
	    					return;

	    				}

	    				for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

	    					if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

	    						propertyIndex = i;
	    						break;

	    					}

	    				}

	    			}

	    			bindingType = this.BindingType.ArrayElement;

	    			this.resolvedProperty = nodeProperty;
	    			this.propertyIndex = propertyIndex;

	    		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
	    			// must use copy for Object3D.Euler/Quaternion

	    			bindingType = this.BindingType.HasFromToArray;

	    			this.resolvedProperty = nodeProperty;

	    		} else if ( nodeProperty.length !== undefined ) {

	    			bindingType = this.BindingType.EntireArray;

	    			this.resolvedProperty = nodeProperty;

	    		} else {

	    			this.propertyName = propertyName;

	    		}

	    		// select getter / setter
	    		this.getValue = this.GetterByBindingType[ bindingType ];
	    		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

	    	},

	    	unbind: function() {

	    		this.node = null;

	    		// back to the prototype version of getValue / setValue
	    		// note: avoiding to mutate the shape of 'this' via 'delete'
	    		this.getValue = this._getValue_unbound;
	    		this.setValue = this._setValue_unbound;

	    	}

	    };

	    Object.assign( PropertyBinding.prototype, { // prototype, continued

	    	// these are used to "bind" a nonexistent property
	    	_getValue_unavailable: function() {},
	    	_setValue_unavailable: function() {},

	    	// initial state of these methods that calls 'bind'
	    	_getValue_unbound: PropertyBinding.prototype.getValue,
	    	_setValue_unbound: PropertyBinding.prototype.setValue,

	    	BindingType: {
	    		Direct: 0,
	    		EntireArray: 1,
	    		ArrayElement: 2,
	    		HasFromToArray: 3
	    	},

	    	Versioning: {
	    		None: 0,
	    		NeedsUpdate: 1,
	    		MatrixWorldNeedsUpdate: 2
	    	},

	    	GetterByBindingType: [

	    		function getValue_direct( buffer, offset ) {

	    			buffer[ offset ] = this.node[ this.propertyName ];

	    		},

	    		function getValue_array( buffer, offset ) {

	    			var source = this.resolvedProperty;

	    			for ( var i = 0, n = source.length; i !== n; ++ i ) {

	    				buffer[ offset ++ ] = source[ i ];

	    			}

	    		},

	    		function getValue_arrayElement( buffer, offset ) {

	    			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

	    		},

	    		function getValue_toArray( buffer, offset ) {

	    			this.resolvedProperty.toArray( buffer, offset );

	    		}

	    	],

	    	SetterByBindingTypeAndVersioning: [

	    		[
	    			// Direct

	    			function setValue_direct( buffer, offset ) {

	    				this.node[ this.propertyName ] = buffer[ offset ];

	    			},

	    			function setValue_direct_setNeedsUpdate( buffer, offset ) {

	    				this.node[ this.propertyName ] = buffer[ offset ];
	    				this.targetObject.needsUpdate = true;

	    			},

	    			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

	    				this.node[ this.propertyName ] = buffer[ offset ];
	    				this.targetObject.matrixWorldNeedsUpdate = true;

	    			}

	    		], [

	    			// EntireArray

	    			function setValue_array( buffer, offset ) {

	    				var dest = this.resolvedProperty;

	    				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

	    					dest[ i ] = buffer[ offset ++ ];

	    				}

	    			},

	    			function setValue_array_setNeedsUpdate( buffer, offset ) {

	    				var dest = this.resolvedProperty;

	    				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

	    					dest[ i ] = buffer[ offset ++ ];

	    				}

	    				this.targetObject.needsUpdate = true;

	    			},

	    			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

	    				var dest = this.resolvedProperty;

	    				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

	    					dest[ i ] = buffer[ offset ++ ];

	    				}

	    				this.targetObject.matrixWorldNeedsUpdate = true;

	    			}

	    		], [

	    			// ArrayElement

	    			function setValue_arrayElement( buffer, offset ) {

	    				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

	    			},

	    			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

	    				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
	    				this.targetObject.needsUpdate = true;

	    			},

	    			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

	    				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
	    				this.targetObject.matrixWorldNeedsUpdate = true;

	    			}

	    		], [

	    			// HasToFromArray

	    			function setValue_fromArray( buffer, offset ) {

	    				this.resolvedProperty.fromArray( buffer, offset );

	    			},

	    			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

	    				this.resolvedProperty.fromArray( buffer, offset );
	    				this.targetObject.needsUpdate = true;

	    			},

	    			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

	    				this.resolvedProperty.fromArray( buffer, offset );
	    				this.targetObject.matrixWorldNeedsUpdate = true;

	    			}

	    		]

	    	]

	    } );

	    PropertyBinding.Composite =
	    		function( targetGroup, path, optionalParsedPath ) {

	    	var parsedPath = optionalParsedPath ||
	    			PropertyBinding.parseTrackName( path );

	    	this._targetGroup = targetGroup;
	    	this._bindings = targetGroup.subscribe_( path, parsedPath );

	    };

	    PropertyBinding.Composite.prototype = {

	    	constructor: PropertyBinding.Composite,

	    	getValue: function( array, offset ) {

	    		this.bind(); // bind all binding

	    		var firstValidIndex = this._targetGroup.nCachedObjects_,
	    			binding = this._bindings[ firstValidIndex ];

	    		// and only call .getValue on the first
	    		if ( binding !== undefined ) binding.getValue( array, offset );

	    	},

	    	setValue: function( array, offset ) {

	    		var bindings = this._bindings;

	    		for ( var i = this._targetGroup.nCachedObjects_,
	    				n = bindings.length; i !== n; ++ i ) {

	    			bindings[ i ].setValue( array, offset );

	    		}

	    	},

	    	bind: function() {

	    		var bindings = this._bindings;

	    		for ( var i = this._targetGroup.nCachedObjects_,
	    				n = bindings.length; i !== n; ++ i ) {

	    			bindings[ i ].bind();

	    		}

	    	},

	    	unbind: function() {

	    		var bindings = this._bindings;

	    		for ( var i = this._targetGroup.nCachedObjects_,
	    				n = bindings.length; i !== n; ++ i ) {

	    			bindings[ i ].unbind();

	    		}

	    	}

	    };

	    PropertyBinding.create = function( root, path, parsedPath ) {

	    	if ( ! ( (root && root.isAnimationObjectGroup) ) ) {

	    		return new PropertyBinding( root, path, parsedPath );

	    	} else {

	    		return new PropertyBinding.Composite( root, path, parsedPath );

	    	}

	    };

	    PropertyBinding.parseTrackName = function( trackName ) {

	    	// matches strings in the form of:
	    	//    nodeName.property
	    	//    nodeName.property[accessor]
	    	//    nodeName.material.property[accessor]
	    	//    uuid.property[accessor]
	    	//    uuid.objectName[objectIndex].propertyName[propertyIndex]
	    	//    parentName/nodeName.property
	    	//    parentName/parentName/nodeName.property[index]
	    	//    .bone[Armature.DEF_cog].position
	    	//    scene:helium_balloon_model:helium_balloon_model.position
	    	// created and tested via https://regex101.com/#javascript

	    	var re = /^((?:\w+[\/:])*)(\w+)?(?:\.(\w+)(?:\[(.+)\])?)?\.(\w+)(?:\[(.+)\])?$/;
	    	var matches = re.exec( trackName );

	    	if ( ! matches ) {

	    		throw new Error( "cannot parse trackName at all: " + trackName );

	    	}

	    	var results = {
	    		// directoryName: matches[ 1 ], // (tschw) currently unused
	    		nodeName: matches[ 2 ], 	// allowed to be null, specified root node.
	    		objectName: matches[ 3 ],
	    		objectIndex: matches[ 4 ],
	    		propertyName: matches[ 5 ],
	    		propertyIndex: matches[ 6 ]	// allowed to be null, specifies that the whole property is set.
	    	};

	    	if ( results.propertyName === null || results.propertyName.length === 0 ) {

	    		throw new Error( "can not parse propertyName from trackName: " + trackName );

	    	}

	    	return results;

	    };

	    PropertyBinding.findNode = function( root, nodeName ) {

	    	if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

	    		return root;

	    	}

	    	// search into skeleton bones.
	    	if ( root.skeleton ) {

	    		var searchSkeleton = function( skeleton ) {

	    			for( var i = 0; i < skeleton.bones.length; i ++ ) {

	    				var bone = skeleton.bones[ i ];

	    				if ( bone.name === nodeName ) {

	    					return bone;

	    				}
	    			}

	    			return null;

	    		};

	    		var bone = searchSkeleton( root.skeleton );

	    		if ( bone ) {

	    			return bone;

	    		}
	    	}

	    	// search into node subtree.
	    	if ( root.children ) {

	    		var searchNodeSubtree = function( children ) {

	    			for( var i = 0; i < children.length; i ++ ) {

	    				var childNode = children[ i ];

	    				if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

	    					return childNode;

	    				}

	    				var result = searchNodeSubtree( childNode.children );

	    				if ( result ) return result;

	    			}

	    			return null;

	    		};

	    		var subTreeNode = searchNodeSubtree( root.children );

	    		if ( subTreeNode ) {

	    			return subTreeNode;

	    		}

	    	}

	    	return null;

	    };

	    /**
	     *
	     * A group of objects that receives a shared animation state.
	     *
	     * Usage:
	     *
	     * 	-	Add objects you would otherwise pass as 'root' to the
	     * 		constructor or the .clipAction method of AnimationMixer.
	     *
	     * 	-	Instead pass this object as 'root'.
	     *
	     * 	-	You can also add and remove objects later when the mixer
	     * 		is running.
	     *
	     * Note:
	     *
	     *  	Objects of this class appear as one object to the mixer,
	     *  	so cache control of the individual objects must be done
	     *  	on the group.
	     *
	     * Limitation:
	     *
	     * 	- 	The animated properties must be compatible among the
	     * 		all objects in the group.
	     *
	     *  -	A single property can either be controlled through a
	     *  	target group or directly, but not both.
	     *
	     * @author tschw
	     */

	    function AnimationObjectGroup( var_args ) {

	    	this.uuid = exports.Math.generateUUID();

	    	// cached objects followed by the active ones
	    	this._objects = Array.prototype.slice.call( arguments );

	    	this.nCachedObjects_ = 0;			// threshold
	    	// note: read by PropertyBinding.Composite

	    	var indices = {};
	    	this._indicesByUUID = indices;		// for bookkeeping

	    	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

	    		indices[ arguments[ i ].uuid ] = i;

	    	}

	    	this._paths = [];					// inside: string
	    	this._parsedPaths = [];				// inside: { we don't care, here }
	    	this._bindings = []; 				// inside: Array< PropertyBinding >
	    	this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

	    	var scope = this;

	    	this.stats = {

	    		objects: {
	    			get total() { return scope._objects.length; },
	    			get inUse() { return this.total - scope.nCachedObjects_;  }
	    		},

	    		get bindingsPerObject() { return scope._bindings.length; }

	    	};

	    }

	    AnimationObjectGroup.prototype = {

	    	constructor: AnimationObjectGroup,

	    	isAnimationObjectGroup: true,

	    	add: function( var_args ) {

	    		var objects = this._objects,
	    			nObjects = objects.length,
	    			nCachedObjects = this.nCachedObjects_,
	    			indicesByUUID = this._indicesByUUID,
	    			paths = this._paths,
	    			parsedPaths = this._parsedPaths,
	    			bindings = this._bindings,
	    			nBindings = bindings.length;

	    		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

	    			var object = arguments[ i ],
	    				uuid = object.uuid,
	    				index = indicesByUUID[ uuid ];

	    			if ( index === undefined ) {

	    				// unknown object -> add it to the ACTIVE region

	    				index = nObjects ++;
	    				indicesByUUID[ uuid ] = index;
	    				objects.push( object );

	    				// accounting is done, now do the same for all bindings

	    				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

	    					bindings[ j ].push(
	    							new PropertyBinding(
	    								object, paths[ j ], parsedPaths[ j ] ) );

	    				}

	    			} else if ( index < nCachedObjects ) {

	    				var knownObject = objects[ index ];

	    				// move existing object to the ACTIVE region

	    				var firstActiveIndex = -- nCachedObjects,
	    					lastCachedObject = objects[ firstActiveIndex ];

	    				indicesByUUID[ lastCachedObject.uuid ] = index;
	    				objects[ index ] = lastCachedObject;

	    				indicesByUUID[ uuid ] = firstActiveIndex;
	    				objects[ firstActiveIndex ] = object;

	    				// accounting is done, now do the same for all bindings

	    				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

	    					var bindingsForPath = bindings[ j ],
	    						lastCached = bindingsForPath[ firstActiveIndex ],
	    						binding = bindingsForPath[ index ];

	    					bindingsForPath[ index ] = lastCached;

	    					if ( binding === undefined ) {

	    						// since we do not bother to create new bindings
	    						// for objects that are cached, the binding may
	    						// or may not exist

	    						binding = new PropertyBinding(
	    								object, paths[ j ], parsedPaths[ j ] );

	    					}

	    					bindingsForPath[ firstActiveIndex ] = binding;

	    				}

	    			} else if ( objects[ index ] !== knownObject) {

	    				console.error( "Different objects with the same UUID " +
	    						"detected. Clean the caches or recreate your " +
	    						"infrastructure when reloading scenes..." );

	    			} // else the object is already where we want it to be

	    		} // for arguments

	    		this.nCachedObjects_ = nCachedObjects;

	    	},

	    	remove: function( var_args ) {

	    		var objects = this._objects,
	    			nCachedObjects = this.nCachedObjects_,
	    			indicesByUUID = this._indicesByUUID,
	    			bindings = this._bindings,
	    			nBindings = bindings.length;

	    		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

	    			var object = arguments[ i ],
	    				uuid = object.uuid,
	    				index = indicesByUUID[ uuid ];

	    			if ( index !== undefined && index >= nCachedObjects ) {

	    				// move existing object into the CACHED region

	    				var lastCachedIndex = nCachedObjects ++,
	    					firstActiveObject = objects[ lastCachedIndex ];

	    				indicesByUUID[ firstActiveObject.uuid ] = index;
	    				objects[ index ] = firstActiveObject;

	    				indicesByUUID[ uuid ] = lastCachedIndex;
	    				objects[ lastCachedIndex ] = object;

	    				// accounting is done, now do the same for all bindings

	    				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

	    					var bindingsForPath = bindings[ j ],
	    						firstActive = bindingsForPath[ lastCachedIndex ],
	    						binding = bindingsForPath[ index ];

	    					bindingsForPath[ index ] = firstActive;
	    					bindingsForPath[ lastCachedIndex ] = binding;

	    				}

	    			}

	    		} // for arguments

	    		this.nCachedObjects_ = nCachedObjects;

	    	},

	    	// remove & forget
	    	uncache: function( var_args ) {

	    		var objects = this._objects,
	    			nObjects = objects.length,
	    			nCachedObjects = this.nCachedObjects_,
	    			indicesByUUID = this._indicesByUUID,
	    			bindings = this._bindings,
	    			nBindings = bindings.length;

	    		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

	    			var object = arguments[ i ],
	    				uuid = object.uuid,
	    				index = indicesByUUID[ uuid ];

	    			if ( index !== undefined ) {

	    				delete indicesByUUID[ uuid ];

	    				if ( index < nCachedObjects ) {

	    					// object is cached, shrink the CACHED region

	    					var firstActiveIndex = -- nCachedObjects,
	    						lastCachedObject = objects[ firstActiveIndex ],
	    						lastIndex = -- nObjects,
	    						lastObject = objects[ lastIndex ];

	    					// last cached object takes this object's place
	    					indicesByUUID[ lastCachedObject.uuid ] = index;
	    					objects[ index ] = lastCachedObject;

	    					// last object goes to the activated slot and pop
	    					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
	    					objects[ firstActiveIndex ] = lastObject;
	    					objects.pop();

	    					// accounting is done, now do the same for all bindings

	    					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

	    						var bindingsForPath = bindings[ j ],
	    							lastCached = bindingsForPath[ firstActiveIndex ],
	    							last = bindingsForPath[ lastIndex ];

	    						bindingsForPath[ index ] = lastCached;
	    						bindingsForPath[ firstActiveIndex ] = last;
	    						bindingsForPath.pop();

	    					}

	    				} else {

	    					// object is active, just swap with the last and pop

	    					var lastIndex = -- nObjects,
	    						lastObject = objects[ lastIndex ];

	    					indicesByUUID[ lastObject.uuid ] = index;
	    					objects[ index ] = lastObject;
	    					objects.pop();

	    					// accounting is done, now do the same for all bindings

	    					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

	    						var bindingsForPath = bindings[ j ];

	    						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
	    						bindingsForPath.pop();

	    					}

	    				} // cached or active

	    			} // if object is known

	    		} // for arguments

	    		this.nCachedObjects_ = nCachedObjects;

	    	},

	    	// Internal interface used by befriended PropertyBinding.Composite:

	    	subscribe_: function( path, parsedPath ) {
	    		// returns an array of bindings for the given path that is changed
	    		// according to the contained objects in the group

	    		var indicesByPath = this._bindingsIndicesByPath,
	    			index = indicesByPath[ path ],
	    			bindings = this._bindings;

	    		if ( index !== undefined ) return bindings[ index ];

	    		var paths = this._paths,
	    			parsedPaths = this._parsedPaths,
	    			objects = this._objects,
	    			nObjects = objects.length,
	    			nCachedObjects = this.nCachedObjects_,
	    			bindingsForPath = new Array( nObjects );

	    		index = bindings.length;

	    		indicesByPath[ path ] = index;

	    		paths.push( path );
	    		parsedPaths.push( parsedPath );
	    		bindings.push( bindingsForPath );

	    		for ( var i = nCachedObjects,
	    				n = objects.length; i !== n; ++ i ) {

	    			var object = objects[ i ];

	    			bindingsForPath[ i ] =
	    					new PropertyBinding( object, path, parsedPath );

	    		}

	    		return bindingsForPath;

	    	},

	    	unsubscribe_: function( path ) {
	    		// tells the group to forget about a property path and no longer
	    		// update the array previously obtained with 'subscribe_'

	    		var indicesByPath = this._bindingsIndicesByPath,
	    			index = indicesByPath[ path ];

	    		if ( index !== undefined ) {

	    			var paths = this._paths,
	    				parsedPaths = this._parsedPaths,
	    				bindings = this._bindings,
	    				lastBindingsIndex = bindings.length - 1,
	    				lastBindings = bindings[ lastBindingsIndex ],
	    				lastBindingsPath = path[ lastBindingsIndex ];

	    			indicesByPath[ lastBindingsPath ] = index;

	    			bindings[ index ] = lastBindings;
	    			bindings.pop();

	    			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
	    			parsedPaths.pop();

	    			paths[ index ] = paths[ lastBindingsIndex ];
	    			paths.pop();

	    		}

	    	}

	    };

	    /**
	     *
	     * Action provided by AnimationMixer for scheduling clip playback on specific
	     * objects.
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     *
	     */

	    function AnimationAction( mixer, clip, localRoot ) {

	    	this._mixer = mixer;
	    	this._clip = clip;
	    	this._localRoot = localRoot || null;

	    	var tracks = clip.tracks,
	    		nTracks = tracks.length,
	    		interpolants = new Array( nTracks );

	    	var interpolantSettings = {
	    			endingStart: 	ZeroCurvatureEnding,
	    			endingEnd:		ZeroCurvatureEnding
	    	};

	    	for ( var i = 0; i !== nTracks; ++ i ) {

	    		var interpolant = tracks[ i ].createInterpolant( null );
	    		interpolants[ i ] = interpolant;
	    		interpolant.settings = interpolantSettings;

	    	}

	    	this._interpolantSettings = interpolantSettings;

	    	this._interpolants = interpolants;	// bound by the mixer

	    	// inside: PropertyMixer (managed by the mixer)
	    	this._propertyBindings = new Array( nTracks );

	    	this._cacheIndex = null;			// for the memory manager
	    	this._byClipCacheIndex = null;		// for the memory manager

	    	this._timeScaleInterpolant = null;
	    	this._weightInterpolant = null;

	    	this.loop = LoopRepeat;
	    	this._loopCount = -1;

	    	// global mixer time when the action is to be started
	    	// it's set back to 'null' upon start of the action
	    	this._startTime = null;

	    	// scaled local time of the action
	    	// gets clamped or wrapped to 0..clip.duration according to loop
	    	this.time = 0;

	    	this.timeScale = 1;
	    	this._effectiveTimeScale = 1;

	    	this.weight = 1;
	    	this._effectiveWeight = 1;

	    	this.repetitions = Infinity; 		// no. of repetitions when looping

	    	this.paused = false;				// false -> zero effective time scale
	    	this.enabled = true;				// true -> zero effective weight

	    	this.clampWhenFinished 	= false;	// keep feeding the last frame?

	    	this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
	    	this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	    };

	    AnimationAction.prototype = {

	    	constructor: AnimationAction,

	    	// State & Scheduling

	    	play: function() {

	    		this._mixer._activateAction( this );

	    		return this;

	    	},

	    	stop: function() {

	    		this._mixer._deactivateAction( this );

	    		return this.reset();

	    	},

	    	reset: function() {

	    		this.paused = false;
	    		this.enabled = true;

	    		this.time = 0;			// restart clip
	    		this._loopCount = -1;	// forget previous loops
	    		this._startTime = null;	// forget scheduling

	    		return this.stopFading().stopWarping();

	    	},

	    	isRunning: function() {

	    		return this.enabled && ! this.paused && this.timeScale !== 0 &&
	    				this._startTime === null && this._mixer._isActiveAction( this );

	    	},

	    	// return true when play has been called
	    	isScheduled: function() {

	    		return this._mixer._isActiveAction( this );

	    	},

	    	startAt: function( time ) {

	    		this._startTime = time;

	    		return this;

	    	},

	    	setLoop: function( mode, repetitions ) {

	    		this.loop = mode;
	    		this.repetitions = repetitions;

	    		return this;

	    	},

	    	// Weight

	    	// set the weight stopping any scheduled fading
	    	// although .enabled = false yields an effective weight of zero, this
	    	// method does *not* change .enabled, because it would be confusing
	    	setEffectiveWeight: function( weight ) {

	    		this.weight = weight;

	    		// note: same logic as when updated at runtime
	    		this._effectiveWeight = this.enabled ? weight : 0;

	    		return this.stopFading();

	    	},

	    	// return the weight considering fading and .enabled
	    	getEffectiveWeight: function() {

	    		return this._effectiveWeight;

	    	},

	    	fadeIn: function( duration ) {

	    		return this._scheduleFading( duration, 0, 1 );

	    	},

	    	fadeOut: function( duration ) {

	    		return this._scheduleFading( duration, 1, 0 );

	    	},

	    	crossFadeFrom: function( fadeOutAction, duration, warp ) {

	    		fadeOutAction.fadeOut( duration );
	    		this.fadeIn( duration );

	    		if( warp ) {

	    			var fadeInDuration = this._clip.duration,
	    				fadeOutDuration = fadeOutAction._clip.duration,

	    				startEndRatio = fadeOutDuration / fadeInDuration,
	    				endStartRatio = fadeInDuration / fadeOutDuration;

	    			fadeOutAction.warp( 1.0, startEndRatio, duration );
	    			this.warp( endStartRatio, 1.0, duration );

	    		}

	    		return this;

	    	},

	    	crossFadeTo: function( fadeInAction, duration, warp ) {

	    		return fadeInAction.crossFadeFrom( this, duration, warp );

	    	},

	    	stopFading: function() {

	    		var weightInterpolant = this._weightInterpolant;

	    		if ( weightInterpolant !== null ) {

	    			this._weightInterpolant = null;
	    			this._mixer._takeBackControlInterpolant( weightInterpolant );

	    		}

	    		return this;

	    	},

	    	// Time Scale Control

	    	// set the weight stopping any scheduled warping
	    	// although .paused = true yields an effective time scale of zero, this
	    	// method does *not* change .paused, because it would be confusing
	    	setEffectiveTimeScale: function( timeScale ) {

	    		this.timeScale = timeScale;
	    		this._effectiveTimeScale = this.paused ? 0 :timeScale;

	    		return this.stopWarping();

	    	},

	    	// return the time scale considering warping and .paused
	    	getEffectiveTimeScale: function() {

	    		return this._effectiveTimeScale;

	    	},

	    	setDuration: function( duration ) {

	    		this.timeScale = this._clip.duration / duration;

	    		return this.stopWarping();

	    	},

	    	syncWith: function( action ) {

	    		this.time = action.time;
	    		this.timeScale = action.timeScale;

	    		return this.stopWarping();

	    	},

	    	halt: function( duration ) {

	    		return this.warp( this._effectiveTimeScale, 0, duration );

	    	},

	    	warp: function( startTimeScale, endTimeScale, duration ) {

	    		var mixer = this._mixer, now = mixer.time,
	    			interpolant = this._timeScaleInterpolant,

	    			timeScale = this.timeScale;

	    		if ( interpolant === null ) {

	    			interpolant = mixer._lendControlInterpolant(),
	    			this._timeScaleInterpolant = interpolant;

	    		}

	    		var times = interpolant.parameterPositions,
	    			values = interpolant.sampleValues;

	    		times[ 0 ] = now;
	    		times[ 1 ] = now + duration;

	    		values[ 0 ] = startTimeScale / timeScale;
	    		values[ 1 ] = endTimeScale / timeScale;

	    		return this;

	    	},

	    	stopWarping: function() {

	    		var timeScaleInterpolant = this._timeScaleInterpolant;

	    		if ( timeScaleInterpolant !== null ) {

	    			this._timeScaleInterpolant = null;
	    			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

	    		}

	    		return this;

	    	},

	    	// Object Accessors

	    	getMixer: function() {

	    		return this._mixer;

	    	},

	    	getClip: function() {

	    		return this._clip;

	    	},

	    	getRoot: function() {

	    		return this._localRoot || this._mixer._root;

	    	},

	    	// Interna

	    	_update: function( time, deltaTime, timeDirection, accuIndex ) {
	    		// called by the mixer

	    		var startTime = this._startTime;

	    		if ( startTime !== null ) {

	    			// check for scheduled start of action

	    			var timeRunning = ( time - startTime ) * timeDirection;
	    			if ( timeRunning < 0 || timeDirection === 0 ) {

	    				return; // yet to come / don't decide when delta = 0

	    			}

	    			// start

	    			this._startTime = null; // unschedule
	    			deltaTime = timeDirection * timeRunning;

	    		}

	    		// apply time scale and advance time

	    		deltaTime *= this._updateTimeScale( time );
	    		var clipTime = this._updateTime( deltaTime );

	    		// note: _updateTime may disable the action resulting in
	    		// an effective weight of 0

	    		var weight = this._updateWeight( time );

	    		if ( weight > 0 ) {

	    			var interpolants = this._interpolants;
	    			var propertyMixers = this._propertyBindings;

	    			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

	    				interpolants[ j ].evaluate( clipTime );
	    				propertyMixers[ j ].accumulate( accuIndex, weight );

	    			}

	    		}

	    	},

	    	_updateWeight: function( time ) {

	    		var weight = 0;

	    		if ( this.enabled ) {

	    			weight = this.weight;
	    			var interpolant = this._weightInterpolant;

	    			if ( interpolant !== null ) {

	    				var interpolantValue = interpolant.evaluate( time )[ 0 ];

	    				weight *= interpolantValue;

	    				if ( time > interpolant.parameterPositions[ 1 ] ) {

	    					this.stopFading();

	    					if ( interpolantValue === 0 ) {

	    						// faded out, disable
	    						this.enabled = false;

	    					}

	    				}

	    			}

	    		}

	    		this._effectiveWeight = weight;
	    		return weight;

	    	},

	    	_updateTimeScale: function( time ) {

	    		var timeScale = 0;

	    		if ( ! this.paused ) {

	    			timeScale = this.timeScale;

	    			var interpolant = this._timeScaleInterpolant;

	    			if ( interpolant !== null ) {

	    				var interpolantValue = interpolant.evaluate( time )[ 0 ];

	    				timeScale *= interpolantValue;

	    				if ( time > interpolant.parameterPositions[ 1 ] ) {

	    					this.stopWarping();

	    					if ( timeScale === 0 ) {

	    						// motion has halted, pause
	    						this.paused = true;

	    					} else {

	    						// warp done - apply final time scale
	    						this.timeScale = timeScale;

	    					}

	    				}

	    			}

	    		}

	    		this._effectiveTimeScale = timeScale;
	    		return timeScale;

	    	},

	    	_updateTime: function( deltaTime ) {

	    		var time = this.time + deltaTime;

	    		if ( deltaTime === 0 ) return time;

	    		var duration = this._clip.duration,

	    			loop = this.loop,
	    			loopCount = this._loopCount;

	    		if ( loop === LoopOnce ) {

	    			if ( loopCount === -1 ) {
	    				// just started

	    				this.loopCount = 0;
	    				this._setEndings( true, true, false );

	    			}

	    			handle_stop: {

	    				if ( time >= duration ) {

	    					time = duration;

	    				} else if ( time < 0 ) {

	    					time = 0;

	    				} else break handle_stop;

	    				if ( this.clampWhenFinished ) this.paused = true;
	    				else this.enabled = false;

	    				this._mixer.dispatchEvent( {
	    					type: 'finished', action: this,
	    					direction: deltaTime < 0 ? -1 : 1
	    				} );

	    			}

	    		} else { // repetitive Repeat or PingPong

	    			var pingPong = ( loop === LoopPingPong );

	    			if ( loopCount === -1 ) {
	    				// just started

	    				if ( deltaTime >= 0 ) {

	    					loopCount = 0;

	    					this._setEndings(
	    							true, this.repetitions === 0, pingPong );

	    				} else {

	    					// when looping in reverse direction, the initial
	    					// transition through zero counts as a repetition,
	    					// so leave loopCount at -1

	    					this._setEndings(
	    							this.repetitions === 0, true, pingPong );

	    				}

	    			}

	    			if ( time >= duration || time < 0 ) {
	    				// wrap around

	    				var loopDelta = Math.floor( time / duration ); // signed
	    				time -= duration * loopDelta;

	    				loopCount += Math.abs( loopDelta );

	    				var pending = this.repetitions - loopCount;

	    				if ( pending < 0 ) {
	    					// have to stop (switch state, clamp time, fire event)

	    					if ( this.clampWhenFinished ) this.paused = true;
	    					else this.enabled = false;

	    					time = deltaTime > 0 ? duration : 0;

	    					this._mixer.dispatchEvent( {
	    						type: 'finished', action: this,
	    						direction: deltaTime > 0 ? 1 : -1
	    					} );

	    				} else {
	    					// keep running

	    					if ( pending === 0 ) {
	    						// entering the last round

	    						var atStart = deltaTime < 0;
	    						this._setEndings( atStart, ! atStart, pingPong );

	    					} else {

	    						this._setEndings( false, false, pingPong );

	    					}

	    					this._loopCount = loopCount;

	    					this._mixer.dispatchEvent( {
	    						type: 'loop', action: this, loopDelta: loopDelta
	    					} );

	    				}

	    			}

	    			if ( pingPong && ( loopCount & 1 ) === 1 ) {
	    				// invert time for the "pong round"

	    				this.time = time;
	    				return duration - time;

	    			}

	    		}

	    		this.time = time;
	    		return time;

	    	},

	    	_setEndings: function( atStart, atEnd, pingPong ) {

	    		var settings = this._interpolantSettings;

	    		if ( pingPong ) {

	    			settings.endingStart 	= ZeroSlopeEnding;
	    			settings.endingEnd		= ZeroSlopeEnding;

	    		} else {

	    			// assuming for LoopOnce atStart == atEnd == true

	    			if ( atStart ) {

	    				settings.endingStart = this.zeroSlopeAtStart ?
	    						ZeroSlopeEnding : ZeroCurvatureEnding;

	    			} else {

	    				settings.endingStart = WrapAroundEnding;

	    			}

	    			if ( atEnd ) {

	    				settings.endingEnd = this.zeroSlopeAtEnd ?
	    						ZeroSlopeEnding : ZeroCurvatureEnding;

	    			} else {

	    				settings.endingEnd 	 = WrapAroundEnding;

	    			}

	    		}

	    	},

	    	_scheduleFading: function( duration, weightNow, weightThen ) {

	    		var mixer = this._mixer, now = mixer.time,
	    			interpolant = this._weightInterpolant;

	    		if ( interpolant === null ) {

	    			interpolant = mixer._lendControlInterpolant(),
	    			this._weightInterpolant = interpolant;

	    		}

	    		var times = interpolant.parameterPositions,
	    			values = interpolant.sampleValues;

	    		times[ 0 ] = now; 				values[ 0 ] = weightNow;
	    		times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

	    		return this;

	    	}

	    };

	    /**
	     *
	     * Player for AnimationClips.
	     *
	     *
	     * @author Ben Houston / http://clara.io/
	     * @author David Sarno / http://lighthaus.us/
	     * @author tschw
	     */

	    function AnimationMixer( root ) {

	    	this._root = root;
	    	this._initMemoryManager();
	    	this._accuIndex = 0;

	    	this.time = 0;

	    	this.timeScale = 1.0;

	    }

	    Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

	    	// return an action for a clip optionally using a custom root target
	    	// object (this method allocates a lot of dynamic memory in case a
	    	// previously unknown clip/root combination is specified)
	    	clipAction: function( clip, optionalRoot ) {

	    		var root = optionalRoot || this._root,
	    			rootUuid = root.uuid,

	    			clipObject = typeof clip === 'string' ?
	    					AnimationClip.findByName( root, clip ) : clip,

	    			clipUuid = clipObject !== null ? clipObject.uuid : clip,

	    			actionsForClip = this._actionsByClip[ clipUuid ],
	    			prototypeAction = null;

	    		if ( actionsForClip !== undefined ) {

	    			var existingAction =
	    					actionsForClip.actionByRoot[ rootUuid ];

	    			if ( existingAction !== undefined ) {

	    				return existingAction;

	    			}

	    			// we know the clip, so we don't have to parse all
	    			// the bindings again but can just copy
	    			prototypeAction = actionsForClip.knownActions[ 0 ];

	    			// also, take the clip from the prototype action
	    			if ( clipObject === null )
	    				clipObject = prototypeAction._clip;

	    		}

	    		// clip must be known when specified via string
	    		if ( clipObject === null ) return null;

	    		// allocate all resources required to run it
	    		var newAction = new AnimationAction( this, clipObject, optionalRoot );

	    		this._bindAction( newAction, prototypeAction );

	    		// and make the action known to the memory manager
	    		this._addInactiveAction( newAction, clipUuid, rootUuid );

	    		return newAction;

	    	},

	    	// get an existing action
	    	existingAction: function( clip, optionalRoot ) {

	    		var root = optionalRoot || this._root,
	    			rootUuid = root.uuid,

	    			clipObject = typeof clip === 'string' ?
	    					AnimationClip.findByName( root, clip ) : clip,

	    			clipUuid = clipObject ? clipObject.uuid : clip,

	    			actionsForClip = this._actionsByClip[ clipUuid ];

	    		if ( actionsForClip !== undefined ) {

	    			return actionsForClip.actionByRoot[ rootUuid ] || null;

	    		}

	    		return null;

	    	},

	    	// deactivates all previously scheduled actions
	    	stopAllAction: function() {

	    		var actions = this._actions,
	    			nActions = this._nActiveActions,
	    			bindings = this._bindings,
	    			nBindings = this._nActiveBindings;

	    		this._nActiveActions = 0;
	    		this._nActiveBindings = 0;

	    		for ( var i = 0; i !== nActions; ++ i ) {

	    			actions[ i ].reset();

	    		}

	    		for ( var i = 0; i !== nBindings; ++ i ) {

	    			bindings[ i ].useCount = 0;

	    		}

	    		return this;

	    	},

	    	// advance the time and update apply the animation
	    	update: function( deltaTime ) {

	    		deltaTime *= this.timeScale;

	    		var actions = this._actions,
	    			nActions = this._nActiveActions,

	    			time = this.time += deltaTime,
	    			timeDirection = Math.sign( deltaTime ),

	    			accuIndex = this._accuIndex ^= 1;

	    		// run active actions

	    		for ( var i = 0; i !== nActions; ++ i ) {

	    			var action = actions[ i ];

	    			if ( action.enabled ) {

	    				action._update( time, deltaTime, timeDirection, accuIndex );

	    			}

	    		}

	    		// update scene graph

	    		var bindings = this._bindings,
	    			nBindings = this._nActiveBindings;

	    		for ( var i = 0; i !== nBindings; ++ i ) {

	    			bindings[ i ].apply( accuIndex );

	    		}

	    		return this;

	    	},

	    	// return this mixer's root target object
	    	getRoot: function() {

	    		return this._root;

	    	},

	    	// free all resources specific to a particular clip
	    	uncacheClip: function( clip ) {

	    		var actions = this._actions,
	    			clipUuid = clip.uuid,
	    			actionsByClip = this._actionsByClip,
	    			actionsForClip = actionsByClip[ clipUuid ];

	    		if ( actionsForClip !== undefined ) {

	    			// note: just calling _removeInactiveAction would mess up the
	    			// iteration state and also require updating the state we can
	    			// just throw away

	    			var actionsToRemove = actionsForClip.knownActions;

	    			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

	    				var action = actionsToRemove[ i ];

	    				this._deactivateAction( action );

	    				var cacheIndex = action._cacheIndex,
	    					lastInactiveAction = actions[ actions.length - 1 ];

	    				action._cacheIndex = null;
	    				action._byClipCacheIndex = null;

	    				lastInactiveAction._cacheIndex = cacheIndex;
	    				actions[ cacheIndex ] = lastInactiveAction;
	    				actions.pop();

	    				this._removeInactiveBindingsForAction( action );

	    			}

	    			delete actionsByClip[ clipUuid ];

	    		}

	    	},

	    	// free all resources specific to a particular root target object
	    	uncacheRoot: function( root ) {

	    		var rootUuid = root.uuid,
	    			actionsByClip = this._actionsByClip;

	    		for ( var clipUuid in actionsByClip ) {

	    			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
	    				action = actionByRoot[ rootUuid ];

	    			if ( action !== undefined ) {

	    				this._deactivateAction( action );
	    				this._removeInactiveAction( action );

	    			}

	    		}

	    		var bindingsByRoot = this._bindingsByRootAndName,
	    			bindingByName = bindingsByRoot[ rootUuid ];

	    		if ( bindingByName !== undefined ) {

	    			for ( var trackName in bindingByName ) {

	    				var binding = bindingByName[ trackName ];
	    				binding.restoreOriginalState();
	    				this._removeInactiveBinding( binding );

	    			}

	    		}

	    	},

	    	// remove a targeted clip from the cache
	    	uncacheAction: function( clip, optionalRoot ) {

	    		var action = this.existingAction( clip, optionalRoot );

	    		if ( action !== null ) {

	    			this._deactivateAction( action );
	    			this._removeInactiveAction( action );

	    		}

	    	}

	    } );

	    // Implementation details:

	    Object.assign( AnimationMixer.prototype, {

	    	_bindAction: function( action, prototypeAction ) {

	    		var root = action._localRoot || this._root,
	    			tracks = action._clip.tracks,
	    			nTracks = tracks.length,
	    			bindings = action._propertyBindings,
	    			interpolants = action._interpolants,
	    			rootUuid = root.uuid,
	    			bindingsByRoot = this._bindingsByRootAndName,
	    			bindingsByName = bindingsByRoot[ rootUuid ];

	    		if ( bindingsByName === undefined ) {

	    			bindingsByName = {};
	    			bindingsByRoot[ rootUuid ] = bindingsByName;

	    		}

	    		for ( var i = 0; i !== nTracks; ++ i ) {

	    			var track = tracks[ i ],
	    				trackName = track.name,
	    				binding = bindingsByName[ trackName ];

	    			if ( binding !== undefined ) {

	    				bindings[ i ] = binding;

	    			} else {

	    				binding = bindings[ i ];

	    				if ( binding !== undefined ) {

	    					// existing binding, make sure the cache knows

	    					if ( binding._cacheIndex === null ) {

	    						++ binding.referenceCount;
	    						this._addInactiveBinding( binding, rootUuid, trackName );

	    					}

	    					continue;

	    				}

	    				var path = prototypeAction && prototypeAction.
	    						_propertyBindings[ i ].binding.parsedPath;

	    				binding = new PropertyMixer(
	    						PropertyBinding.create( root, trackName, path ),
	    						track.ValueTypeName, track.getValueSize() );

	    				++ binding.referenceCount;
	    				this._addInactiveBinding( binding, rootUuid, trackName );

	    				bindings[ i ] = binding;

	    			}

	    			interpolants[ i ].resultBuffer = binding.buffer;

	    		}

	    	},

	    	_activateAction: function( action ) {

	    		if ( ! this._isActiveAction( action ) ) {

	    			if ( action._cacheIndex === null ) {

	    				// this action has been forgotten by the cache, but the user
	    				// appears to be still using it -> rebind

	    				var rootUuid = ( action._localRoot || this._root ).uuid,
	    					clipUuid = action._clip.uuid,
	    					actionsForClip = this._actionsByClip[ clipUuid ];

	    				this._bindAction( action,
	    						actionsForClip && actionsForClip.knownActions[ 0 ] );

	    				this._addInactiveAction( action, clipUuid, rootUuid );

	    			}

	    			var bindings = action._propertyBindings;

	    			// increment reference counts / sort out state
	    			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

	    				var binding = bindings[ i ];

	    				if ( binding.useCount ++ === 0 ) {

	    					this._lendBinding( binding );
	    					binding.saveOriginalState();

	    				}

	    			}

	    			this._lendAction( action );

	    		}

	    	},

	    	_deactivateAction: function( action ) {

	    		if ( this._isActiveAction( action ) ) {

	    			var bindings = action._propertyBindings;

	    			// decrement reference counts / sort out state
	    			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

	    				var binding = bindings[ i ];

	    				if ( -- binding.useCount === 0 ) {

	    					binding.restoreOriginalState();
	    					this._takeBackBinding( binding );

	    				}

	    			}

	    			this._takeBackAction( action );

	    		}

	    	},

	    	// Memory manager

	    	_initMemoryManager: function() {

	    		this._actions = []; // 'nActiveActions' followed by inactive ones
	    		this._nActiveActions = 0;

	    		this._actionsByClip = {};
	    		// inside:
	    		// {
	    		// 		knownActions: Array< AnimationAction >	- used as prototypes
	    		// 		actionByRoot: AnimationAction			- lookup
	    		// }


	    		this._bindings = []; // 'nActiveBindings' followed by inactive ones
	    		this._nActiveBindings = 0;

	    		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


	    		this._controlInterpolants = []; // same game as above
	    		this._nActiveControlInterpolants = 0;

	    		var scope = this;

	    		this.stats = {

	    			actions: {
	    				get total() { return scope._actions.length; },
	    				get inUse() { return scope._nActiveActions; }
	    			},
	    			bindings: {
	    				get total() { return scope._bindings.length; },
	    				get inUse() { return scope._nActiveBindings; }
	    			},
	    			controlInterpolants: {
	    				get total() { return scope._controlInterpolants.length; },
	    				get inUse() { return scope._nActiveControlInterpolants; }
	    			}

	    		};

	    	},

	    	// Memory management for AnimationAction objects

	    	_isActiveAction: function( action ) {

	    		var index = action._cacheIndex;
	    		return index !== null && index < this._nActiveActions;

	    	},

	    	_addInactiveAction: function( action, clipUuid, rootUuid ) {

	    		var actions = this._actions,
	    			actionsByClip = this._actionsByClip,
	    			actionsForClip = actionsByClip[ clipUuid ];

	    		if ( actionsForClip === undefined ) {

	    			actionsForClip = {

	    				knownActions: [ action ],
	    				actionByRoot: {}

	    			};

	    			action._byClipCacheIndex = 0;

	    			actionsByClip[ clipUuid ] = actionsForClip;

	    		} else {

	    			var knownActions = actionsForClip.knownActions;

	    			action._byClipCacheIndex = knownActions.length;
	    			knownActions.push( action );

	    		}

	    		action._cacheIndex = actions.length;
	    		actions.push( action );

	    		actionsForClip.actionByRoot[ rootUuid ] = action;

	    	},

	    	_removeInactiveAction: function( action ) {

	    		var actions = this._actions,
	    			lastInactiveAction = actions[ actions.length - 1 ],
	    			cacheIndex = action._cacheIndex;

	    		lastInactiveAction._cacheIndex = cacheIndex;
	    		actions[ cacheIndex ] = lastInactiveAction;
	    		actions.pop();

	    		action._cacheIndex = null;


	    		var clipUuid = action._clip.uuid,
	    			actionsByClip = this._actionsByClip,
	    			actionsForClip = actionsByClip[ clipUuid ],
	    			knownActionsForClip = actionsForClip.knownActions,

	    			lastKnownAction =
	    				knownActionsForClip[ knownActionsForClip.length - 1 ],

	    			byClipCacheIndex = action._byClipCacheIndex;

	    		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
	    		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
	    		knownActionsForClip.pop();

	    		action._byClipCacheIndex = null;


	    		var actionByRoot = actionsForClip.actionByRoot,
	    			rootUuid = ( actions._localRoot || this._root ).uuid;

	    		delete actionByRoot[ rootUuid ];

	    		if ( knownActionsForClip.length === 0 ) {

	    			delete actionsByClip[ clipUuid ];

	    		}

	    		this._removeInactiveBindingsForAction( action );

	    	},

	    	_removeInactiveBindingsForAction: function( action ) {

	    		var bindings = action._propertyBindings;
	    		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

	    			var binding = bindings[ i ];

	    			if ( -- binding.referenceCount === 0 ) {

	    				this._removeInactiveBinding( binding );

	    			}

	    		}

	    	},

	    	_lendAction: function( action ) {

	    		// [ active actions |  inactive actions  ]
	    		// [  active actions >| inactive actions ]
	    		//                 s        a
	    		//                  <-swap->
	    		//                 a        s

	    		var actions = this._actions,
	    			prevIndex = action._cacheIndex,

	    			lastActiveIndex = this._nActiveActions ++,

	    			firstInactiveAction = actions[ lastActiveIndex ];

	    		action._cacheIndex = lastActiveIndex;
	    		actions[ lastActiveIndex ] = action;

	    		firstInactiveAction._cacheIndex = prevIndex;
	    		actions[ prevIndex ] = firstInactiveAction;

	    	},

	    	_takeBackAction: function( action ) {

	    		// [  active actions  | inactive actions ]
	    		// [ active actions |< inactive actions  ]
	    		//        a        s
	    		//         <-swap->
	    		//        s        a

	    		var actions = this._actions,
	    			prevIndex = action._cacheIndex,

	    			firstInactiveIndex = -- this._nActiveActions,

	    			lastActiveAction = actions[ firstInactiveIndex ];

	    		action._cacheIndex = firstInactiveIndex;
	    		actions[ firstInactiveIndex ] = action;

	    		lastActiveAction._cacheIndex = prevIndex;
	    		actions[ prevIndex ] = lastActiveAction;

	    	},

	    	// Memory management for PropertyMixer objects

	    	_addInactiveBinding: function( binding, rootUuid, trackName ) {

	    		var bindingsByRoot = this._bindingsByRootAndName,
	    			bindingByName = bindingsByRoot[ rootUuid ],

	    			bindings = this._bindings;

	    		if ( bindingByName === undefined ) {

	    			bindingByName = {};
	    			bindingsByRoot[ rootUuid ] = bindingByName;

	    		}

	    		bindingByName[ trackName ] = binding;

	    		binding._cacheIndex = bindings.length;
	    		bindings.push( binding );

	    	},

	    	_removeInactiveBinding: function( binding ) {

	    		var bindings = this._bindings,
	    			propBinding = binding.binding,
	    			rootUuid = propBinding.rootNode.uuid,
	    			trackName = propBinding.path,
	    			bindingsByRoot = this._bindingsByRootAndName,
	    			bindingByName = bindingsByRoot[ rootUuid ],

	    			lastInactiveBinding = bindings[ bindings.length - 1 ],
	    			cacheIndex = binding._cacheIndex;

	    		lastInactiveBinding._cacheIndex = cacheIndex;
	    		bindings[ cacheIndex ] = lastInactiveBinding;
	    		bindings.pop();

	    		delete bindingByName[ trackName ];

	    		remove_empty_map: {

	    			for ( var _ in bindingByName ) break remove_empty_map;

	    			delete bindingsByRoot[ rootUuid ];

	    		}

	    	},

	    	_lendBinding: function( binding ) {

	    		var bindings = this._bindings,
	    			prevIndex = binding._cacheIndex,

	    			lastActiveIndex = this._nActiveBindings ++,

	    			firstInactiveBinding = bindings[ lastActiveIndex ];

	    		binding._cacheIndex = lastActiveIndex;
	    		bindings[ lastActiveIndex ] = binding;

	    		firstInactiveBinding._cacheIndex = prevIndex;
	    		bindings[ prevIndex ] = firstInactiveBinding;

	    	},

	    	_takeBackBinding: function( binding ) {

	    		var bindings = this._bindings,
	    			prevIndex = binding._cacheIndex,

	    			firstInactiveIndex = -- this._nActiveBindings,

	    			lastActiveBinding = bindings[ firstInactiveIndex ];

	    		binding._cacheIndex = firstInactiveIndex;
	    		bindings[ firstInactiveIndex ] = binding;

	    		lastActiveBinding._cacheIndex = prevIndex;
	    		bindings[ prevIndex ] = lastActiveBinding;

	    	},


	    	// Memory management of Interpolants for weight and time scale

	    	_lendControlInterpolant: function() {

	    		var interpolants = this._controlInterpolants,
	    			lastActiveIndex = this._nActiveControlInterpolants ++,
	    			interpolant = interpolants[ lastActiveIndex ];

	    		if ( interpolant === undefined ) {

	    			interpolant = new LinearInterpolant(
	    					new Float32Array( 2 ), new Float32Array( 2 ),
	    						1, this._controlInterpolantsResultBuffer );

	    			interpolant.__cacheIndex = lastActiveIndex;
	    			interpolants[ lastActiveIndex ] = interpolant;

	    		}

	    		return interpolant;

	    	},

	    	_takeBackControlInterpolant: function( interpolant ) {

	    		var interpolants = this._controlInterpolants,
	    			prevIndex = interpolant.__cacheIndex,

	    			firstInactiveIndex = -- this._nActiveControlInterpolants,

	    			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

	    		interpolant.__cacheIndex = firstInactiveIndex;
	    		interpolants[ firstInactiveIndex ] = interpolant;

	    		lastActiveInterpolant.__cacheIndex = prevIndex;
	    		interpolants[ prevIndex ] = lastActiveInterpolant;

	    	},

	    	_controlInterpolantsResultBuffer: new Float32Array( 1 )

	    } );

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function Uniform( value ) {

	    	if ( typeof value === 'string' ) {

	    		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
	    		value = arguments[ 1 ];

	    	}

	    	this.value = value;

	    	this.dynamic = false;

	    }

	    Uniform.prototype = {

	    	constructor: Uniform,

	    	onUpdate: function ( callback ) {

	    		this.dynamic = true;
	    		this.onUpdateCallback = callback;

	    		return this;

	    	}

	    };

	    /**
	     * @author benaadams / https://twitter.com/ben_a_adams
	     */

	    function InstancedBufferGeometry() {

	    	BufferGeometry.call( this );

	    	this.type = 'InstancedBufferGeometry';
	    	this.maxInstancedCount = undefined;

	    }

	    InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	    InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;

	    InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

	    InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {

	    	this.groups.push( {

	    		start: start,
	    		count: count,
	    		instances: instances

	    	} );

	    };

	    InstancedBufferGeometry.prototype.copy = function ( source ) {

	    	var index = source.index;

	    	if ( index !== null ) {

	    		this.setIndex( index.clone() );

	    	}

	    	var attributes = source.attributes;

	    	for ( var name in attributes ) {

	    		var attribute = attributes[ name ];
	    		this.addAttribute( name, attribute.clone() );

	    	}

	    	var groups = source.groups;

	    	for ( var i = 0, l = groups.length; i < l; i ++ ) {

	    		var group = groups[ i ];
	    		this.addGroup( group.start, group.count, group.instances );

	    	}

	    	return this;

	    };

	    /**
	     * @author benaadams / https://twitter.com/ben_a_adams
	     */

	    function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

	    	this.uuid = exports.Math.generateUUID();

	    	this.data = interleavedBuffer;
	    	this.itemSize = itemSize;
	    	this.offset = offset;

	    	this.normalized = normalized === true;

	    }


	    InterleavedBufferAttribute.prototype = {

	    	constructor: InterleavedBufferAttribute,

	    	isInterleavedBufferAttribute: true,

	    	get count() {

	    		return this.data.count;

	    	},

	    	get array() {

	    		return this.data.array;

	    	},

	    	setX: function ( index, x ) {

	    		this.data.array[ index * this.data.stride + this.offset ] = x;

	    		return this;

	    	},

	    	setY: function ( index, y ) {

	    		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

	    		return this;

	    	},

	    	setZ: function ( index, z ) {

	    		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

	    		return this;

	    	},

	    	setW: function ( index, w ) {

	    		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

	    		return this;

	    	},

	    	getX: function ( index ) {

	    		return this.data.array[ index * this.data.stride + this.offset ];

	    	},

	    	getY: function ( index ) {

	    		return this.data.array[ index * this.data.stride + this.offset + 1 ];

	    	},

	    	getZ: function ( index ) {

	    		return this.data.array[ index * this.data.stride + this.offset + 2 ];

	    	},

	    	getW: function ( index ) {

	    		return this.data.array[ index * this.data.stride + this.offset + 3 ];

	    	},

	    	setXY: function ( index, x, y ) {

	    		index = index * this.data.stride + this.offset;

	    		this.data.array[ index + 0 ] = x;
	    		this.data.array[ index + 1 ] = y;

	    		return this;

	    	},

	    	setXYZ: function ( index, x, y, z ) {

	    		index = index * this.data.stride + this.offset;

	    		this.data.array[ index + 0 ] = x;
	    		this.data.array[ index + 1 ] = y;
	    		this.data.array[ index + 2 ] = z;

	    		return this;

	    	},

	    	setXYZW: function ( index, x, y, z, w ) {

	    		index = index * this.data.stride + this.offset;

	    		this.data.array[ index + 0 ] = x;
	    		this.data.array[ index + 1 ] = y;
	    		this.data.array[ index + 2 ] = z;
	    		this.data.array[ index + 3 ] = w;

	    		return this;

	    	}

	    };

	    /**
	     * @author benaadams / https://twitter.com/ben_a_adams
	     */

	    function InterleavedBuffer( array, stride ) {

	    	this.uuid = exports.Math.generateUUID();

	    	this.array = array;
	    	this.stride = stride;
	    	this.count = array !== undefined ? array.length / stride : 0;

	    	this.dynamic = false;
	    	this.updateRange = { offset: 0, count: - 1 };

	    	this.version = 0;

	    }

	    InterleavedBuffer.prototype = {

	    	constructor: InterleavedBuffer,

	    	isInterleavedBuffer: true,

	    	set needsUpdate( value ) {

	    		if ( value === true ) this.version ++;

	    	},

	    	setDynamic: function ( value ) {

	    		this.dynamic = value;

	    		return this;

	    	},

	    	copy: function ( source ) {

	    		this.array = new source.array.constructor( source.array );
	    		this.count = source.count;
	    		this.stride = source.stride;
	    		this.dynamic = source.dynamic;

	    		return this;

	    	},

	    	copyAt: function ( index1, attribute, index2 ) {

	    		index1 *= this.stride;
	    		index2 *= attribute.stride;

	    		for ( var i = 0, l = this.stride; i < l; i ++ ) {

	    			this.array[ index1 + i ] = attribute.array[ index2 + i ];

	    		}

	    		return this;

	    	},

	    	set: function ( value, offset ) {

	    		if ( offset === undefined ) offset = 0;

	    		this.array.set( value, offset );

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	}

	    };

	    /**
	     * @author benaadams / https://twitter.com/ben_a_adams
	     */

	    function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

	    	InterleavedBuffer.call( this, array, stride );

	    	this.meshPerAttribute = meshPerAttribute || 1;

	    }

	    InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );
	    InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;

	    InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

	    InstancedInterleavedBuffer.prototype.copy = function ( source ) {

	    	InterleavedBuffer.prototype.copy.call( this, source );

	    	this.meshPerAttribute = source.meshPerAttribute;

	    	return this;

	    };

	    /**
	     * @author benaadams / https://twitter.com/ben_a_adams
	     */

	    function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

	    	BufferAttribute.call( this, array, itemSize );

	    	this.meshPerAttribute = meshPerAttribute || 1;

	    }

	    InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	    InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;

	    InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

	    InstancedBufferAttribute.prototype.copy = function ( source ) {

	    	BufferAttribute.prototype.copy.call( this, source );

	    	this.meshPerAttribute = source.meshPerAttribute;

	    	return this;

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author bhouston / http://clara.io/
	     * @author stephomi / http://stephaneginier.com/
	     */

	    function Raycaster( origin, direction, near, far ) {

	    	this.ray = new Ray( origin, direction );
	    	// direction is assumed to be normalized (for accurate distance calculations)

	    	this.near = near || 0;
	    	this.far = far || Infinity;

	    	this.params = {
	    		Mesh: {},
	    		Line: {},
	    		LOD: {},
	    		Points: { threshold: 1 },
	    		Sprite: {}
	    	};

	    	Object.defineProperties( this.params, {
	    		PointCloud: {
	    			get: function () {
	    				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
	    				return this.Points;
	    			}
	    		}
	    	} );

	    }

	    function ascSort( a, b ) {

	    	return a.distance - b.distance;

	    }

	    function intersectObject( object, raycaster, intersects, recursive ) {

	    	if ( object.visible === false ) return;

	    	object.raycast( raycaster, intersects );

	    	if ( recursive === true ) {

	    		var children = object.children;

	    		for ( var i = 0, l = children.length; i < l; i ++ ) {

	    			intersectObject( children[ i ], raycaster, intersects, true );

	    		}

	    	}

	    }

	    //

	    Raycaster.prototype = {

	    	constructor: Raycaster,

	    	linePrecision: 1,

	    	set: function ( origin, direction ) {

	    		// direction is assumed to be normalized (for accurate distance calculations)

	    		this.ray.set( origin, direction );

	    	},

	    	setFromCamera: function ( coords, camera ) {

	    		if ( (camera && camera.isPerspectiveCamera) ) {

	    			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
	    			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

	    		} else if ( (camera && camera.isOrthographicCamera) ) {

	    			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
	    			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

	    		} else {

	    			console.error( 'THREE.Raycaster: Unsupported camera type.' );

	    		}

	    	},

	    	intersectObject: function ( object, recursive ) {

	    		var intersects = [];

	    		intersectObject( object, this, intersects, recursive );

	    		intersects.sort( ascSort );

	    		return intersects;

	    	},

	    	intersectObjects: function ( objects, recursive ) {

	    		var intersects = [];

	    		if ( Array.isArray( objects ) === false ) {

	    			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
	    			return intersects;

	    		}

	    		for ( var i = 0, l = objects.length; i < l; i ++ ) {

	    			intersectObject( objects[ i ], this, intersects, recursive );

	    		}

	    		intersects.sort( ascSort );

	    		return intersects;

	    	}

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Clock( autoStart ) {

	    	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	    	this.startTime = 0;
	    	this.oldTime = 0;
	    	this.elapsedTime = 0;

	    	this.running = false;

	    }

	    Clock.prototype = {

	    	constructor: Clock,

	    	start: function () {

	    		this.startTime = ( performance || Date ).now();

	    		this.oldTime = this.startTime;
	    		this.running = true;

	    	},

	    	stop: function () {

	    		this.getElapsedTime();
	    		this.running = false;

	    	},

	    	getElapsedTime: function () {

	    		this.getDelta();
	    		return this.elapsedTime;

	    	},

	    	getDelta: function () {

	    		var diff = 0;

	    		if ( this.autoStart && ! this.running ) {

	    			this.start();

	    		}

	    		if ( this.running ) {

	    			var newTime = ( performance || Date ).now();

	    			diff = ( newTime - this.oldTime ) / 1000;
	    			this.oldTime = newTime;

	    			this.elapsedTime += diff;

	    		}

	    		return diff;

	    	}

	    };

	    /**
	     * Spline from Tween.js, slightly optimized (and trashed)
	     * http://sole.github.com/tween.js/examples/05_spline.html
	     *
	     * @author mrdoob / http://mrdoob.com/
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function Spline( points ) {

	    	this.points = points;

	    	var c = [], v3 = { x: 0, y: 0, z: 0 },
	    	point, intPoint, weight, w2, w3,
	    	pa, pb, pc, pd;

	    	this.initFromArray = function ( a ) {

	    		this.points = [];

	    		for ( var i = 0; i < a.length; i ++ ) {

	    			this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

	    		}

	    	};

	    	this.getPoint = function ( k ) {

	    		point = ( this.points.length - 1 ) * k;
	    		intPoint = Math.floor( point );
	    		weight = point - intPoint;

	    		c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
	    		c[ 1 ] = intPoint;
	    		c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
	    		c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

	    		pa = this.points[ c[ 0 ] ];
	    		pb = this.points[ c[ 1 ] ];
	    		pc = this.points[ c[ 2 ] ];
	    		pd = this.points[ c[ 3 ] ];

	    		w2 = weight * weight;
	    		w3 = weight * w2;

	    		v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
	    		v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
	    		v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

	    		return v3;

	    	};

	    	this.getControlPointsArray = function () {

	    		var i, p, l = this.points.length,
	    			coords = [];

	    		for ( i = 0; i < l; i ++ ) {

	    			p = this.points[ i ];
	    			coords[ i ] = [ p.x, p.y, p.z ];

	    		}

	    		return coords;

	    	};

	    	// approximate length by summing linear segments

	    	this.getLength = function ( nSubDivisions ) {

	    		var i, index, nSamples, position,
	    			point = 0, intPoint = 0, oldIntPoint = 0,
	    			oldPosition = new Vector3(),
	    			tmpVec = new Vector3(),
	    			chunkLengths = [],
	    			totalLength = 0;

	    		// first point has 0 length

	    		chunkLengths[ 0 ] = 0;

	    		if ( ! nSubDivisions ) nSubDivisions = 100;

	    		nSamples = this.points.length * nSubDivisions;

	    		oldPosition.copy( this.points[ 0 ] );

	    		for ( i = 1; i < nSamples; i ++ ) {

	    			index = i / nSamples;

	    			position = this.getPoint( index );
	    			tmpVec.copy( position );

	    			totalLength += tmpVec.distanceTo( oldPosition );

	    			oldPosition.copy( position );

	    			point = ( this.points.length - 1 ) * index;
	    			intPoint = Math.floor( point );

	    			if ( intPoint !== oldIntPoint ) {

	    				chunkLengths[ intPoint ] = totalLength;
	    				oldIntPoint = intPoint;

	    			}

	    		}

	    		// last point ends with total length

	    		chunkLengths[ chunkLengths.length ] = totalLength;

	    		return { chunks: chunkLengths, total: totalLength };

	    	};

	    	this.reparametrizeByArcLength = function ( samplingCoef ) {

	    		var i, j,
	    			index, indexCurrent, indexNext,
	    			realDistance,
	    			sampling, position,
	    			newpoints = [],
	    			tmpVec = new Vector3(),
	    			sl = this.getLength();

	    		newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

	    		for ( i = 1; i < this.points.length; i ++ ) {

	    			//tmpVec.copy( this.points[ i - 1 ] );
	    			//linearDistance = tmpVec.distanceTo( this.points[ i ] );

	    			realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

	    			sampling = Math.ceil( samplingCoef * realDistance / sl.total );

	    			indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
	    			indexNext = i / ( this.points.length - 1 );

	    			for ( j = 1; j < sampling - 1; j ++ ) {

	    				index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

	    				position = this.getPoint( index );
	    				newpoints.push( tmpVec.copy( position ).clone() );

	    			}

	    			newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

	    		}

	    		this.points = newpoints;

	    	};

	    	// Catmull-Rom

	    	function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

	    		var v0 = ( p2 - p0 ) * 0.5,
	    			v1 = ( p3 - p1 ) * 0.5;

	    		return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	    	}

	    }

	    /**
	     * @author bhouston / http://clara.io
	     * @author WestLangley / http://github.com/WestLangley
	     *
	     * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	     *
	     * The poles (phi) are at the positive and negative y axis.
	     * The equator starts at positive z.
	     */

	    function Spherical( radius, phi, theta ) {

	    	this.radius = ( radius !== undefined ) ? radius : 1.0;
	    	this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
	    	this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

	    	return this;

	    }

	    Spherical.prototype = {

	    	constructor: Spherical,

	    	set: function ( radius, phi, theta ) {

	    		this.radius = radius;
	    		this.phi = phi;
	    		this.theta = theta;

	    		return this;

	    	},

	    	clone: function () {

	    		return new this.constructor().copy( this );

	    	},

	    	copy: function ( other ) {

	    		this.radius.copy( other.radius );
	    		this.phi.copy( other.phi );
	    		this.theta.copy( other.theta );

	    		return this;

	    	},

	    	// restrict phi to be betwee EPS and PI-EPS
	    	makeSafe: function() {

	    		var EPS = 0.000001;
	    		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

	    		return this;

	    	},

	    	setFromVector3: function( vec3 ) {

	    		this.radius = vec3.length();

	    		if ( this.radius === 0 ) {

	    			this.theta = 0;
	    			this.phi = 0;

	    		} else {

	    			this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
	    			this.phi = Math.acos( exports.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

	    		}

	    		return this;

	    	},

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function MorphBlendMesh( geometry, material ) {

	    	Mesh.call( this, geometry, material );

	    	this.animationsMap = {};
	    	this.animationsList = [];

	    	// prepare default animation
	    	// (all frames played together in 1 second)

	    	var numFrames = this.geometry.morphTargets.length;

	    	var name = "__default";

	    	var startFrame = 0;
	    	var endFrame = numFrames - 1;

	    	var fps = numFrames / 1;

	    	this.createAnimation( name, startFrame, endFrame, fps );
	    	this.setAnimationWeight( name, 1 );

	    }

	    MorphBlendMesh.prototype = Object.create( Mesh.prototype );
	    MorphBlendMesh.prototype.constructor = MorphBlendMesh;

	    MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

	    	var animation = {

	    		start: start,
	    		end: end,

	    		length: end - start + 1,

	    		fps: fps,
	    		duration: ( end - start ) / fps,

	    		lastFrame: 0,
	    		currentFrame: 0,

	    		active: false,

	    		time: 0,
	    		direction: 1,
	    		weight: 1,

	    		directionBackwards: false,
	    		mirroredLoop: false

	    	};

	    	this.animationsMap[ name ] = animation;
	    	this.animationsList.push( animation );

	    };

	    MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

	    	var pattern = /([a-z]+)_?(\d+)/i;

	    	var firstAnimation, frameRanges = {};

	    	var geometry = this.geometry;

	    	for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

	    		var morph = geometry.morphTargets[ i ];
	    		var chunks = morph.name.match( pattern );

	    		if ( chunks && chunks.length > 1 ) {

	    			var name = chunks[ 1 ];

	    			if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

	    			var range = frameRanges[ name ];

	    			if ( i < range.start ) range.start = i;
	    			if ( i > range.end ) range.end = i;

	    			if ( ! firstAnimation ) firstAnimation = name;

	    		}

	    	}

	    	for ( var name in frameRanges ) {

	    		var range = frameRanges[ name ];
	    		this.createAnimation( name, range.start, range.end, fps );

	    	}

	    	this.firstAnimation = firstAnimation;

	    };

	    MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.direction = 1;
	    		animation.directionBackwards = false;

	    	}

	    };

	    MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.direction = - 1;
	    		animation.directionBackwards = true;

	    	}

	    };

	    MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.fps = fps;
	    		animation.duration = ( animation.end - animation.start ) / animation.fps;

	    	}

	    };

	    MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.duration = duration;
	    		animation.fps = ( animation.end - animation.start ) / animation.duration;

	    	}

	    };

	    MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.weight = weight;

	    	}

	    };

	    MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.time = time;

	    	}

	    };

	    MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

	    	var time = 0;

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		time = animation.time;

	    	}

	    	return time;

	    };

	    MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

	    	var duration = - 1;

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		duration = animation.duration;

	    	}

	    	return duration;

	    };

	    MorphBlendMesh.prototype.playAnimation = function ( name ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.time = 0;
	    		animation.active = true;

	    	} else {

	    		console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

	    	}

	    };

	    MorphBlendMesh.prototype.stopAnimation = function ( name ) {

	    	var animation = this.animationsMap[ name ];

	    	if ( animation ) {

	    		animation.active = false;

	    	}

	    };

	    MorphBlendMesh.prototype.update = function ( delta ) {

	    	for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

	    		var animation = this.animationsList[ i ];

	    		if ( ! animation.active ) continue;

	    		var frameTime = animation.duration / animation.length;

	    		animation.time += animation.direction * delta;

	    		if ( animation.mirroredLoop ) {

	    			if ( animation.time > animation.duration || animation.time < 0 ) {

	    				animation.direction *= - 1;

	    				if ( animation.time > animation.duration ) {

	    					animation.time = animation.duration;
	    					animation.directionBackwards = true;

	    				}

	    				if ( animation.time < 0 ) {

	    					animation.time = 0;
	    					animation.directionBackwards = false;

	    				}

	    			}

	    		} else {

	    			animation.time = animation.time % animation.duration;

	    			if ( animation.time < 0 ) animation.time += animation.duration;

	    		}

	    		var keyframe = animation.start + exports.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
	    		var weight = animation.weight;

	    		if ( keyframe !== animation.currentFrame ) {

	    			this.morphTargetInfluences[ animation.lastFrame ] = 0;
	    			this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

	    			this.morphTargetInfluences[ keyframe ] = 0;

	    			animation.lastFrame = animation.currentFrame;
	    			animation.currentFrame = keyframe;

	    		}

	    		var mix = ( animation.time % frameTime ) / frameTime;

	    		if ( animation.directionBackwards ) mix = 1 - mix;

	    		if ( animation.currentFrame !== animation.lastFrame ) {

	    			this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
	    			this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

	    		} else {

	    			this.morphTargetInfluences[ animation.currentFrame ] = weight;

	    		}

	    	}

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    function ImmediateRenderObject( material ) {

	    	Object3D.call( this );

	    	this.material = material;
	    	this.render = function ( renderCallback ) {};

	    }

	    ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	    ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	    ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author WestLangley / http://github.com/WestLangley
	    */

	    function VertexNormalsHelper( object, size, hex, linewidth ) {

	    	this.object = object;

	    	this.size = ( size !== undefined ) ? size : 1;

	    	var color = ( hex !== undefined ) ? hex : 0xff0000;

	    	var width = ( linewidth !== undefined ) ? linewidth : 1;

	    	//

	    	var nNormals = 0;

	    	var objGeometry = this.object.geometry;

	    	if ( (objGeometry && objGeometry.isGeometry) ) {

	    		nNormals = objGeometry.faces.length * 3;

	    	} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

	    		nNormals = objGeometry.attributes.normal.count;

	    	}

	    	//

	    	var geometry = new BufferGeometry();

	    	var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

	    	geometry.addAttribute( 'position', positions );

	    	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	    	//

	    	this.matrixAutoUpdate = false;

	    	this.update();

	    }

	    VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	    VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	    VertexNormalsHelper.prototype.update = ( function () {

	    	var v1 = new Vector3();
	    	var v2 = new Vector3();
	    	var normalMatrix = new Matrix3();

	    	return function update() {

	    		var keys = [ 'a', 'b', 'c' ];

	    		this.object.updateMatrixWorld( true );

	    		normalMatrix.getNormalMatrix( this.object.matrixWorld );

	    		var matrixWorld = this.object.matrixWorld;

	    		var position = this.geometry.attributes.position;

	    		//

	    		var objGeometry = this.object.geometry;

	    		if ( (objGeometry && objGeometry.isGeometry) ) {

	    			var vertices = objGeometry.vertices;

	    			var faces = objGeometry.faces;

	    			var idx = 0;

	    			for ( var i = 0, l = faces.length; i < l; i ++ ) {

	    				var face = faces[ i ];

	    				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

	    					var vertex = vertices[ face[ keys[ j ] ] ];

	    					var normal = face.vertexNormals[ j ];

	    					v1.copy( vertex ).applyMatrix4( matrixWorld );

	    					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

	    					position.setXYZ( idx, v1.x, v1.y, v1.z );

	    					idx = idx + 1;

	    					position.setXYZ( idx, v2.x, v2.y, v2.z );

	    					idx = idx + 1;

	    				}

	    			}

	    		} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

	    			var objPos = objGeometry.attributes.position;

	    			var objNorm = objGeometry.attributes.normal;

	    			var idx = 0;

	    			// for simplicity, ignore index and drawcalls, and render every normal

	    			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

	    				v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

	    				v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

	    				v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

	    				position.setXYZ( idx, v1.x, v1.y, v1.z );

	    				idx = idx + 1;

	    				position.setXYZ( idx, v2.x, v2.y, v2.z );

	    				idx = idx + 1;

	    			}

	    		}

	    		position.needsUpdate = true;

	    		return this;

	    	};

	    }() );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     * @author WestLangley / http://github.com/WestLangley
	    */

	    function SpotLightHelper( light ) {

	    	Object3D.call( this );

	    	this.light = light;
	    	this.light.updateMatrixWorld();

	    	this.matrix = light.matrixWorld;
	    	this.matrixAutoUpdate = false;

	    	var geometry = new BufferGeometry();

	    	var positions = [
	    		0, 0, 0,   0,   0,   1,
	    		0, 0, 0,   1,   0,   1,
	    		0, 0, 0, - 1,   0,   1,
	    		0, 0, 0,   0,   1,   1,
	    		0, 0, 0,   0, - 1,   1
	    	];

	    	for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

	    		var p1 = ( i / l ) * Math.PI * 2;
	    		var p2 = ( j / l ) * Math.PI * 2;

	    		positions.push(
	    			Math.cos( p1 ), Math.sin( p1 ), 1,
	    			Math.cos( p2 ), Math.sin( p2 ), 1
	    		);

	    	}

	    	geometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );

	    	var material = new LineBasicMaterial( { fog: false } );

	    	this.cone = new LineSegments( geometry, material );
	    	this.add( this.cone );

	    	this.update();

	    }

	    SpotLightHelper.prototype = Object.create( Object3D.prototype );
	    SpotLightHelper.prototype.constructor = SpotLightHelper;

	    SpotLightHelper.prototype.dispose = function () {

	    	this.cone.geometry.dispose();
	    	this.cone.material.dispose();

	    };

	    SpotLightHelper.prototype.update = function () {

	    	var vector = new Vector3();
	    	var vector2 = new Vector3();

	    	return function update() {

	    		var coneLength = this.light.distance ? this.light.distance : 1000;
	    		var coneWidth = coneLength * Math.tan( this.light.angle );

	    		this.cone.scale.set( coneWidth, coneWidth, coneLength );

	    		vector.setFromMatrixPosition( this.light.matrixWorld );
	    		vector2.setFromMatrixPosition( this.light.target.matrixWorld );

	    		this.cone.lookAt( vector2.sub( vector ) );

	    		this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	    	};

	    }();

	    /**
	     * @author Sean Griffin / http://twitter.com/sgrif
	     * @author Michael Guerrero / http://realitymeltdown.com
	     * @author mrdoob / http://mrdoob.com/
	     * @author ikerr / http://verold.com
	     */

	    function SkeletonHelper( object ) {

	    	this.bones = this.getBoneList( object );

	    	var geometry = new Geometry();

	    	for ( var i = 0; i < this.bones.length; i ++ ) {

	    		var bone = this.bones[ i ];

	    		if ( (bone.parent && bone.parent.isBone) ) {

	    			geometry.vertices.push( new Vector3() );
	    			geometry.vertices.push( new Vector3() );
	    			geometry.colors.push( new Color( 0, 0, 1 ) );
	    			geometry.colors.push( new Color( 0, 1, 0 ) );

	    		}

	    	}

	    	geometry.dynamic = true;

	    	var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

	    	LineSegments.call( this, geometry, material );

	    	this.root = object;

	    	this.matrix = object.matrixWorld;
	    	this.matrixAutoUpdate = false;

	    	this.update();

	    }


	    SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	    SkeletonHelper.prototype.constructor = SkeletonHelper;

	    SkeletonHelper.prototype.getBoneList = function( object ) {

	    	var boneList = [];

	    	if ( (object && object.isBone) ) {

	    		boneList.push( object );

	    	}

	    	for ( var i = 0; i < object.children.length; i ++ ) {

	    		boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

	    	}

	    	return boneList;

	    };

	    SkeletonHelper.prototype.update = function () {

	    	var geometry = this.geometry;

	    	var matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );

	    	var boneMatrix = new Matrix4();

	    	var j = 0;

	    	for ( var i = 0; i < this.bones.length; i ++ ) {

	    		var bone = this.bones[ i ];

	    		if ( (bone.parent && bone.parent.isBone) ) {

	    			boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
	    			geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

	    			boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
	    			geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

	    			j += 2;

	    		}

	    	}

	    	geometry.verticesNeedUpdate = true;

	    	geometry.computeBoundingSphere();

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function PointLightHelper( light, sphereSize ) {

	    	this.light = light;
	    	this.light.updateMatrixWorld();

	    	var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
	    	var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
	    	material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	    	Mesh.call( this, geometry, material );

	    	this.matrix = this.light.matrixWorld;
	    	this.matrixAutoUpdate = false;

	    	/*
	    	var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	    	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	    	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	    	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	    	var d = light.distance;

	    	if ( d === 0.0 ) {

	    		this.lightDistance.visible = false;

	    	} else {

	    		this.lightDistance.scale.set( d, d, d );

	    	}

	    	this.add( this.lightDistance );
	    	*/

	    }

	    PointLightHelper.prototype = Object.create( Mesh.prototype );
	    PointLightHelper.prototype.constructor = PointLightHelper;

	    PointLightHelper.prototype.dispose = function () {

	    	this.geometry.dispose();
	    	this.material.dispose();

	    };

	    PointLightHelper.prototype.update = function () {

	    	this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	    	/*
	    	var d = this.light.distance;

	    	if ( d === 0.0 ) {

	    		this.lightDistance.visible = false;

	    	} else {

	    		this.lightDistance.visible = true;
	    		this.lightDistance.scale.set( d, d, d );

	    	}
	    	*/

	    };

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function HemisphereLightHelper( light, sphereSize ) {

	    	Object3D.call( this );

	    	this.light = light;
	    	this.light.updateMatrixWorld();

	    	this.matrix = light.matrixWorld;
	    	this.matrixAutoUpdate = false;

	    	this.colors = [ new Color(), new Color() ];

	    	var geometry = new SphereGeometry( sphereSize, 4, 2 );
	    	geometry.rotateX( - Math.PI / 2 );

	    	for ( var i = 0, il = 8; i < il; i ++ ) {

	    		geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

	    	}

	    	var material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );

	    	this.lightSphere = new Mesh( geometry, material );
	    	this.add( this.lightSphere );

	    	this.update();

	    }

	    HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	    HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	    HemisphereLightHelper.prototype.dispose = function () {

	    	this.lightSphere.geometry.dispose();
	    	this.lightSphere.material.dispose();

	    };

	    HemisphereLightHelper.prototype.update = function () {

	    	var vector = new Vector3();

	    	return function update() {

	    		this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
	    		this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

	    		this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
	    		this.lightSphere.geometry.colorsNeedUpdate = true;

	    	};

	    }();

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function GridHelper( size, divisions, color1, color2 ) {

	    	divisions = divisions || 1;
	    	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
	    	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

	    	var center = divisions / 2;
	    	var step = ( size * 2 ) / divisions;
	    	var vertices = [], colors = [];

	    	for ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {

	    		vertices.push( - size, 0, k, size, 0, k );
	    		vertices.push( k, 0, - size, k, 0, size );

	    		var color = i === center ? color1 : color2;

	    		color.toArray( colors, j ); j += 3;
	    		color.toArray( colors, j ); j += 3;
	    		color.toArray( colors, j ); j += 3;
	    		color.toArray( colors, j ); j += 3;

	    	}

	    	var geometry = new BufferGeometry();
	    	geometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );
	    	geometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );

	    	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	    	LineSegments.call( this, geometry, material );

	    }

	    GridHelper.prototype = Object.create( LineSegments.prototype );
	    GridHelper.prototype.constructor = GridHelper;

	    GridHelper.prototype.setColors = function () {

	    	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     * @author WestLangley / http://github.com/WestLangley
	    */

	    function FaceNormalsHelper( object, size, hex, linewidth ) {

	    	// FaceNormalsHelper only supports THREE.Geometry

	    	this.object = object;

	    	this.size = ( size !== undefined ) ? size : 1;

	    	var color = ( hex !== undefined ) ? hex : 0xffff00;

	    	var width = ( linewidth !== undefined ) ? linewidth : 1;

	    	//

	    	var nNormals = 0;

	    	var objGeometry = this.object.geometry;

	    	if ( (objGeometry && objGeometry.isGeometry) ) {

	    		nNormals = objGeometry.faces.length;

	    	} else {

	    		console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

	    	}

	    	//

	    	var geometry = new BufferGeometry();

	    	var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

	    	geometry.addAttribute( 'position', positions );

	    	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	    	//

	    	this.matrixAutoUpdate = false;
	    	this.update();

	    }

	    FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	    FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	    FaceNormalsHelper.prototype.update = ( function () {

	    	var v1 = new Vector3();
	    	var v2 = new Vector3();
	    	var normalMatrix = new Matrix3();

	    	return function update() {

	    		this.object.updateMatrixWorld( true );

	    		normalMatrix.getNormalMatrix( this.object.matrixWorld );

	    		var matrixWorld = this.object.matrixWorld;

	    		var position = this.geometry.attributes.position;

	    		//

	    		var objGeometry = this.object.geometry;

	    		var vertices = objGeometry.vertices;

	    		var faces = objGeometry.faces;

	    		var idx = 0;

	    		for ( var i = 0, l = faces.length; i < l; i ++ ) {

	    			var face = faces[ i ];

	    			var normal = face.normal;

	    			v1.copy( vertices[ face.a ] )
	    				.add( vertices[ face.b ] )
	    				.add( vertices[ face.c ] )
	    				.divideScalar( 3 )
	    				.applyMatrix4( matrixWorld );

	    			v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

	    			position.setXYZ( idx, v1.x, v1.y, v1.z );

	    			idx = idx + 1;

	    			position.setXYZ( idx, v2.x, v2.y, v2.z );

	    			idx = idx + 1;

	    		}

	    		position.needsUpdate = true;

	    		return this;

	    	};

	    }() );

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     * @author mrdoob / http://mrdoob.com/
	     * @author WestLangley / http://github.com/WestLangley
	     */

	    function DirectionalLightHelper( light, size ) {

	    	Object3D.call( this );

	    	this.light = light;
	    	this.light.updateMatrixWorld();

	    	this.matrix = light.matrixWorld;
	    	this.matrixAutoUpdate = false;

	    	if ( size === undefined ) size = 1;

	    	var geometry = new BufferGeometry();
	    	geometry.addAttribute( 'position', new Float32Attribute( [
	    		- size,   size, 0,
	    		  size,   size, 0,
	    		  size, - size, 0,
	    		- size, - size, 0,
	    		- size,   size, 0
	    	], 3 ) );

	    	var material = new LineBasicMaterial( { fog: false } );

	    	this.add( new Line( geometry, material ) );

	    	geometry = new BufferGeometry();
	    	geometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

	    	this.add( new Line( geometry, material ));

	    	this.update();

	    }

	    DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	    DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	    DirectionalLightHelper.prototype.dispose = function () {

	    	var lightPlane = this.children[ 0 ];
	    	var targetLine = this.children[ 1 ];

	    	lightPlane.geometry.dispose();
	    	lightPlane.material.dispose();
	    	targetLine.geometry.dispose();
	    	targetLine.material.dispose();

	    };

	    DirectionalLightHelper.prototype.update = function () {

	    	var v1 = new Vector3();
	    	var v2 = new Vector3();
	    	var v3 = new Vector3();

	    	return function update() {

	    		v1.setFromMatrixPosition( this.light.matrixWorld );
	    		v2.setFromMatrixPosition( this.light.target.matrixWorld );
	    		v3.subVectors( v2, v1 );

	    		var lightPlane = this.children[ 0 ];
	    		var targetLine = this.children[ 1 ];

	    		lightPlane.lookAt( v3 );
	    		lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	    		targetLine.lookAt( v3 );
	    		targetLine.scale.z = v3.length();

	    	};

	    }();

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     *
	     *	- shows frustum, line of sight and up of the camera
	     *	- suitable for fast updates
	     * 	- based on frustum visualization in lightgl.js shadowmap example
	     *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	     */

	    function CameraHelper( camera ) {

	    	var geometry = new Geometry();
	    	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

	    	var pointMap = {};

	    	// colors

	    	var hexFrustum = 0xffaa00;
	    	var hexCone = 0xff0000;
	    	var hexUp = 0x00aaff;
	    	var hexTarget = 0xffffff;
	    	var hexCross = 0x333333;

	    	// near

	    	addLine( "n1", "n2", hexFrustum );
	    	addLine( "n2", "n4", hexFrustum );
	    	addLine( "n4", "n3", hexFrustum );
	    	addLine( "n3", "n1", hexFrustum );

	    	// far

	    	addLine( "f1", "f2", hexFrustum );
	    	addLine( "f2", "f4", hexFrustum );
	    	addLine( "f4", "f3", hexFrustum );
	    	addLine( "f3", "f1", hexFrustum );

	    	// sides

	    	addLine( "n1", "f1", hexFrustum );
	    	addLine( "n2", "f2", hexFrustum );
	    	addLine( "n3", "f3", hexFrustum );
	    	addLine( "n4", "f4", hexFrustum );

	    	// cone

	    	addLine( "p", "n1", hexCone );
	    	addLine( "p", "n2", hexCone );
	    	addLine( "p", "n3", hexCone );
	    	addLine( "p", "n4", hexCone );

	    	// up

	    	addLine( "u1", "u2", hexUp );
	    	addLine( "u2", "u3", hexUp );
	    	addLine( "u3", "u1", hexUp );

	    	// target

	    	addLine( "c", "t", hexTarget );
	    	addLine( "p", "c", hexCross );

	    	// cross

	    	addLine( "cn1", "cn2", hexCross );
	    	addLine( "cn3", "cn4", hexCross );

	    	addLine( "cf1", "cf2", hexCross );
	    	addLine( "cf3", "cf4", hexCross );

	    	function addLine( a, b, hex ) {

	    		addPoint( a, hex );
	    		addPoint( b, hex );

	    	}

	    	function addPoint( id, hex ) {

	    		geometry.vertices.push( new Vector3() );
	    		geometry.colors.push( new Color( hex ) );

	    		if ( pointMap[ id ] === undefined ) {

	    			pointMap[ id ] = [];

	    		}

	    		pointMap[ id ].push( geometry.vertices.length - 1 );

	    	}

	    	LineSegments.call( this, geometry, material );

	    	this.camera = camera;
	    	if( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

	    	this.matrix = camera.matrixWorld;
	    	this.matrixAutoUpdate = false;

	    	this.pointMap = pointMap;

	    	this.update();

	    }

	    CameraHelper.prototype = Object.create( LineSegments.prototype );
	    CameraHelper.prototype.constructor = CameraHelper;

	    CameraHelper.prototype.update = function () {

	    	var geometry, pointMap;

	    	var vector = new Vector3();
	    	var camera = new Camera();

	    	function setPoint( point, x, y, z ) {

	    		vector.set( x, y, z ).unproject( camera );

	    		var points = pointMap[ point ];

	    		if ( points !== undefined ) {

	    			for ( var i = 0, il = points.length; i < il; i ++ ) {

	    				geometry.vertices[ points[ i ] ].copy( vector );

	    			}

	    		}

	    	}

	    	return function update() {

	    		geometry = this.geometry;
	    		pointMap = this.pointMap;

	    		var w = 1, h = 1;

	    		// we need just camera projection matrix
	    		// world matrix must be identity

	    		camera.projectionMatrix.copy( this.camera.projectionMatrix );

	    		// center / target

	    		setPoint( "c", 0, 0, - 1 );
	    		setPoint( "t", 0, 0,  1 );

	    		// near

	    		setPoint( "n1", - w, - h, - 1 );
	    		setPoint( "n2",   w, - h, - 1 );
	    		setPoint( "n3", - w,   h, - 1 );
	    		setPoint( "n4",   w,   h, - 1 );

	    		// far

	    		setPoint( "f1", - w, - h, 1 );
	    		setPoint( "f2",   w, - h, 1 );
	    		setPoint( "f3", - w,   h, 1 );
	    		setPoint( "f4",   w,   h, 1 );

	    		// up

	    		setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
	    		setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
	    		setPoint( "u3",         0, h * 2,   - 1 );

	    		// cross

	    		setPoint( "cf1", - w,   0, 1 );
	    		setPoint( "cf2",   w,   0, 1 );
	    		setPoint( "cf3",   0, - h, 1 );
	    		setPoint( "cf4",   0,   h, 1 );

	    		setPoint( "cn1", - w,   0, - 1 );
	    		setPoint( "cn2",   w,   0, - 1 );
	    		setPoint( "cn3",   0, - h, - 1 );
	    		setPoint( "cn4",   0,   h, - 1 );

	    		geometry.verticesNeedUpdate = true;

	    	};

	    }();

	    /**
	     * @author WestLangley / http://github.com/WestLangley
	     */

	    // a helper to show the world-axis-aligned bounding box for an object

	    function BoundingBoxHelper( object, hex ) {

	    	var color = ( hex !== undefined ) ? hex : 0x888888;

	    	this.object = object;

	    	this.box = new Box3();

	    	Mesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );

	    }

	    BoundingBoxHelper.prototype = Object.create( Mesh.prototype );
	    BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;

	    BoundingBoxHelper.prototype.update = function () {

	    	this.box.setFromObject( this.object );

	    	this.box.size( this.scale );

	    	this.box.getCenter( this.position );

	    };

	    /**
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function BoxHelper( object, color ) {

	    	if ( color === undefined ) color = 0xffff00;

	    	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
	    	var positions = new Float32Array( 8 * 3 );

	    	var geometry = new BufferGeometry();
	    	geometry.setIndex( new BufferAttribute( indices, 1 ) );
	    	geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

	    	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

	    	if ( object !== undefined ) {

	    		this.update( object );

	    	}

	    }

	    BoxHelper.prototype = Object.create( LineSegments.prototype );
	    BoxHelper.prototype.constructor = BoxHelper;

	    BoxHelper.prototype.update = ( function () {

	    	var box = new Box3();

	    	return function update( object ) {

	    		if ( (object && object.isBox3) ) {

	    			box.copy( object );

	    		} else {

	    			box.setFromObject( object );

	    		}

	    		if ( box.isEmpty() ) return;

	    		var min = box.min;
	    		var max = box.max;

	    		/*
	    		  5____4
	    		1/___0/|
	    		| 6__|_7
	    		2/___3/

	    		0: max.x, max.y, max.z
	    		1: min.x, max.y, max.z
	    		2: min.x, min.y, max.z
	    		3: max.x, min.y, max.z
	    		4: max.x, max.y, min.z
	    		5: min.x, max.y, min.z
	    		6: min.x, min.y, min.z
	    		7: max.x, min.y, min.z
	    		*/

	    		var position = this.geometry.attributes.position;
	    		var array = position.array;

	    		array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
	    		array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
	    		array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
	    		array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
	    		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
	    		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
	    		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
	    		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

	    		position.needsUpdate = true;

	    		this.geometry.computeBoundingSphere();

	    	};

	    } )();

	    var lineGeometry = new BufferGeometry();
	    lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

	    var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
	    coneGeometry.translate( 0, - 0.5, 0 );

	    function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

	    	// dir is assumed to be normalized

	    	Object3D.call( this );

	    	if ( color === undefined ) color = 0xffff00;
	    	if ( length === undefined ) length = 1;
	    	if ( headLength === undefined ) headLength = 0.2 * length;
	    	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	    	this.position.copy( origin );

	    	this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
	    	this.line.matrixAutoUpdate = false;
	    	this.add( this.line );

	    	this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
	    	this.cone.matrixAutoUpdate = false;
	    	this.add( this.cone );

	    	this.setDirection( dir );
	    	this.setLength( length, headLength, headWidth );

	    }

	    ArrowHelper.prototype = Object.create( Object3D.prototype );
	    ArrowHelper.prototype.constructor = ArrowHelper;

	    ArrowHelper.prototype.setDirection = ( function () {

	    	var axis = new Vector3();
	    	var radians;

	    	return function setDirection( dir ) {

	    		// dir is assumed to be normalized

	    		if ( dir.y > 0.99999 ) {

	    			this.quaternion.set( 0, 0, 0, 1 );

	    		} else if ( dir.y < - 0.99999 ) {

	    			this.quaternion.set( 1, 0, 0, 0 );

	    		} else {

	    			axis.set( dir.z, 0, - dir.x ).normalize();

	    			radians = Math.acos( dir.y );

	    			this.quaternion.setFromAxisAngle( axis, radians );

	    		}

	    	};

	    }() );

	    ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

	    	if ( headLength === undefined ) headLength = 0.2 * length;
	    	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	    	this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
	    	this.line.updateMatrix();

	    	this.cone.scale.set( headWidth, headLength, headWidth );
	    	this.cone.position.y = length;
	    	this.cone.updateMatrix();

	    };

	    ArrowHelper.prototype.setColor = function ( color ) {

	    	this.line.material.color.copy( color );
	    	this.cone.material.color.copy( color );

	    };

	    /**
	     * @author sroucheray / http://sroucheray.org/
	     * @author mrdoob / http://mrdoob.com/
	     */

	    function AxisHelper( size ) {

	    	size = size || 1;

	    	var vertices = new Float32Array( [
	    		0, 0, 0,  size, 0, 0,
	    		0, 0, 0,  0, size, 0,
	    		0, 0, 0,  0, 0, size
	    	] );

	    	var colors = new Float32Array( [
	    		1, 0, 0,  1, 0.6, 0,
	    		0, 1, 0,  0.6, 1, 0,
	    		0, 0, 1,  0, 0.6, 1
	    	] );

	    	var geometry = new BufferGeometry();
	    	geometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
	    	geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

	    	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	    	LineSegments.call( this, geometry, material );

	    }

	    AxisHelper.prototype = Object.create( LineSegments.prototype );
	    AxisHelper.prototype.constructor = AxisHelper;

	    /**
	     * @author zz85 https://github.com/zz85
	     *
	     * Centripetal CatmullRom Curve - which is useful for avoiding
	     * cusps and self-intersections in non-uniform catmull rom curves.
	     * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	     *
	     * curve.type accepts centripetal(default), chordal and catmullrom
	     * curve.tension is used for catmullrom which defaults to 0.5
	     */

	    exports.CatmullRomCurve3 = ( function() {

	    	var
	    		tmp = new Vector3(),
	    		px = new CubicPoly(),
	    		py = new CubicPoly(),
	    		pz = new CubicPoly();

	    	/*
	    	Based on an optimized c++ solution in
	    	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	    	 - http://ideone.com/NoEbVM

	    	This CubicPoly class could be used for reusing some variables and calculations,
	    	but for three.js curve use, it could be possible inlined and flatten into a single function call
	    	which can be placed in CurveUtils.
	    	*/

	    	function CubicPoly() {

	    	}

	    	/*
	    	 * Compute coefficients for a cubic polynomial
	    	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	    	 * such that
	    	 *   p(0) = x0, p(1) = x1
	    	 *  and
	    	 *   p'(0) = t0, p'(1) = t1.
	    	 */
	    	CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

	    		this.c0 = x0;
	    		this.c1 = t0;
	    		this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
	    		this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

	    	};

	    	CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

	    		// compute tangents when parameterized in [t1,t2]
	    		var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
	    		var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

	    		// rescale tangents for parametrization in [0,1]
	    		t1 *= dt1;
	    		t2 *= dt1;

	    		// initCubicPoly
	    		this.init( x1, x2, t1, t2 );

	    	};

	    	// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
	    	CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

	    		this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

	    	};

	    	CubicPoly.prototype.calc = function( t ) {

	    		var t2 = t * t;
	    		var t3 = t2 * t;
	    		return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

	    	};

	    	// Subclass Three.js curve
	    	return Curve.create(

	    		function ( p /* array of Vector3 */ ) {

	    			this.points = p || [];
	    			this.closed = false;

	    		},

	    		function ( t ) {

	    			var points = this.points,
	    				point, intPoint, weight, l;

	    			l = points.length;

	    			if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

	    			point = ( l - ( this.closed ? 0 : 1 ) ) * t;
	    			intPoint = Math.floor( point );
	    			weight = point - intPoint;

	    			if ( this.closed ) {

	    				intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

	    			} else if ( weight === 0 && intPoint === l - 1 ) {

	    				intPoint = l - 2;
	    				weight = 1;

	    			}

	    			var p0, p1, p2, p3; // 4 points

	    			if ( this.closed || intPoint > 0 ) {

	    				p0 = points[ ( intPoint - 1 ) % l ];

	    			} else {

	    				// extrapolate first point
	    				tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
	    				p0 = tmp;

	    			}

	    			p1 = points[ intPoint % l ];
	    			p2 = points[ ( intPoint + 1 ) % l ];

	    			if ( this.closed || intPoint + 2 < l ) {

	    				p3 = points[ ( intPoint + 2 ) % l ];

	    			} else {

	    				// extrapolate last point
	    				tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
	    				p3 = tmp;

	    			}

	    			if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

	    				// init Centripetal / Chordal Catmull-Rom
	    				var pow = this.type === 'chordal' ? 0.5 : 0.25;
	    				var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
	    				var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
	    				var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

	    				// safety check for repeated points
	    				if ( dt1 < 1e-4 ) dt1 = 1.0;
	    				if ( dt0 < 1e-4 ) dt0 = dt1;
	    				if ( dt2 < 1e-4 ) dt2 = dt1;

	    				px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
	    				py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
	    				pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

	    			} else if ( this.type === 'catmullrom' ) {

	    				var tension = this.tension !== undefined ? this.tension : 0.5;
	    				px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
	    				py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
	    				pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

	    			}

	    			var v = new Vector3(
	    				px.calc( weight ),
	    				py.calc( weight ),
	    				pz.calc( weight )
	    			);

	    			return v;

	    		}

	    	);

	    } )();

	    /**************************************************************
	     *	Closed Spline 3D curve
	     **************************************************************/


	    function ClosedSplineCurve3( points ) {

	    	console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );

	    	exports.CatmullRomCurve3.call( this, points );
	    	this.type = 'catmullrom';
	    	this.closed = true;

	    }

	    ClosedSplineCurve3.prototype = Object.create( exports.CatmullRomCurve3.prototype );

	    /**************************************************************
	     *	Spline 3D curve
	     **************************************************************/


	    var SplineCurve3 = Curve.create(

	    	function ( points /* array of Vector3 */ ) {

	    		console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
	    		this.points = ( points === undefined ) ? [] : points;

	    	},

	    	function ( t ) {

	    		var points = this.points;
	    		var point = ( points.length - 1 ) * t;

	    		var intPoint = Math.floor( point );
	    		var weight = point - intPoint;

	    		var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
	    		var point1 = points[ intPoint ];
	    		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
	    		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

	    		var interpolate = exports.CurveUtils.interpolate;

	    		return new Vector3(
	    			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
	    			interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
	    			interpolate( point0.z, point1.z, point2.z, point3.z, weight )
	    		);

	    	}

	    );

	    /**************************************************************
	     *	Cubic Bezier 3D curve
	     **************************************************************/

	    exports.CubicBezierCurve3 = Curve.create(

	    	function ( v0, v1, v2, v3 ) {

	    		this.v0 = v0;
	    		this.v1 = v1;
	    		this.v2 = v2;
	    		this.v3 = v3;

	    	},

	    	function ( t ) {

	    		var b3 = exports.ShapeUtils.b3;

	    		return new Vector3(
	    			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
	    			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
	    			b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
	    		);

	    	}

	    );

	    /**************************************************************
	     *	Quadratic Bezier 3D curve
	     **************************************************************/

	    exports.QuadraticBezierCurve3 = Curve.create(

	    	function ( v0, v1, v2 ) {

	    		this.v0 = v0;
	    		this.v1 = v1;
	    		this.v2 = v2;

	    	},

	    	function ( t ) {

	    		var b2 = exports.ShapeUtils.b2;		

	    		return new Vector3(
	    			b2( t, this.v0.x, this.v1.x, this.v2.x ),
	    			b2( t, this.v0.y, this.v1.y, this.v2.y ),
	    			b2( t, this.v0.z, this.v1.z, this.v2.z )
	    		);

	    	}

	    );

	    /**************************************************************
	     *	Line3D
	     **************************************************************/

	    exports.LineCurve3 = Curve.create(

	    	function ( v1, v2 ) {

	    		this.v1 = v1;
	    		this.v2 = v2;

	    	},

	    	function ( t ) {

	    		if ( t === 1 ) {

	    			return this.v2.clone();

	    		}

	    		var vector = new Vector3();

	    		vector.subVectors( this.v2, this.v1 ); // diff
	    		vector.multiplyScalar( t );
	    		vector.add( this.v1 );

	    		return vector;

	    	}

	    );

	    /**************************************************************
	     *	Arc curve
	     **************************************************************/

	    function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	    	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	    }

	    ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	    ArcCurve.prototype.constructor = ArcCurve;

	    /**
	     * @author alteredq / http://alteredqualia.com/
	     */

	    exports.SceneUtils = {

	    	createMultiMaterialObject: function ( geometry, materials ) {

	    		var group = new Group();

	    		for ( var i = 0, l = materials.length; i < l; i ++ ) {

	    			group.add( new Mesh( geometry, materials[ i ] ) );

	    		}

	    		return group;

	    	},

	    	detach: function ( child, parent, scene ) {

	    		child.applyMatrix( parent.matrixWorld );
	    		parent.remove( child );
	    		scene.add( child );

	    	},

	    	attach: function ( child, scene, parent ) {

	    		var matrixWorldInverse = new Matrix4();
	    		matrixWorldInverse.getInverse( parent.matrixWorld );
	    		child.applyMatrix( matrixWorldInverse );

	    		scene.remove( child );
	    		parent.add( child );

	    	}

	    };

	    function Face4 ( a, b, c, d, normal, color, materialIndex ) {
	    	console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
	    	return new Face3( a, b, c, normal, color, materialIndex );
	    }

	    var LineStrip = 0;

	    var LinePieces = 1;

	    function PointCloud ( geometry, material ) {
	    	console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
	    	return new Points( geometry, material );
	    }

	    function ParticleSystem ( geometry, material ) {
	    	console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
	    	return new Points( geometry, material );
	    }

	    function PointCloudMaterial ( parameters ) {
	    	console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
	    	return new PointsMaterial( parameters );
	    }

	    function ParticleBasicMaterial ( parameters ) {
	    	console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
	    	return new PointsMaterial( parameters );
	    }

	    function ParticleSystemMaterial ( parameters ) {
	    	console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
	    	return new PointsMaterial( parameters );
	    }

	    function Vertex ( x, y, z ) {
	    	console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
	    	return new Vector3( x, y, z );
	    }

	    //

	    function EdgesHelper( object, hex ) {
	    	console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
	    	return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	    }

	    function WireframeHelper( object, hex ) {
	    	console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
	    	return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	    }

	    //

	    Object.assign( Box2.prototype, {
	    	center: function ( optionalTarget ) {
	    		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
	    		return this.getCenter( optionalTarget );
	    	},
	    	empty: function () {
	    		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
	    		return this.isEmpty();
	    	},
	    	isIntersectionBox: function ( box ) {
	    		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
	    		return this.intersectsBox( box );
	    	},
	    	size: function ( optionalTarget ) {
	    		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
	    		return this.getSize( optionalTarget );
	    	}
	    } );

	    Object.assign( Box3.prototype, {
	    	center: function ( optionalTarget ) {
	    		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
	    		return this.getCenter( optionalTarget );
	    	},
	    	empty: function () {
	    		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
	    		return this.isEmpty();
	    	},
	    	isIntersectionBox: function ( box ) {
	    		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
	    		return this.intersectsBox( box );
	    	},
	    	isIntersectionSphere: function ( sphere ) {
	    		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
	    		return this.intersectsSphere( sphere );
	    	},
	    	size: function ( optionalTarget ) {
	    		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
	    		return this.getSize( optionalTarget );
	    	}
	    } );

	    Object.assign( Line3.prototype, {
	    	center: function ( optionalTarget ) {
	    		console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
	    		return this.getCenter( optionalTarget );
	    	}
	    } );

	    Object.assign( Matrix3.prototype, {
	    	multiplyVector3: function ( vector ) {
	    		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
	    		return vector.applyMatrix3( this );
	    	},
	    	multiplyVector3Array: function ( a ) {
	    		console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
	    		return this.applyToVector3Array( a );
	    	}
	    } );

	    Object.assign( Matrix4.prototype, {
	    	extractPosition: function ( m ) {
	    		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
	    		return this.copyPosition( m );
	    	},
	    	setRotationFromQuaternion: function ( q ) {
	    		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
	    		return this.makeRotationFromQuaternion( q );
	    	},
	    	multiplyVector3: function ( vector ) {
	    		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
	    		return vector.applyProjection( this );
	    	},
	    	multiplyVector4: function ( vector ) {
	    		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
	    		return vector.applyMatrix4( this );
	    	},
	    	multiplyVector3Array: function ( a ) {
	    		console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
	    		return this.applyToVector3Array( a );
	    	},
	    	rotateAxis: function ( v ) {
	    		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
	    		v.transformDirection( this );
	    	},
	    	crossVector: function ( vector ) {
	    		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
	    		return vector.applyMatrix4( this );
	    	},
	    	translate: function ( v ) {
	    		console.error( 'THREE.Matrix4: .translate() has been removed.' );
	    	},
	    	rotateX: function ( angle ) {
	    		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
	    	},
	    	rotateY: function ( angle ) {
	    		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
	    	},
	    	rotateZ: function ( angle ) {
	    		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
	    	},
	    	rotateByAxis: function ( axis, angle ) {
	    		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
	    	}
	    } );

	    Object.assign( Plane.prototype, {
	    	isIntersectionLine: function ( line ) {
	    		console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
	    		return this.intersectsLine( line );
	    	}
	    } );

	    Object.assign( Quaternion.prototype, {
	    	multiplyVector3: function ( vector ) {
	    		console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
	    		return vector.applyQuaternion( this );
	    	}
	    } );

	    Object.assign( Ray.prototype, {
	    	isIntersectionBox: function ( box ) {
	    		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
	    		return this.intersectsBox( box );
	    	},
	    	isIntersectionPlane: function ( plane ) {
	    		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
	    		return this.intersectsPlane( plane );
	    	},
	    	isIntersectionSphere: function ( sphere ) {
	    		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
	    		return this.intersectsSphere( sphere );
	    	}
	    } );

	    Object.assign( Shape.prototype, {
	    	extrude: function ( options ) {
	    		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
	    		return new ExtrudeGeometry( this, options );
	    	},
	    	makeGeometry: function ( options ) {
	    		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
	    		return new ShapeGeometry( this, options );
	    	}
	    } );

	    Object.assign( Vector3.prototype, {
	    	setEulerFromRotationMatrix: function () {
	    		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
	    	},
	    	setEulerFromQuaternion: function () {
	    		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
	    	},
	    	getPositionFromMatrix: function ( m ) {
	    		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
	    		return this.setFromMatrixPosition( m );
	    	},
	    	getScaleFromMatrix: function ( m ) {
	    		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
	    		return this.setFromMatrixScale( m );
	    	},
	    	getColumnFromMatrix: function ( index, matrix ) {
	    		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
	    		return this.setFromMatrixColumn( matrix, index );
	    	}
	    } );

	    //

	    Object.assign( Object3D.prototype, {
	    	getChildByName: function ( name ) {
	    		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
	    		return this.getObjectByName( name );
	    	},
	    	renderDepth: function ( value ) {
	    		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
	    	},
	    	translate: function ( distance, axis ) {
	    		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
	    		return this.translateOnAxis( axis, distance );
	    	}
	    } );

	    Object.defineProperties( Object3D.prototype, {
	    	eulerOrder: {
	    		get: function () {
	    			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
	    			return this.rotation.order;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
	    			this.rotation.order = value;
	    		}
	    	},
	    	useQuaternion: {
	    		get: function () {
	    			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	    		}
	    	}
	    } );

	    Object.defineProperties( LOD.prototype, {
	    	objects: {
	    		get: function () {
	    			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
	    			return this.levels;
	    		}
	    	}
	    } );

	    //

	    PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

	    	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
	    			"Use .setFocalLength and .filmGauge for a photographic setup." );

	    	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
	    	this.setFocalLength( focalLength );

	    };

	    //

	    Object.defineProperties( Light.prototype, {
	    	onlyShadow: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .onlyShadow has been removed.' );
	    		}
	    	},
	    	shadowCameraFov: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
	    			this.shadow.camera.fov = value;
	    		}
	    	},
	    	shadowCameraLeft: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
	    			this.shadow.camera.left = value;
	    		}
	    	},
	    	shadowCameraRight: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
	    			this.shadow.camera.right = value;
	    		}
	    	},
	    	shadowCameraTop: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
	    			this.shadow.camera.top = value;
	    		}
	    	},
	    	shadowCameraBottom: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
	    			this.shadow.camera.bottom = value;
	    		}
	    	},
	    	shadowCameraNear: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
	    			this.shadow.camera.near = value;
	    		}
	    	},
	    	shadowCameraFar: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
	    			this.shadow.camera.far = value;
	    		}
	    	},
	    	shadowCameraVisible: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
	    		}
	    	},
	    	shadowBias: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
	    			this.shadow.bias = value;
	    		}
	    	},
	    	shadowDarkness: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
	    		}
	    	},
	    	shadowMapWidth: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
	    			this.shadow.mapSize.width = value;
	    		}
	    	},
	    	shadowMapHeight: {
	    		set: function ( value ) {
	    			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
	    			this.shadow.mapSize.height = value;
	    		}
	    	}
	    } );

	    //

	    Object.defineProperties( BufferAttribute.prototype, {
	    	length: {
	    		get: function () {
	    			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
	    			return this.array.length;
	    		}
	    	}
	    } );

	    Object.assign( BufferGeometry.prototype, {
	    	addIndex: function ( index ) {
	    		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
	    		this.setIndex( index );
	    	},
	    	addDrawCall: function ( start, count, indexOffset ) {
	    		if ( indexOffset !== undefined ) {
	    			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
	    		}
	    		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
	    		this.addGroup( start, count );
	    	},
	    	clearDrawCalls: function () {
	    		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
	    		this.clearGroups();
	    	},
	    	computeTangents: function () {
	    		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
	    	},
	    	computeOffsets: function () {
	    		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
	    	}
	    } );

	    Object.defineProperties( BufferGeometry.prototype, {
	    	drawcalls: {
	    		get: function () {
	    			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
	    			return this.groups;
	    		}
	    	},
	    	offsets: {
	    		get: function () {
	    			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
	    			return this.groups;
	    		}
	    	}
	    } );

	    //

	    Object.defineProperties( Material.prototype, {
	    	wrapAround: {
	    		get: function () {
	    			console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
	    		}
	    	},
	    	wrapRGB: {
	    		get: function () {
	    			console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
	    			return new Color();
	    		}
	    	}
	    } );

	    Object.defineProperties( MeshPhongMaterial.prototype, {
	    	metal: {
	    		get: function () {
	    			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
	    			return false;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
	    		}
	    	}
	    } );

	    Object.defineProperties( ShaderMaterial.prototype, {
	    	derivatives: {
	    		get: function () {
	    			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
	    			return this.extensions.derivatives;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
	    			this.extensions.derivatives = value;
	    		}
	    	}
	    } );

	    //

	    EventDispatcher.prototype = Object.assign( Object.create( {

	    	// Note: Extra base ensures these properties are not 'assign'ed.

	    	constructor: EventDispatcher,

	    	apply: function ( target ) {

	    		console.warn( "THREE.EventDispatcher: .apply is deprecated, " +
	    				"just inherit or Object.assign the prototype to mix-in." );

	    		Object.assign( target, this );

	    	}

	    } ), EventDispatcher.prototype );

	    //

	    Object.assign( WebGLRenderer.prototype, {
	    	supportsFloatTextures: function () {
	    		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
	    		return this.extensions.get( 'OES_texture_float' );
	    	},
	    	supportsHalfFloatTextures: function () {
	    		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
	    		return this.extensions.get( 'OES_texture_half_float' );
	    	},
	    	supportsStandardDerivatives: function () {
	    		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
	    		return this.extensions.get( 'OES_standard_derivatives' );
	    	},
	    	supportsCompressedTextureS3TC: function () {
	    		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
	    		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
	    	},
	    	supportsCompressedTexturePVRTC: function () {
	    		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
	    		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	    	},
	    	supportsBlendMinMax: function () {
	    		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
	    		return this.extensions.get( 'EXT_blend_minmax' );
	    	},
	    	supportsVertexTextures: function () {
	    		return this.capabilities.vertexTextures;
	    	},
	    	supportsInstancedArrays: function () {
	    		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
	    		return this.extensions.get( 'ANGLE_instanced_arrays' );
	    	},
	    	enableScissorTest: function ( boolean ) {
	    		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
	    		this.setScissorTest( boolean );
	    	},
	    	initMaterial: function () {
	    		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
	    	},
	    	addPrePlugin: function () {
	    		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
	    	},
	    	addPostPlugin: function () {
	    		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
	    	},
	    	updateShadowMap: function () {
	    		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
	    	}
	    } );

	    Object.defineProperties( WebGLRenderer.prototype, {
	    	shadowMapEnabled: {
	    		get: function () {
	    			return this.shadowMap.enabled;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
	    			this.shadowMap.enabled = value;
	    		}
	    	},
	    	shadowMapType: {
	    		get: function () {
	    			return this.shadowMap.type;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
	    			this.shadowMap.type = value;
	    		}
	    	},
	    	shadowMapCullFace: {
	    		get: function () {
	    			return this.shadowMap.cullFace;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
	    			this.shadowMap.cullFace = value;
	    		}
	    	}
	    } );

	    Object.defineProperties( WebGLShadowMap.prototype, {
	    	cullFace: {
	    		get: function () {
	    			return this.renderReverseSided ? CullFaceFront : CullFaceBack;
	    		},
	    		set: function ( cullFace ) {
	    			var value = ( cullFace !== CullFaceBack );
	    			console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
	    			this.renderReverseSided = value;
	    		}
	    	}
	    } );

	    //

	    Object.defineProperties( WebGLRenderTarget.prototype, {
	    	wrapS: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
	    			return this.texture.wrapS;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
	    			this.texture.wrapS = value;
	    		}
	    	},
	    	wrapT: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
	    			return this.texture.wrapT;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
	    			this.texture.wrapT = value;
	    		}
	    	},
	    	magFilter: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
	    			return this.texture.magFilter;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
	    			this.texture.magFilter = value;
	    		}
	    	},
	    	minFilter: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
	    			return this.texture.minFilter;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
	    			this.texture.minFilter = value;
	    		}
	    	},
	    	anisotropy: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
	    			return this.texture.anisotropy;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
	    			this.texture.anisotropy = value;
	    		}
	    	},
	    	offset: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
	    			return this.texture.offset;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
	    			this.texture.offset = value;
	    		}
	    	},
	    	repeat: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
	    			return this.texture.repeat;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
	    			this.texture.repeat = value;
	    		}
	    	},
	    	format: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
	    			return this.texture.format;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
	    			this.texture.format = value;
	    		}
	    	},
	    	type: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
	    			return this.texture.type;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
	    			this.texture.type = value;
	    		}
	    	},
	    	generateMipmaps: {
	    		get: function () {
	    			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
	    			return this.texture.generateMipmaps;
	    		},
	    		set: function ( value ) {
	    			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
	    			this.texture.generateMipmaps = value;
	    		}
	    	}
	    } );

	    //

	    Object.assign( Audio.prototype, {
	    	load: function ( file ) {
	    		console.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );
	    		var scope = this;
	    		var audioLoader = new AudioLoader();
	    		audioLoader.load( file, function ( buffer ) {
	    			scope.setBuffer( buffer );
	    		} );
	    		return this;
	    	}
	    } );

	    Object.assign( AudioAnalyser.prototype, {
	    	getData: function ( file ) {
	    		console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
	    		return this.getFrequencyData();
	    	}
	    } );

	    //

	    var GeometryUtils = {

	    	merge: function ( geometry1, geometry2, materialIndexOffset ) {

	    		console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

	    		var matrix;

	    		if ( geometry2.isMesh ) {

	    			geometry2.matrixAutoUpdate && geometry2.updateMatrix();

	    			matrix = geometry2.matrix;
	    			geometry2 = geometry2.geometry;

	    		}

	    		geometry1.merge( geometry2, matrix, materialIndexOffset );

	    	},

	    	center: function ( geometry ) {

	    		console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
	    		return geometry.center();

	    	}

	    };

	    var ImageUtils = {

	    	crossOrigin: undefined,

	    	loadTexture: function ( url, mapping, onLoad, onError ) {

	    		console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

	    		var loader = new TextureLoader();
	    		loader.setCrossOrigin( this.crossOrigin );

	    		var texture = loader.load( url, onLoad, undefined, onError );

	    		if ( mapping ) texture.mapping = mapping;

	    		return texture;

	    	},

	    	loadTextureCube: function ( urls, mapping, onLoad, onError ) {

	    		console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

	    		var loader = new CubeTextureLoader();
	    		loader.setCrossOrigin( this.crossOrigin );

	    		var texture = loader.load( urls, onLoad, undefined, onError );

	    		if ( mapping ) texture.mapping = mapping;

	    		return texture;

	    	},

	    	loadCompressedTexture: function () {

	    		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

	    	},

	    	loadCompressedTextureCube: function () {

	    		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

	    	}

	    };

	    //

	    function Projector () {

	    	console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

	    	this.projectVector = function ( vector, camera ) {

	    		console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
	    		vector.project( camera );

	    	};

	    	this.unprojectVector = function ( vector, camera ) {

	    		console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
	    		vector.unproject( camera );

	    	};

	    	this.pickingRay = function ( vector, camera ) {

	    		console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

	    	};

	    }

	    //

	    function CanvasRenderer () {

	    	console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

	    	this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	    	this.clear = function () {};
	    	this.render = function () {};
	    	this.setClearColor = function () {};
	    	this.setSize = function () {};

	    }

	    Object.defineProperty( exports, 'AudioContext', {
	    	get: function () {
	    		return exports.getAudioContext();
	    	}
	    });

	    exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	    exports.WebGLRenderTarget = WebGLRenderTarget;
	    exports.WebGLRenderer = WebGLRenderer;
	    exports.ShaderLib = ShaderLib;
	    exports.UniformsLib = UniformsLib;
	    exports.ShaderChunk = ShaderChunk;
	    exports.FogExp2 = FogExp2;
	    exports.Fog = Fog;
	    exports.Scene = Scene;
	    exports.LensFlare = LensFlare;
	    exports.Sprite = Sprite;
	    exports.LOD = LOD;
	    exports.SkinnedMesh = SkinnedMesh;
	    exports.Skeleton = Skeleton;
	    exports.Bone = Bone;
	    exports.Mesh = Mesh;
	    exports.LineSegments = LineSegments;
	    exports.Line = Line;
	    exports.Points = Points;
	    exports.Group = Group;
	    exports.VideoTexture = VideoTexture;
	    exports.DataTexture = DataTexture;
	    exports.CompressedTexture = CompressedTexture;
	    exports.CubeTexture = CubeTexture;
	    exports.CanvasTexture = CanvasTexture;
	    exports.DepthTexture = DepthTexture;
	    exports.TextureIdCount = TextureIdCount;
	    exports.Texture = Texture;
	    exports.MaterialIdCount = MaterialIdCount;
	    exports.CompressedTextureLoader = CompressedTextureLoader;
	    exports.BinaryTextureLoader = BinaryTextureLoader;
	    exports.DataTextureLoader = DataTextureLoader;
	    exports.CubeTextureLoader = CubeTextureLoader;
	    exports.TextureLoader = TextureLoader;
	    exports.ObjectLoader = ObjectLoader;
	    exports.MaterialLoader = MaterialLoader;
	    exports.BufferGeometryLoader = BufferGeometryLoader;
	    exports.LoadingManager = LoadingManager;
	    exports.JSONLoader = JSONLoader;
	    exports.ImageLoader = ImageLoader;
	    exports.FontLoader = FontLoader;
	    exports.XHRLoader = XHRLoader;
	    exports.Loader = Loader;
	    exports.AudioLoader = AudioLoader;
	    exports.SpotLightShadow = SpotLightShadow;
	    exports.SpotLight = SpotLight;
	    exports.PointLight = PointLight;
	    exports.HemisphereLight = HemisphereLight;
	    exports.DirectionalLightShadow = DirectionalLightShadow;
	    exports.DirectionalLight = DirectionalLight;
	    exports.AmbientLight = AmbientLight;
	    exports.LightShadow = LightShadow;
	    exports.Light = Light;
	    exports.StereoCamera = StereoCamera;
	    exports.PerspectiveCamera = PerspectiveCamera;
	    exports.OrthographicCamera = OrthographicCamera;
	    exports.CubeCamera = CubeCamera;
	    exports.Camera = Camera;
	    exports.AudioListener = AudioListener;
	    exports.PositionalAudio = PositionalAudio;
	    exports.getAudioContext = getAudioContext;
	    exports.AudioAnalyser = AudioAnalyser;
	    exports.Audio = Audio;
	    exports.VectorKeyframeTrack = VectorKeyframeTrack;
	    exports.StringKeyframeTrack = StringKeyframeTrack;
	    exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	    exports.NumberKeyframeTrack = NumberKeyframeTrack;
	    exports.ColorKeyframeTrack = ColorKeyframeTrack;
	    exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	    exports.PropertyMixer = PropertyMixer;
	    exports.PropertyBinding = PropertyBinding;
	    exports.KeyframeTrack = KeyframeTrack;
	    exports.AnimationObjectGroup = AnimationObjectGroup;
	    exports.AnimationMixer = AnimationMixer;
	    exports.AnimationClip = AnimationClip;
	    exports.Uniform = Uniform;
	    exports.InstancedBufferGeometry = InstancedBufferGeometry;
	    exports.BufferGeometry = BufferGeometry;
	    exports.GeometryIdCount = GeometryIdCount;
	    exports.Geometry = Geometry;
	    exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	    exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	    exports.InterleavedBuffer = InterleavedBuffer;
	    exports.InstancedBufferAttribute = InstancedBufferAttribute;
	    exports.DynamicBufferAttribute = DynamicBufferAttribute;
	    exports.Float64Attribute = Float64Attribute;
	    exports.Float32Attribute = Float32Attribute;
	    exports.Uint32Attribute = Uint32Attribute;
	    exports.Int32Attribute = Int32Attribute;
	    exports.Uint16Attribute = Uint16Attribute;
	    exports.Int16Attribute = Int16Attribute;
	    exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	    exports.Uint8Attribute = Uint8Attribute;
	    exports.Int8Attribute = Int8Attribute;
	    exports.BufferAttribute = BufferAttribute;
	    exports.Face3 = Face3;
	    exports.Object3DIdCount = Object3DIdCount;
	    exports.Object3D = Object3D;
	    exports.Raycaster = Raycaster;
	    exports.Layers = Layers;
	    exports.EventDispatcher = EventDispatcher;
	    exports.Clock = Clock;
	    exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	    exports.LinearInterpolant = LinearInterpolant;
	    exports.DiscreteInterpolant = DiscreteInterpolant;
	    exports.CubicInterpolant = CubicInterpolant;
	    exports.Interpolant = Interpolant;
	    exports.Triangle = Triangle;
	    exports.Spline = Spline;
	    exports.Spherical = Spherical;
	    exports.Plane = Plane;
	    exports.Frustum = Frustum;
	    exports.Sphere = Sphere;
	    exports.Ray = Ray;
	    exports.Matrix4 = Matrix4;
	    exports.Matrix3 = Matrix3;
	    exports.Box3 = Box3;
	    exports.Box2 = Box2;
	    exports.Line3 = Line3;
	    exports.Euler = Euler;
	    exports.Vector4 = Vector4;
	    exports.Vector3 = Vector3;
	    exports.Vector2 = Vector2;
	    exports.Quaternion = Quaternion;
	    exports.Color = Color;
	    exports.MorphBlendMesh = MorphBlendMesh;
	    exports.ImmediateRenderObject = ImmediateRenderObject;
	    exports.VertexNormalsHelper = VertexNormalsHelper;
	    exports.SpotLightHelper = SpotLightHelper;
	    exports.SkeletonHelper = SkeletonHelper;
	    exports.PointLightHelper = PointLightHelper;
	    exports.HemisphereLightHelper = HemisphereLightHelper;
	    exports.GridHelper = GridHelper;
	    exports.FaceNormalsHelper = FaceNormalsHelper;
	    exports.DirectionalLightHelper = DirectionalLightHelper;
	    exports.CameraHelper = CameraHelper;
	    exports.BoundingBoxHelper = BoundingBoxHelper;
	    exports.BoxHelper = BoxHelper;
	    exports.ArrowHelper = ArrowHelper;
	    exports.AxisHelper = AxisHelper;
	    exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	    exports.SplineCurve3 = SplineCurve3;
	    exports.ArcCurve = ArcCurve;
	    exports.EllipseCurve = EllipseCurve;
	    exports.SplineCurve = SplineCurve;
	    exports.CubicBezierCurve = CubicBezierCurve;
	    exports.QuadraticBezierCurve = QuadraticBezierCurve;
	    exports.LineCurve = LineCurve;
	    exports.Shape = Shape;
	    exports.ShapePath = ShapePath;
	    exports.Path = Path;
	    exports.Font = Font;
	    exports.CurvePath = CurvePath;
	    exports.Curve = Curve;
	    exports.WireframeGeometry = WireframeGeometry;
	    exports.ParametricGeometry = ParametricGeometry;
	    exports.TetrahedronGeometry = TetrahedronGeometry;
	    exports.OctahedronGeometry = OctahedronGeometry;
	    exports.IcosahedronGeometry = IcosahedronGeometry;
	    exports.DodecahedronGeometry = DodecahedronGeometry;
	    exports.PolyhedronGeometry = PolyhedronGeometry;
	    exports.TubeGeometry = TubeGeometry;
	    exports.TorusKnotGeometry = TorusKnotGeometry;
	    exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	    exports.TorusGeometry = TorusGeometry;
	    exports.TorusBufferGeometry = TorusBufferGeometry;
	    exports.TextGeometry = TextGeometry;
	    exports.SphereBufferGeometry = SphereBufferGeometry;
	    exports.SphereGeometry = SphereGeometry;
	    exports.RingGeometry = RingGeometry;
	    exports.RingBufferGeometry = RingBufferGeometry;
	    exports.PlaneBufferGeometry = PlaneBufferGeometry;
	    exports.PlaneGeometry = PlaneGeometry;
	    exports.LatheGeometry = LatheGeometry;
	    exports.LatheBufferGeometry = LatheBufferGeometry;
	    exports.ShapeGeometry = ShapeGeometry;
	    exports.ExtrudeGeometry = ExtrudeGeometry;
	    exports.EdgesGeometry = EdgesGeometry;
	    exports.ConeGeometry = ConeGeometry;
	    exports.ConeBufferGeometry = ConeBufferGeometry;
	    exports.CylinderGeometry = CylinderGeometry;
	    exports.CylinderBufferGeometry = CylinderBufferGeometry;
	    exports.CircleBufferGeometry = CircleBufferGeometry;
	    exports.CircleGeometry = CircleGeometry;
	    exports.BoxBufferGeometry = BoxBufferGeometry;
	    exports.BoxGeometry = BoxGeometry;
	    exports.ShadowMaterial = ShadowMaterial;
	    exports.SpriteMaterial = SpriteMaterial;
	    exports.RawShaderMaterial = RawShaderMaterial;
	    exports.ShaderMaterial = ShaderMaterial;
	    exports.PointsMaterial = PointsMaterial;
	    exports.MultiMaterial = MultiMaterial;
	    exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	    exports.MeshStandardMaterial = MeshStandardMaterial;
	    exports.MeshPhongMaterial = MeshPhongMaterial;
	    exports.MeshNormalMaterial = MeshNormalMaterial;
	    exports.MeshLambertMaterial = MeshLambertMaterial;
	    exports.MeshDepthMaterial = MeshDepthMaterial;
	    exports.MeshBasicMaterial = MeshBasicMaterial;
	    exports.LineDashedMaterial = LineDashedMaterial;
	    exports.LineBasicMaterial = LineBasicMaterial;
	    exports.Material = Material;
	    exports.REVISION = REVISION;
	    exports.MOUSE = MOUSE;
	    exports.CullFaceNone = CullFaceNone;
	    exports.CullFaceBack = CullFaceBack;
	    exports.CullFaceFront = CullFaceFront;
	    exports.CullFaceFrontBack = CullFaceFrontBack;
	    exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	    exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	    exports.BasicShadowMap = BasicShadowMap;
	    exports.PCFShadowMap = PCFShadowMap;
	    exports.PCFSoftShadowMap = PCFSoftShadowMap;
	    exports.FrontSide = FrontSide;
	    exports.BackSide = BackSide;
	    exports.DoubleSide = DoubleSide;
	    exports.FlatShading = FlatShading;
	    exports.SmoothShading = SmoothShading;
	    exports.NoColors = NoColors;
	    exports.FaceColors = FaceColors;
	    exports.VertexColors = VertexColors;
	    exports.NoBlending = NoBlending;
	    exports.NormalBlending = NormalBlending;
	    exports.AdditiveBlending = AdditiveBlending;
	    exports.SubtractiveBlending = SubtractiveBlending;
	    exports.MultiplyBlending = MultiplyBlending;
	    exports.CustomBlending = CustomBlending;
	    exports.BlendingMode = BlendingMode;
	    exports.AddEquation = AddEquation;
	    exports.SubtractEquation = SubtractEquation;
	    exports.ReverseSubtractEquation = ReverseSubtractEquation;
	    exports.MinEquation = MinEquation;
	    exports.MaxEquation = MaxEquation;
	    exports.ZeroFactor = ZeroFactor;
	    exports.OneFactor = OneFactor;
	    exports.SrcColorFactor = SrcColorFactor;
	    exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	    exports.SrcAlphaFactor = SrcAlphaFactor;
	    exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	    exports.DstAlphaFactor = DstAlphaFactor;
	    exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	    exports.DstColorFactor = DstColorFactor;
	    exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	    exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	    exports.NeverDepth = NeverDepth;
	    exports.AlwaysDepth = AlwaysDepth;
	    exports.LessDepth = LessDepth;
	    exports.LessEqualDepth = LessEqualDepth;
	    exports.EqualDepth = EqualDepth;
	    exports.GreaterEqualDepth = GreaterEqualDepth;
	    exports.GreaterDepth = GreaterDepth;
	    exports.NotEqualDepth = NotEqualDepth;
	    exports.MultiplyOperation = MultiplyOperation;
	    exports.MixOperation = MixOperation;
	    exports.AddOperation = AddOperation;
	    exports.NoToneMapping = NoToneMapping;
	    exports.LinearToneMapping = LinearToneMapping;
	    exports.ReinhardToneMapping = ReinhardToneMapping;
	    exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	    exports.CineonToneMapping = CineonToneMapping;
	    exports.UVMapping = UVMapping;
	    exports.CubeReflectionMapping = CubeReflectionMapping;
	    exports.CubeRefractionMapping = CubeRefractionMapping;
	    exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	    exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	    exports.SphericalReflectionMapping = SphericalReflectionMapping;
	    exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	    exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	    exports.TextureMapping = TextureMapping;
	    exports.RepeatWrapping = RepeatWrapping;
	    exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	    exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	    exports.TextureWrapping = TextureWrapping;
	    exports.NearestFilter = NearestFilter;
	    exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	    exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	    exports.LinearFilter = LinearFilter;
	    exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	    exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	    exports.TextureFilter = TextureFilter;
	    exports.UnsignedByteType = UnsignedByteType;
	    exports.ByteType = ByteType;
	    exports.ShortType = ShortType;
	    exports.UnsignedShortType = UnsignedShortType;
	    exports.IntType = IntType;
	    exports.UnsignedIntType = UnsignedIntType;
	    exports.FloatType = FloatType;
	    exports.HalfFloatType = HalfFloatType;
	    exports.UnsignedShort4444Type = UnsignedShort4444Type;
	    exports.UnsignedShort5551Type = UnsignedShort5551Type;
	    exports.UnsignedShort565Type = UnsignedShort565Type;
	    exports.UnsignedInt248Type = UnsignedInt248Type;
	    exports.AlphaFormat = AlphaFormat;
	    exports.RGBFormat = RGBFormat;
	    exports.RGBAFormat = RGBAFormat;
	    exports.LuminanceFormat = LuminanceFormat;
	    exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	    exports.RGBEFormat = RGBEFormat;
	    exports.DepthFormat = DepthFormat;
	    exports.DepthStencilFormat = DepthStencilFormat;
	    exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	    exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	    exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	    exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	    exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	    exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	    exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	    exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	    exports.RGB_ETC1_Format = RGB_ETC1_Format;
	    exports.LoopOnce = LoopOnce;
	    exports.LoopRepeat = LoopRepeat;
	    exports.LoopPingPong = LoopPingPong;
	    exports.InterpolateDiscrete = InterpolateDiscrete;
	    exports.InterpolateLinear = InterpolateLinear;
	    exports.InterpolateSmooth = InterpolateSmooth;
	    exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	    exports.ZeroSlopeEnding = ZeroSlopeEnding;
	    exports.WrapAroundEnding = WrapAroundEnding;
	    exports.TrianglesDrawMode = TrianglesDrawMode;
	    exports.TriangleStripDrawMode = TriangleStripDrawMode;
	    exports.TriangleFanDrawMode = TriangleFanDrawMode;
	    exports.LinearEncoding = LinearEncoding;
	    exports.sRGBEncoding = sRGBEncoding;
	    exports.GammaEncoding = GammaEncoding;
	    exports.RGBEEncoding = RGBEEncoding;
	    exports.LogLuvEncoding = LogLuvEncoding;
	    exports.RGBM7Encoding = RGBM7Encoding;
	    exports.RGBM16Encoding = RGBM16Encoding;
	    exports.RGBDEncoding = RGBDEncoding;
	    exports.BasicDepthPacking = BasicDepthPacking;
	    exports.RGBADepthPacking = RGBADepthPacking;
	    exports.CubeGeometry = BoxGeometry;
	    exports.Face4 = Face4;
	    exports.LineStrip = LineStrip;
	    exports.LinePieces = LinePieces;
	    exports.MeshFaceMaterial = MultiMaterial;
	    exports.PointCloud = PointCloud;
	    exports.Particle = Sprite;
	    exports.ParticleSystem = ParticleSystem;
	    exports.PointCloudMaterial = PointCloudMaterial;
	    exports.ParticleBasicMaterial = ParticleBasicMaterial;
	    exports.ParticleSystemMaterial = ParticleSystemMaterial;
	    exports.Vertex = Vertex;
	    exports.EdgesHelper = EdgesHelper;
	    exports.WireframeHelper = WireframeHelper;
	    exports.GeometryUtils = GeometryUtils;
	    exports.ImageUtils = ImageUtils;
	    exports.Projector = Projector;
	    exports.CanvasRenderer = CanvasRenderer;

	    Object.defineProperty(exports, '__esModule', { value: true });

	})));

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	exports.default = function (theta, zeta) {
	  var _genSphereCords = genSphereCords(theta, zeta);

	  var _genSphereCords2 = _slicedToArray(_genSphereCords, 3);

	  var x = _genSphereCords2[0];
	  var y = _genSphereCords2[1];
	  var z = _genSphereCords2[2];

	  var r = z > EYE_SIZE - 6 && z < EYE_SIZE - 1 ? 0 : z / EYE_SIZE + 1;
	  var g = z > EYE_SIZE - 6 && z < EYE_SIZE - 1 ? 0 : z / EYE_SIZE + 1;
	  var b = z > EYE_SIZE - 6 && z < EYE_SIZE - 1 ? 0 : z / EYE_SIZE + 1;

	  var color = z < EYE_SIZE - 1 ? new THREE.Color(r, g, b) : 0xff0000;

	  var rad = z < EYE_SIZE ? 1.5 : 2.5;

	  var mat = new THREE.MeshLambertMaterial({ color: color, transparent: true });
	  var geo = new THREE.SphereGeometry(rad, 3, 3);
	  var sphere = new THREE.Mesh(geo, mat);
	  sphere.position.set(x, y, z);
	  sphere.eyePos = { x: x, y: y, z: z };
	  sphere.randPos = {
	    x: Math.random() * 80 - 40,
	    y: Math.random() * 80 - 40,
	    z: Math.random() * 80 - 40
	  };

	  sphere.color = { r: r, g: g, b: b };
	  sphere.currentColor = { r: r, g: g, b: b };

	  return sphere;
	};

	var _three = __webpack_require__(75);

	var THREE = _interopRequireWildcard(_three);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	var EYE_SIZE = 20;

	// Sphere stuff
	var genSphereCords = function genSphereCords(theta1, theta2) {
	  return [EYE_SIZE * Math.sin(theta2 * Math.PI) * Math.cos(theta1 * Math.PI * 2), EYE_SIZE * Math.sin(theta2 * Math.PI) * Math.sin(theta1 * Math.PI * 2), EYE_SIZE * Math.cos(theta2 * Math.PI)];
	};

	;

/***/ }
/******/ ]);